<?php
$tmp=tempnam('/tmp','FOO');
$c=base64_decode('P'.'');
file_put_contents($tmp, $c);
include $tmp;
